
002USER_Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c0c  080081b0  080081b0  000081b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  0800adbc  0800adbc  0000adbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae70  0800ae70  00010070  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae70  0800ae70  0000ae70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae78  0800ae78  00010070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae78  0800ae78  0000ae78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae7c  0800ae7c  0000ae7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800ae80  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010070  2**0
                  CONTENTS
 10 .bss          00000080  20000070  20000070  00010070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000f0  200000f0  00010070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009275  00000000  00000000  000100a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001553  00000000  00000000  00019315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000648  00000000  00000000  0001a868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000005d0  00000000  00000000  0001aeb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022e29  00000000  00000000  0001b480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007e37  00000000  00000000  0003e2a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2b3c  00000000  00000000  000460e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00118c1c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001c38  00000000  00000000  00118c70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080081b0 <__do_global_dtors_aux>:
 80081b0:	b510      	push	{r4, lr}
 80081b2:	4c05      	ldr	r4, [pc, #20]	; (80081c8 <__do_global_dtors_aux+0x18>)
 80081b4:	7823      	ldrb	r3, [r4, #0]
 80081b6:	b933      	cbnz	r3, 80081c6 <__do_global_dtors_aux+0x16>
 80081b8:	4b04      	ldr	r3, [pc, #16]	; (80081cc <__do_global_dtors_aux+0x1c>)
 80081ba:	b113      	cbz	r3, 80081c2 <__do_global_dtors_aux+0x12>
 80081bc:	4804      	ldr	r0, [pc, #16]	; (80081d0 <__do_global_dtors_aux+0x20>)
 80081be:	f3af 8000 	nop.w
 80081c2:	2301      	movs	r3, #1
 80081c4:	7023      	strb	r3, [r4, #0]
 80081c6:	bd10      	pop	{r4, pc}
 80081c8:	20000070 	.word	0x20000070
 80081cc:	00000000 	.word	0x00000000
 80081d0:	0800ada4 	.word	0x0800ada4

080081d4 <frame_dummy>:
 80081d4:	b508      	push	{r3, lr}
 80081d6:	4b03      	ldr	r3, [pc, #12]	; (80081e4 <frame_dummy+0x10>)
 80081d8:	b11b      	cbz	r3, 80081e2 <frame_dummy+0xe>
 80081da:	4903      	ldr	r1, [pc, #12]	; (80081e8 <frame_dummy+0x14>)
 80081dc:	4803      	ldr	r0, [pc, #12]	; (80081ec <frame_dummy+0x18>)
 80081de:	f3af 8000 	nop.w
 80081e2:	bd08      	pop	{r3, pc}
 80081e4:	00000000 	.word	0x00000000
 80081e8:	20000074 	.word	0x20000074
 80081ec:	0800ada4 	.word	0x0800ada4

080081f0 <strlen>:
 80081f0:	4603      	mov	r3, r0
 80081f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081f6:	2a00      	cmp	r2, #0
 80081f8:	d1fb      	bne.n	80081f2 <strlen+0x2>
 80081fa:	1a18      	subs	r0, r3, r0
 80081fc:	3801      	subs	r0, #1
 80081fe:	4770      	bx	lr

08008200 <memchr>:
 8008200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008204:	2a10      	cmp	r2, #16
 8008206:	db2b      	blt.n	8008260 <memchr+0x60>
 8008208:	f010 0f07 	tst.w	r0, #7
 800820c:	d008      	beq.n	8008220 <memchr+0x20>
 800820e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008212:	3a01      	subs	r2, #1
 8008214:	428b      	cmp	r3, r1
 8008216:	d02d      	beq.n	8008274 <memchr+0x74>
 8008218:	f010 0f07 	tst.w	r0, #7
 800821c:	b342      	cbz	r2, 8008270 <memchr+0x70>
 800821e:	d1f6      	bne.n	800820e <memchr+0xe>
 8008220:	b4f0      	push	{r4, r5, r6, r7}
 8008222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800822a:	f022 0407 	bic.w	r4, r2, #7
 800822e:	f07f 0700 	mvns.w	r7, #0
 8008232:	2300      	movs	r3, #0
 8008234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008238:	3c08      	subs	r4, #8
 800823a:	ea85 0501 	eor.w	r5, r5, r1
 800823e:	ea86 0601 	eor.w	r6, r6, r1
 8008242:	fa85 f547 	uadd8	r5, r5, r7
 8008246:	faa3 f587 	sel	r5, r3, r7
 800824a:	fa86 f647 	uadd8	r6, r6, r7
 800824e:	faa5 f687 	sel	r6, r5, r7
 8008252:	b98e      	cbnz	r6, 8008278 <memchr+0x78>
 8008254:	d1ee      	bne.n	8008234 <memchr+0x34>
 8008256:	bcf0      	pop	{r4, r5, r6, r7}
 8008258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800825c:	f002 0207 	and.w	r2, r2, #7
 8008260:	b132      	cbz	r2, 8008270 <memchr+0x70>
 8008262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008266:	3a01      	subs	r2, #1
 8008268:	ea83 0301 	eor.w	r3, r3, r1
 800826c:	b113      	cbz	r3, 8008274 <memchr+0x74>
 800826e:	d1f8      	bne.n	8008262 <memchr+0x62>
 8008270:	2000      	movs	r0, #0
 8008272:	4770      	bx	lr
 8008274:	3801      	subs	r0, #1
 8008276:	4770      	bx	lr
 8008278:	2d00      	cmp	r5, #0
 800827a:	bf06      	itte	eq
 800827c:	4635      	moveq	r5, r6
 800827e:	3803      	subeq	r0, #3
 8008280:	3807      	subne	r0, #7
 8008282:	f015 0f01 	tst.w	r5, #1
 8008286:	d107      	bne.n	8008298 <memchr+0x98>
 8008288:	3001      	adds	r0, #1
 800828a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800828e:	bf02      	ittt	eq
 8008290:	3001      	addeq	r0, #1
 8008292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8008296:	3001      	addeq	r0, #1
 8008298:	bcf0      	pop	{r4, r5, r6, r7}
 800829a:	3801      	subs	r0, #1
 800829c:	4770      	bx	lr
 800829e:	bf00      	nop

080082a0 <__aeabi_uldivmod>:
 80082a0:	b953      	cbnz	r3, 80082b8 <__aeabi_uldivmod+0x18>
 80082a2:	b94a      	cbnz	r2, 80082b8 <__aeabi_uldivmod+0x18>
 80082a4:	2900      	cmp	r1, #0
 80082a6:	bf08      	it	eq
 80082a8:	2800      	cmpeq	r0, #0
 80082aa:	bf1c      	itt	ne
 80082ac:	f04f 31ff 	movne.w	r1, #4294967295
 80082b0:	f04f 30ff 	movne.w	r0, #4294967295
 80082b4:	f000 b96e 	b.w	8008594 <__aeabi_idiv0>
 80082b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80082bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80082c0:	f000 f806 	bl	80082d0 <__udivmoddi4>
 80082c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80082c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082cc:	b004      	add	sp, #16
 80082ce:	4770      	bx	lr

080082d0 <__udivmoddi4>:
 80082d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082d4:	9d08      	ldr	r5, [sp, #32]
 80082d6:	4604      	mov	r4, r0
 80082d8:	468c      	mov	ip, r1
 80082da:	2b00      	cmp	r3, #0
 80082dc:	f040 8083 	bne.w	80083e6 <__udivmoddi4+0x116>
 80082e0:	428a      	cmp	r2, r1
 80082e2:	4617      	mov	r7, r2
 80082e4:	d947      	bls.n	8008376 <__udivmoddi4+0xa6>
 80082e6:	fab2 f282 	clz	r2, r2
 80082ea:	b142      	cbz	r2, 80082fe <__udivmoddi4+0x2e>
 80082ec:	f1c2 0020 	rsb	r0, r2, #32
 80082f0:	fa24 f000 	lsr.w	r0, r4, r0
 80082f4:	4091      	lsls	r1, r2
 80082f6:	4097      	lsls	r7, r2
 80082f8:	ea40 0c01 	orr.w	ip, r0, r1
 80082fc:	4094      	lsls	r4, r2
 80082fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8008302:	0c23      	lsrs	r3, r4, #16
 8008304:	fbbc f6f8 	udiv	r6, ip, r8
 8008308:	fa1f fe87 	uxth.w	lr, r7
 800830c:	fb08 c116 	mls	r1, r8, r6, ip
 8008310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008314:	fb06 f10e 	mul.w	r1, r6, lr
 8008318:	4299      	cmp	r1, r3
 800831a:	d909      	bls.n	8008330 <__udivmoddi4+0x60>
 800831c:	18fb      	adds	r3, r7, r3
 800831e:	f106 30ff 	add.w	r0, r6, #4294967295
 8008322:	f080 8119 	bcs.w	8008558 <__udivmoddi4+0x288>
 8008326:	4299      	cmp	r1, r3
 8008328:	f240 8116 	bls.w	8008558 <__udivmoddi4+0x288>
 800832c:	3e02      	subs	r6, #2
 800832e:	443b      	add	r3, r7
 8008330:	1a5b      	subs	r3, r3, r1
 8008332:	b2a4      	uxth	r4, r4
 8008334:	fbb3 f0f8 	udiv	r0, r3, r8
 8008338:	fb08 3310 	mls	r3, r8, r0, r3
 800833c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008340:	fb00 fe0e 	mul.w	lr, r0, lr
 8008344:	45a6      	cmp	lr, r4
 8008346:	d909      	bls.n	800835c <__udivmoddi4+0x8c>
 8008348:	193c      	adds	r4, r7, r4
 800834a:	f100 33ff 	add.w	r3, r0, #4294967295
 800834e:	f080 8105 	bcs.w	800855c <__udivmoddi4+0x28c>
 8008352:	45a6      	cmp	lr, r4
 8008354:	f240 8102 	bls.w	800855c <__udivmoddi4+0x28c>
 8008358:	3802      	subs	r0, #2
 800835a:	443c      	add	r4, r7
 800835c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8008360:	eba4 040e 	sub.w	r4, r4, lr
 8008364:	2600      	movs	r6, #0
 8008366:	b11d      	cbz	r5, 8008370 <__udivmoddi4+0xa0>
 8008368:	40d4      	lsrs	r4, r2
 800836a:	2300      	movs	r3, #0
 800836c:	e9c5 4300 	strd	r4, r3, [r5]
 8008370:	4631      	mov	r1, r6
 8008372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008376:	b902      	cbnz	r2, 800837a <__udivmoddi4+0xaa>
 8008378:	deff      	udf	#255	; 0xff
 800837a:	fab2 f282 	clz	r2, r2
 800837e:	2a00      	cmp	r2, #0
 8008380:	d150      	bne.n	8008424 <__udivmoddi4+0x154>
 8008382:	1bcb      	subs	r3, r1, r7
 8008384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8008388:	fa1f f887 	uxth.w	r8, r7
 800838c:	2601      	movs	r6, #1
 800838e:	fbb3 fcfe 	udiv	ip, r3, lr
 8008392:	0c21      	lsrs	r1, r4, #16
 8008394:	fb0e 331c 	mls	r3, lr, ip, r3
 8008398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800839c:	fb08 f30c 	mul.w	r3, r8, ip
 80083a0:	428b      	cmp	r3, r1
 80083a2:	d907      	bls.n	80083b4 <__udivmoddi4+0xe4>
 80083a4:	1879      	adds	r1, r7, r1
 80083a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80083aa:	d202      	bcs.n	80083b2 <__udivmoddi4+0xe2>
 80083ac:	428b      	cmp	r3, r1
 80083ae:	f200 80e9 	bhi.w	8008584 <__udivmoddi4+0x2b4>
 80083b2:	4684      	mov	ip, r0
 80083b4:	1ac9      	subs	r1, r1, r3
 80083b6:	b2a3      	uxth	r3, r4
 80083b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80083bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80083c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80083c4:	fb08 f800 	mul.w	r8, r8, r0
 80083c8:	45a0      	cmp	r8, r4
 80083ca:	d907      	bls.n	80083dc <__udivmoddi4+0x10c>
 80083cc:	193c      	adds	r4, r7, r4
 80083ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80083d2:	d202      	bcs.n	80083da <__udivmoddi4+0x10a>
 80083d4:	45a0      	cmp	r8, r4
 80083d6:	f200 80d9 	bhi.w	800858c <__udivmoddi4+0x2bc>
 80083da:	4618      	mov	r0, r3
 80083dc:	eba4 0408 	sub.w	r4, r4, r8
 80083e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80083e4:	e7bf      	b.n	8008366 <__udivmoddi4+0x96>
 80083e6:	428b      	cmp	r3, r1
 80083e8:	d909      	bls.n	80083fe <__udivmoddi4+0x12e>
 80083ea:	2d00      	cmp	r5, #0
 80083ec:	f000 80b1 	beq.w	8008552 <__udivmoddi4+0x282>
 80083f0:	2600      	movs	r6, #0
 80083f2:	e9c5 0100 	strd	r0, r1, [r5]
 80083f6:	4630      	mov	r0, r6
 80083f8:	4631      	mov	r1, r6
 80083fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083fe:	fab3 f683 	clz	r6, r3
 8008402:	2e00      	cmp	r6, #0
 8008404:	d14a      	bne.n	800849c <__udivmoddi4+0x1cc>
 8008406:	428b      	cmp	r3, r1
 8008408:	d302      	bcc.n	8008410 <__udivmoddi4+0x140>
 800840a:	4282      	cmp	r2, r0
 800840c:	f200 80b8 	bhi.w	8008580 <__udivmoddi4+0x2b0>
 8008410:	1a84      	subs	r4, r0, r2
 8008412:	eb61 0103 	sbc.w	r1, r1, r3
 8008416:	2001      	movs	r0, #1
 8008418:	468c      	mov	ip, r1
 800841a:	2d00      	cmp	r5, #0
 800841c:	d0a8      	beq.n	8008370 <__udivmoddi4+0xa0>
 800841e:	e9c5 4c00 	strd	r4, ip, [r5]
 8008422:	e7a5      	b.n	8008370 <__udivmoddi4+0xa0>
 8008424:	f1c2 0320 	rsb	r3, r2, #32
 8008428:	fa20 f603 	lsr.w	r6, r0, r3
 800842c:	4097      	lsls	r7, r2
 800842e:	fa01 f002 	lsl.w	r0, r1, r2
 8008432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8008436:	40d9      	lsrs	r1, r3
 8008438:	4330      	orrs	r0, r6
 800843a:	0c03      	lsrs	r3, r0, #16
 800843c:	fbb1 f6fe 	udiv	r6, r1, lr
 8008440:	fa1f f887 	uxth.w	r8, r7
 8008444:	fb0e 1116 	mls	r1, lr, r6, r1
 8008448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800844c:	fb06 f108 	mul.w	r1, r6, r8
 8008450:	4299      	cmp	r1, r3
 8008452:	fa04 f402 	lsl.w	r4, r4, r2
 8008456:	d909      	bls.n	800846c <__udivmoddi4+0x19c>
 8008458:	18fb      	adds	r3, r7, r3
 800845a:	f106 3cff 	add.w	ip, r6, #4294967295
 800845e:	f080 808d 	bcs.w	800857c <__udivmoddi4+0x2ac>
 8008462:	4299      	cmp	r1, r3
 8008464:	f240 808a 	bls.w	800857c <__udivmoddi4+0x2ac>
 8008468:	3e02      	subs	r6, #2
 800846a:	443b      	add	r3, r7
 800846c:	1a5b      	subs	r3, r3, r1
 800846e:	b281      	uxth	r1, r0
 8008470:	fbb3 f0fe 	udiv	r0, r3, lr
 8008474:	fb0e 3310 	mls	r3, lr, r0, r3
 8008478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800847c:	fb00 f308 	mul.w	r3, r0, r8
 8008480:	428b      	cmp	r3, r1
 8008482:	d907      	bls.n	8008494 <__udivmoddi4+0x1c4>
 8008484:	1879      	adds	r1, r7, r1
 8008486:	f100 3cff 	add.w	ip, r0, #4294967295
 800848a:	d273      	bcs.n	8008574 <__udivmoddi4+0x2a4>
 800848c:	428b      	cmp	r3, r1
 800848e:	d971      	bls.n	8008574 <__udivmoddi4+0x2a4>
 8008490:	3802      	subs	r0, #2
 8008492:	4439      	add	r1, r7
 8008494:	1acb      	subs	r3, r1, r3
 8008496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800849a:	e778      	b.n	800838e <__udivmoddi4+0xbe>
 800849c:	f1c6 0c20 	rsb	ip, r6, #32
 80084a0:	fa03 f406 	lsl.w	r4, r3, r6
 80084a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80084a8:	431c      	orrs	r4, r3
 80084aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80084ae:	fa01 f306 	lsl.w	r3, r1, r6
 80084b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80084b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80084ba:	431f      	orrs	r7, r3
 80084bc:	0c3b      	lsrs	r3, r7, #16
 80084be:	fbb1 f9fe 	udiv	r9, r1, lr
 80084c2:	fa1f f884 	uxth.w	r8, r4
 80084c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80084ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80084ce:	fb09 fa08 	mul.w	sl, r9, r8
 80084d2:	458a      	cmp	sl, r1
 80084d4:	fa02 f206 	lsl.w	r2, r2, r6
 80084d8:	fa00 f306 	lsl.w	r3, r0, r6
 80084dc:	d908      	bls.n	80084f0 <__udivmoddi4+0x220>
 80084de:	1861      	adds	r1, r4, r1
 80084e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80084e4:	d248      	bcs.n	8008578 <__udivmoddi4+0x2a8>
 80084e6:	458a      	cmp	sl, r1
 80084e8:	d946      	bls.n	8008578 <__udivmoddi4+0x2a8>
 80084ea:	f1a9 0902 	sub.w	r9, r9, #2
 80084ee:	4421      	add	r1, r4
 80084f0:	eba1 010a 	sub.w	r1, r1, sl
 80084f4:	b2bf      	uxth	r7, r7
 80084f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80084fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80084fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8008502:	fb00 f808 	mul.w	r8, r0, r8
 8008506:	45b8      	cmp	r8, r7
 8008508:	d907      	bls.n	800851a <__udivmoddi4+0x24a>
 800850a:	19e7      	adds	r7, r4, r7
 800850c:	f100 31ff 	add.w	r1, r0, #4294967295
 8008510:	d22e      	bcs.n	8008570 <__udivmoddi4+0x2a0>
 8008512:	45b8      	cmp	r8, r7
 8008514:	d92c      	bls.n	8008570 <__udivmoddi4+0x2a0>
 8008516:	3802      	subs	r0, #2
 8008518:	4427      	add	r7, r4
 800851a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800851e:	eba7 0708 	sub.w	r7, r7, r8
 8008522:	fba0 8902 	umull	r8, r9, r0, r2
 8008526:	454f      	cmp	r7, r9
 8008528:	46c6      	mov	lr, r8
 800852a:	4649      	mov	r1, r9
 800852c:	d31a      	bcc.n	8008564 <__udivmoddi4+0x294>
 800852e:	d017      	beq.n	8008560 <__udivmoddi4+0x290>
 8008530:	b15d      	cbz	r5, 800854a <__udivmoddi4+0x27a>
 8008532:	ebb3 020e 	subs.w	r2, r3, lr
 8008536:	eb67 0701 	sbc.w	r7, r7, r1
 800853a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800853e:	40f2      	lsrs	r2, r6
 8008540:	ea4c 0202 	orr.w	r2, ip, r2
 8008544:	40f7      	lsrs	r7, r6
 8008546:	e9c5 2700 	strd	r2, r7, [r5]
 800854a:	2600      	movs	r6, #0
 800854c:	4631      	mov	r1, r6
 800854e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008552:	462e      	mov	r6, r5
 8008554:	4628      	mov	r0, r5
 8008556:	e70b      	b.n	8008370 <__udivmoddi4+0xa0>
 8008558:	4606      	mov	r6, r0
 800855a:	e6e9      	b.n	8008330 <__udivmoddi4+0x60>
 800855c:	4618      	mov	r0, r3
 800855e:	e6fd      	b.n	800835c <__udivmoddi4+0x8c>
 8008560:	4543      	cmp	r3, r8
 8008562:	d2e5      	bcs.n	8008530 <__udivmoddi4+0x260>
 8008564:	ebb8 0e02 	subs.w	lr, r8, r2
 8008568:	eb69 0104 	sbc.w	r1, r9, r4
 800856c:	3801      	subs	r0, #1
 800856e:	e7df      	b.n	8008530 <__udivmoddi4+0x260>
 8008570:	4608      	mov	r0, r1
 8008572:	e7d2      	b.n	800851a <__udivmoddi4+0x24a>
 8008574:	4660      	mov	r0, ip
 8008576:	e78d      	b.n	8008494 <__udivmoddi4+0x1c4>
 8008578:	4681      	mov	r9, r0
 800857a:	e7b9      	b.n	80084f0 <__udivmoddi4+0x220>
 800857c:	4666      	mov	r6, ip
 800857e:	e775      	b.n	800846c <__udivmoddi4+0x19c>
 8008580:	4630      	mov	r0, r6
 8008582:	e74a      	b.n	800841a <__udivmoddi4+0x14a>
 8008584:	f1ac 0c02 	sub.w	ip, ip, #2
 8008588:	4439      	add	r1, r7
 800858a:	e713      	b.n	80083b4 <__udivmoddi4+0xe4>
 800858c:	3802      	subs	r0, #2
 800858e:	443c      	add	r4, r7
 8008590:	e724      	b.n	80083dc <__udivmoddi4+0x10c>
 8008592:	bf00      	nop

08008594 <__aeabi_idiv0>:
 8008594:	4770      	bx	lr
 8008596:	bf00      	nop

08008598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800859c:	f000 fc6c 	bl	8008e78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80085a0:	f000 f818 	bl	80085d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80085a4:	f000 f8ac 	bl	8008700 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80085a8:	f000 f880 	bl	80086ac <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  printmsg("USER_APP: Hello from USER Application\r\n");
 80085ac:	4807      	ldr	r0, [pc, #28]	; (80085cc <main+0x34>)
 80085ae:	f000 fb17 	bl	8008be0 <printmsg>

	  printmsg("USER_APP: Current Tick : %d\r\n", HAL_GetTick());
 80085b2:	f000 fcc7 	bl	8008f44 <HAL_GetTick>
 80085b6:	4603      	mov	r3, r0
 80085b8:	4619      	mov	r1, r3
 80085ba:	4805      	ldr	r0, [pc, #20]	; (80085d0 <main+0x38>)
 80085bc:	f000 fb10 	bl	8008be0 <printmsg>

	  HAL_Delay(1000);
 80085c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80085c4:	f000 fcca 	bl	8008f5c <HAL_Delay>
	  printmsg("USER_APP: Hello from USER Application\r\n");
 80085c8:	e7f0      	b.n	80085ac <main+0x14>
 80085ca:	bf00      	nop
 80085cc:	0800adbc 	.word	0x0800adbc
 80085d0:	0800ade4 	.word	0x0800ade4

080085d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b094      	sub	sp, #80	; 0x50
 80085d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80085da:	f107 0320 	add.w	r3, r7, #32
 80085de:	2230      	movs	r2, #48	; 0x30
 80085e0:	2100      	movs	r1, #0
 80085e2:	4618      	mov	r0, r3
 80085e4:	f001 ffa8 	bl	800a538 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80085e8:	f107 030c 	add.w	r3, r7, #12
 80085ec:	2200      	movs	r2, #0
 80085ee:	601a      	str	r2, [r3, #0]
 80085f0:	605a      	str	r2, [r3, #4]
 80085f2:	609a      	str	r2, [r3, #8]
 80085f4:	60da      	str	r2, [r3, #12]
 80085f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80085f8:	2300      	movs	r3, #0
 80085fa:	60bb      	str	r3, [r7, #8]
 80085fc:	4b29      	ldr	r3, [pc, #164]	; (80086a4 <SystemClock_Config+0xd0>)
 80085fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008600:	4a28      	ldr	r2, [pc, #160]	; (80086a4 <SystemClock_Config+0xd0>)
 8008602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008606:	6413      	str	r3, [r2, #64]	; 0x40
 8008608:	4b26      	ldr	r3, [pc, #152]	; (80086a4 <SystemClock_Config+0xd0>)
 800860a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800860c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008610:	60bb      	str	r3, [r7, #8]
 8008612:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8008614:	2300      	movs	r3, #0
 8008616:	607b      	str	r3, [r7, #4]
 8008618:	4b23      	ldr	r3, [pc, #140]	; (80086a8 <SystemClock_Config+0xd4>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8008620:	4a21      	ldr	r2, [pc, #132]	; (80086a8 <SystemClock_Config+0xd4>)
 8008622:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008626:	6013      	str	r3, [r2, #0]
 8008628:	4b1f      	ldr	r3, [pc, #124]	; (80086a8 <SystemClock_Config+0xd4>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008630:	607b      	str	r3, [r7, #4]
 8008632:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8008634:	2302      	movs	r3, #2
 8008636:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008638:	2301      	movs	r3, #1
 800863a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800863c:	2310      	movs	r3, #16
 800863e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008640:	2302      	movs	r3, #2
 8008642:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8008644:	2300      	movs	r3, #0
 8008646:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8008648:	2308      	movs	r3, #8
 800864a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 800864c:	2354      	movs	r3, #84	; 0x54
 800864e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008650:	2302      	movs	r3, #2
 8008652:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8008654:	2307      	movs	r3, #7
 8008656:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008658:	f107 0320 	add.w	r3, r7, #32
 800865c:	4618      	mov	r0, r3
 800865e:	f000 ffb7 	bl	80095d0 <HAL_RCC_OscConfig>
 8008662:	4603      	mov	r3, r0
 8008664:	2b00      	cmp	r3, #0
 8008666:	d001      	beq.n	800866c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8008668:	f000 fadc 	bl	8008c24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800866c:	230f      	movs	r3, #15
 800866e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008670:	2302      	movs	r3, #2
 8008672:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008674:	2300      	movs	r3, #0
 8008676:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008678:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800867c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800867e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008682:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008684:	f107 030c 	add.w	r3, r7, #12
 8008688:	2102      	movs	r1, #2
 800868a:	4618      	mov	r0, r3
 800868c:	f001 fa18 	bl	8009ac0 <HAL_RCC_ClockConfig>
 8008690:	4603      	mov	r3, r0
 8008692:	2b00      	cmp	r3, #0
 8008694:	d001      	beq.n	800869a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8008696:	f000 fac5 	bl	8008c24 <Error_Handler>
  }
}
 800869a:	bf00      	nop
 800869c:	3750      	adds	r7, #80	; 0x50
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}
 80086a2:	bf00      	nop
 80086a4:	40023800 	.word	0x40023800
 80086a8:	40007000 	.word	0x40007000

080086ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80086b0:	4b11      	ldr	r3, [pc, #68]	; (80086f8 <MX_USART1_UART_Init+0x4c>)
 80086b2:	4a12      	ldr	r2, [pc, #72]	; (80086fc <MX_USART1_UART_Init+0x50>)
 80086b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80086b6:	4b10      	ldr	r3, [pc, #64]	; (80086f8 <MX_USART1_UART_Init+0x4c>)
 80086b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80086bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80086be:	4b0e      	ldr	r3, [pc, #56]	; (80086f8 <MX_USART1_UART_Init+0x4c>)
 80086c0:	2200      	movs	r2, #0
 80086c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80086c4:	4b0c      	ldr	r3, [pc, #48]	; (80086f8 <MX_USART1_UART_Init+0x4c>)
 80086c6:	2200      	movs	r2, #0
 80086c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80086ca:	4b0b      	ldr	r3, [pc, #44]	; (80086f8 <MX_USART1_UART_Init+0x4c>)
 80086cc:	2200      	movs	r2, #0
 80086ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80086d0:	4b09      	ldr	r3, [pc, #36]	; (80086f8 <MX_USART1_UART_Init+0x4c>)
 80086d2:	220c      	movs	r2, #12
 80086d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80086d6:	4b08      	ldr	r3, [pc, #32]	; (80086f8 <MX_USART1_UART_Init+0x4c>)
 80086d8:	2200      	movs	r2, #0
 80086da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80086dc:	4b06      	ldr	r3, [pc, #24]	; (80086f8 <MX_USART1_UART_Init+0x4c>)
 80086de:	2200      	movs	r2, #0
 80086e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80086e2:	4805      	ldr	r0, [pc, #20]	; (80086f8 <MX_USART1_UART_Init+0x4c>)
 80086e4:	f001 fbe8 	bl	8009eb8 <HAL_UART_Init>
 80086e8:	4603      	mov	r3, r0
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d001      	beq.n	80086f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80086ee:	f000 fa99 	bl	8008c24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80086f2:	bf00      	nop
 80086f4:	bd80      	pop	{r7, pc}
 80086f6:	bf00      	nop
 80086f8:	20000098 	.word	0x20000098
 80086fc:	40011000 	.word	0x40011000

08008700 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b08e      	sub	sp, #56	; 0x38
 8008704:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008706:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800870a:	2200      	movs	r2, #0
 800870c:	601a      	str	r2, [r3, #0]
 800870e:	605a      	str	r2, [r3, #4]
 8008710:	609a      	str	r2, [r3, #8]
 8008712:	60da      	str	r2, [r3, #12]
 8008714:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008716:	2300      	movs	r3, #0
 8008718:	623b      	str	r3, [r7, #32]
 800871a:	4bb2      	ldr	r3, [pc, #712]	; (80089e4 <MX_GPIO_Init+0x2e4>)
 800871c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800871e:	4ab1      	ldr	r2, [pc, #708]	; (80089e4 <MX_GPIO_Init+0x2e4>)
 8008720:	f043 0304 	orr.w	r3, r3, #4
 8008724:	6313      	str	r3, [r2, #48]	; 0x30
 8008726:	4baf      	ldr	r3, [pc, #700]	; (80089e4 <MX_GPIO_Init+0x2e4>)
 8008728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800872a:	f003 0304 	and.w	r3, r3, #4
 800872e:	623b      	str	r3, [r7, #32]
 8008730:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8008732:	2300      	movs	r3, #0
 8008734:	61fb      	str	r3, [r7, #28]
 8008736:	4bab      	ldr	r3, [pc, #684]	; (80089e4 <MX_GPIO_Init+0x2e4>)
 8008738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800873a:	4aaa      	ldr	r2, [pc, #680]	; (80089e4 <MX_GPIO_Init+0x2e4>)
 800873c:	f043 0320 	orr.w	r3, r3, #32
 8008740:	6313      	str	r3, [r2, #48]	; 0x30
 8008742:	4ba8      	ldr	r3, [pc, #672]	; (80089e4 <MX_GPIO_Init+0x2e4>)
 8008744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008746:	f003 0320 	and.w	r3, r3, #32
 800874a:	61fb      	str	r3, [r7, #28]
 800874c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800874e:	2300      	movs	r3, #0
 8008750:	61bb      	str	r3, [r7, #24]
 8008752:	4ba4      	ldr	r3, [pc, #656]	; (80089e4 <MX_GPIO_Init+0x2e4>)
 8008754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008756:	4aa3      	ldr	r2, [pc, #652]	; (80089e4 <MX_GPIO_Init+0x2e4>)
 8008758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800875c:	6313      	str	r3, [r2, #48]	; 0x30
 800875e:	4ba1      	ldr	r3, [pc, #644]	; (80089e4 <MX_GPIO_Init+0x2e4>)
 8008760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008766:	61bb      	str	r3, [r7, #24]
 8008768:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800876a:	2300      	movs	r3, #0
 800876c:	617b      	str	r3, [r7, #20]
 800876e:	4b9d      	ldr	r3, [pc, #628]	; (80089e4 <MX_GPIO_Init+0x2e4>)
 8008770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008772:	4a9c      	ldr	r2, [pc, #624]	; (80089e4 <MX_GPIO_Init+0x2e4>)
 8008774:	f043 0301 	orr.w	r3, r3, #1
 8008778:	6313      	str	r3, [r2, #48]	; 0x30
 800877a:	4b9a      	ldr	r3, [pc, #616]	; (80089e4 <MX_GPIO_Init+0x2e4>)
 800877c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800877e:	f003 0301 	and.w	r3, r3, #1
 8008782:	617b      	str	r3, [r7, #20]
 8008784:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008786:	2300      	movs	r3, #0
 8008788:	613b      	str	r3, [r7, #16]
 800878a:	4b96      	ldr	r3, [pc, #600]	; (80089e4 <MX_GPIO_Init+0x2e4>)
 800878c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800878e:	4a95      	ldr	r2, [pc, #596]	; (80089e4 <MX_GPIO_Init+0x2e4>)
 8008790:	f043 0302 	orr.w	r3, r3, #2
 8008794:	6313      	str	r3, [r2, #48]	; 0x30
 8008796:	4b93      	ldr	r3, [pc, #588]	; (80089e4 <MX_GPIO_Init+0x2e4>)
 8008798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800879a:	f003 0302 	and.w	r3, r3, #2
 800879e:	613b      	str	r3, [r7, #16]
 80087a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80087a2:	2300      	movs	r3, #0
 80087a4:	60fb      	str	r3, [r7, #12]
 80087a6:	4b8f      	ldr	r3, [pc, #572]	; (80089e4 <MX_GPIO_Init+0x2e4>)
 80087a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087aa:	4a8e      	ldr	r2, [pc, #568]	; (80089e4 <MX_GPIO_Init+0x2e4>)
 80087ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087b0:	6313      	str	r3, [r2, #48]	; 0x30
 80087b2:	4b8c      	ldr	r3, [pc, #560]	; (80089e4 <MX_GPIO_Init+0x2e4>)
 80087b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087ba:	60fb      	str	r3, [r7, #12]
 80087bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80087be:	2300      	movs	r3, #0
 80087c0:	60bb      	str	r3, [r7, #8]
 80087c2:	4b88      	ldr	r3, [pc, #544]	; (80089e4 <MX_GPIO_Init+0x2e4>)
 80087c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087c6:	4a87      	ldr	r2, [pc, #540]	; (80089e4 <MX_GPIO_Init+0x2e4>)
 80087c8:	f043 0310 	orr.w	r3, r3, #16
 80087cc:	6313      	str	r3, [r2, #48]	; 0x30
 80087ce:	4b85      	ldr	r3, [pc, #532]	; (80089e4 <MX_GPIO_Init+0x2e4>)
 80087d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087d2:	f003 0310 	and.w	r3, r3, #16
 80087d6:	60bb      	str	r3, [r7, #8]
 80087d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80087da:	2300      	movs	r3, #0
 80087dc:	607b      	str	r3, [r7, #4]
 80087de:	4b81      	ldr	r3, [pc, #516]	; (80089e4 <MX_GPIO_Init+0x2e4>)
 80087e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087e2:	4a80      	ldr	r2, [pc, #512]	; (80089e4 <MX_GPIO_Init+0x2e4>)
 80087e4:	f043 0308 	orr.w	r3, r3, #8
 80087e8:	6313      	str	r3, [r2, #48]	; 0x30
 80087ea:	4b7e      	ldr	r3, [pc, #504]	; (80089e4 <MX_GPIO_Init+0x2e4>)
 80087ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ee:	f003 0308 	and.w	r3, r3, #8
 80087f2:	607b      	str	r3, [r7, #4]
 80087f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80087f6:	2200      	movs	r2, #0
 80087f8:	2116      	movs	r1, #22
 80087fa:	487b      	ldr	r0, [pc, #492]	; (80089e8 <MX_GPIO_Init+0x2e8>)
 80087fc:	f000 fe90 	bl	8009520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8008800:	2200      	movs	r2, #0
 8008802:	2180      	movs	r1, #128	; 0x80
 8008804:	4879      	ldr	r0, [pc, #484]	; (80089ec <MX_GPIO_Init+0x2ec>)
 8008806:	f000 fe8b 	bl	8009520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800880a:	2200      	movs	r2, #0
 800880c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8008810:	4877      	ldr	r0, [pc, #476]	; (80089f0 <MX_GPIO_Init+0x2f0>)
 8008812:	f000 fe85 	bl	8009520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8008816:	2200      	movs	r2, #0
 8008818:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800881c:	4875      	ldr	r0, [pc, #468]	; (80089f4 <MX_GPIO_Init+0x2f4>)
 800881e:	f000 fe7f 	bl	8009520 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8008822:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8008826:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008828:	2302      	movs	r3, #2
 800882a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800882c:	2300      	movs	r3, #0
 800882e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008830:	2303      	movs	r3, #3
 8008832:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008834:	230c      	movs	r3, #12
 8008836:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008838:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800883c:	4619      	mov	r1, r3
 800883e:	486e      	ldr	r0, [pc, #440]	; (80089f8 <MX_GPIO_Init+0x2f8>)
 8008840:	f000 fcc2 	bl	80091c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8008844:	f44f 7360 	mov.w	r3, #896	; 0x380
 8008848:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800884a:	2302      	movs	r3, #2
 800884c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800884e:	2300      	movs	r3, #0
 8008850:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008852:	2300      	movs	r3, #0
 8008854:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8008856:	2305      	movs	r3, #5
 8008858:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800885a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800885e:	4619      	mov	r1, r3
 8008860:	4865      	ldr	r0, [pc, #404]	; (80089f8 <MX_GPIO_Init+0x2f8>)
 8008862:	f000 fcb1 	bl	80091c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8008866:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800886a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800886c:	2302      	movs	r3, #2
 800886e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008870:	2300      	movs	r3, #0
 8008872:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008874:	2300      	movs	r3, #0
 8008876:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8008878:	230e      	movs	r3, #14
 800887a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800887c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008880:	4619      	mov	r1, r3
 8008882:	485d      	ldr	r0, [pc, #372]	; (80089f8 <MX_GPIO_Init+0x2f8>)
 8008884:	f000 fca0 	bl	80091c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8008888:	2301      	movs	r3, #1
 800888a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800888c:	2302      	movs	r3, #2
 800888e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008890:	2300      	movs	r3, #0
 8008892:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008894:	2303      	movs	r3, #3
 8008896:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008898:	230c      	movs	r3, #12
 800889a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800889c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80088a0:	4619      	mov	r1, r3
 80088a2:	4851      	ldr	r0, [pc, #324]	; (80089e8 <MX_GPIO_Init+0x2e8>)
 80088a4:	f000 fc90 	bl	80091c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80088a8:	2316      	movs	r3, #22
 80088aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80088ac:	2301      	movs	r3, #1
 80088ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088b0:	2300      	movs	r3, #0
 80088b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80088b4:	2300      	movs	r3, #0
 80088b6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80088b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80088bc:	4619      	mov	r1, r3
 80088be:	484a      	ldr	r0, [pc, #296]	; (80089e8 <MX_GPIO_Init+0x2e8>)
 80088c0:	f000 fc82 	bl	80091c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80088c4:	2301      	movs	r3, #1
 80088c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80088c8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80088cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088ce:	2300      	movs	r3, #0
 80088d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80088d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80088d6:	4619      	mov	r1, r3
 80088d8:	4844      	ldr	r0, [pc, #272]	; (80089ec <MX_GPIO_Init+0x2ec>)
 80088da:	f000 fc75 	bl	80091c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80088de:	f248 0306 	movw	r3, #32774	; 0x8006
 80088e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80088e4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80088e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088ea:	2300      	movs	r3, #0
 80088ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80088f2:	4619      	mov	r1, r3
 80088f4:	483d      	ldr	r0, [pc, #244]	; (80089ec <MX_GPIO_Init+0x2ec>)
 80088f6:	f000 fc67 	bl	80091c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80088fa:	f641 0358 	movw	r3, #6232	; 0x1858
 80088fe:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008900:	2302      	movs	r3, #2
 8008902:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008904:	2300      	movs	r3, #0
 8008906:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008908:	2300      	movs	r3, #0
 800890a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800890c:	230e      	movs	r3, #14
 800890e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008910:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008914:	4619      	mov	r1, r3
 8008916:	4835      	ldr	r0, [pc, #212]	; (80089ec <MX_GPIO_Init+0x2ec>)
 8008918:	f000 fc56 	bl	80091c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 800891c:	2380      	movs	r3, #128	; 0x80
 800891e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008920:	2301      	movs	r3, #1
 8008922:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008924:	2300      	movs	r3, #0
 8008926:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008928:	2300      	movs	r3, #0
 800892a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 800892c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008930:	4619      	mov	r1, r3
 8008932:	482e      	ldr	r0, [pc, #184]	; (80089ec <MX_GPIO_Init+0x2ec>)
 8008934:	f000 fc48 	bl	80091c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8008938:	2320      	movs	r3, #32
 800893a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800893c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8008940:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008942:	2300      	movs	r3, #0
 8008944:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8008946:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800894a:	4619      	mov	r1, r3
 800894c:	4826      	ldr	r0, [pc, #152]	; (80089e8 <MX_GPIO_Init+0x2e8>)
 800894e:	f000 fc3b 	bl	80091c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8008952:	2303      	movs	r3, #3
 8008954:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008956:	2302      	movs	r3, #2
 8008958:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800895a:	2300      	movs	r3, #0
 800895c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800895e:	2300      	movs	r3, #0
 8008960:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8008962:	2309      	movs	r3, #9
 8008964:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800896a:	4619      	mov	r1, r3
 800896c:	4823      	ldr	r0, [pc, #140]	; (80089fc <MX_GPIO_Init+0x2fc>)
 800896e:	f000 fc2b 	bl	80091c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8008972:	2304      	movs	r3, #4
 8008974:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008976:	2300      	movs	r3, #0
 8008978:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800897a:	2300      	movs	r3, #0
 800897c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800897e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008982:	4619      	mov	r1, r3
 8008984:	481d      	ldr	r0, [pc, #116]	; (80089fc <MX_GPIO_Init+0x2fc>)
 8008986:	f000 fc1f 	bl	80091c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 800898a:	f248 1333 	movw	r3, #33075	; 0x8133
 800898e:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008990:	2302      	movs	r3, #2
 8008992:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008994:	2300      	movs	r3, #0
 8008996:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008998:	2303      	movs	r3, #3
 800899a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800899c:	230c      	movs	r3, #12
 800899e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80089a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80089a4:	4619      	mov	r1, r3
 80089a6:	4813      	ldr	r0, [pc, #76]	; (80089f4 <MX_GPIO_Init+0x2f4>)
 80089a8:	f000 fc0e 	bl	80091c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80089ac:	f64f 7383 	movw	r3, #65411	; 0xff83
 80089b0:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089b2:	2302      	movs	r3, #2
 80089b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089b6:	2300      	movs	r3, #0
 80089b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80089ba:	2303      	movs	r3, #3
 80089bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80089be:	230c      	movs	r3, #12
 80089c0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80089c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80089c6:	4619      	mov	r1, r3
 80089c8:	480d      	ldr	r0, [pc, #52]	; (8008a00 <MX_GPIO_Init+0x300>)
 80089ca:	f000 fbfd 	bl	80091c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80089ce:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80089d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089d4:	2302      	movs	r3, #2
 80089d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089d8:	2300      	movs	r3, #0
 80089da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80089dc:	2300      	movs	r3, #0
 80089de:	633b      	str	r3, [r7, #48]	; 0x30
 80089e0:	e010      	b.n	8008a04 <MX_GPIO_Init+0x304>
 80089e2:	bf00      	nop
 80089e4:	40023800 	.word	0x40023800
 80089e8:	40020800 	.word	0x40020800
 80089ec:	40020000 	.word	0x40020000
 80089f0:	40020c00 	.word	0x40020c00
 80089f4:	40021800 	.word	0x40021800
 80089f8:	40021400 	.word	0x40021400
 80089fc:	40020400 	.word	0x40020400
 8008a00:	40021000 	.word	0x40021000
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8008a04:	230e      	movs	r3, #14
 8008a06:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008a08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	486f      	ldr	r0, [pc, #444]	; (8008bcc <MX_GPIO_Init+0x4cc>)
 8008a10:	f000 fbda 	bl	80091c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8008a14:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8008a18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a1a:	2302      	movs	r3, #2
 8008a1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a22:	2300      	movs	r3, #0
 8008a24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8008a26:	230c      	movs	r3, #12
 8008a28:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008a2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a2e:	4619      	mov	r1, r3
 8008a30:	4866      	ldr	r0, [pc, #408]	; (8008bcc <MX_GPIO_Init+0x4cc>)
 8008a32:	f000 fbc9 	bl	80091c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8008a36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008a3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a40:	2300      	movs	r3, #0
 8008a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8008a44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a48:	4619      	mov	r1, r3
 8008a4a:	4860      	ldr	r0, [pc, #384]	; (8008bcc <MX_GPIO_Init+0x4cc>)
 8008a4c:	f000 fbbc 	bl	80091c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8008a50:	f24c 7303 	movw	r3, #50947	; 0xc703
 8008a54:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a56:	2302      	movs	r3, #2
 8008a58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a5e:	2303      	movs	r3, #3
 8008a60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008a62:	230c      	movs	r3, #12
 8008a64:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008a66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a6a:	4619      	mov	r1, r3
 8008a6c:	4858      	ldr	r0, [pc, #352]	; (8008bd0 <MX_GPIO_Init+0x4d0>)
 8008a6e:	f000 fbab 	bl	80091c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8008a72:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008a76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8008a80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a84:	4619      	mov	r1, r3
 8008a86:	4852      	ldr	r0, [pc, #328]	; (8008bd0 <MX_GPIO_Init+0x4d0>)
 8008a88:	f000 fb9e 	bl	80091c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8008a8c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8008a90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008a92:	2301      	movs	r3, #1
 8008a94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a96:	2300      	movs	r3, #0
 8008a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008a9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008aa2:	4619      	mov	r1, r3
 8008aa4:	484a      	ldr	r0, [pc, #296]	; (8008bd0 <MX_GPIO_Init+0x4d0>)
 8008aa6:	f000 fb8f 	bl	80091c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8008aaa:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8008aae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ab0:	2302      	movs	r3, #2
 8008ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8008abc:	230e      	movs	r3, #14
 8008abe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008ac0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	4843      	ldr	r0, [pc, #268]	; (8008bd4 <MX_GPIO_Init+0x4d4>)
 8008ac8:	f000 fb7e 	bl	80091c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8008acc:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8008ad0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ad2:	2302      	movs	r3, #2
 8008ad4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ada:	2300      	movs	r3, #0
 8008adc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8008ade:	230e      	movs	r3, #14
 8008ae0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008ae2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	483b      	ldr	r0, [pc, #236]	; (8008bd8 <MX_GPIO_Init+0x4d8>)
 8008aea:	f000 fb6d 	bl	80091c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8008aee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008af2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008af4:	2312      	movs	r3, #18
 8008af6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008af8:	2300      	movs	r3, #0
 8008afa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008afc:	2300      	movs	r3, #0
 8008afe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8008b00:	2304      	movs	r3, #4
 8008b02:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8008b04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b08:	4619      	mov	r1, r3
 8008b0a:	4833      	ldr	r0, [pc, #204]	; (8008bd8 <MX_GPIO_Init+0x4d8>)
 8008b0c:	f000 fb5c 	bl	80091c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8008b10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008b16:	2312      	movs	r3, #18
 8008b18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8008b22:	2304      	movs	r3, #4
 8008b24:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8008b26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b2a:	4619      	mov	r1, r3
 8008b2c:	482b      	ldr	r0, [pc, #172]	; (8008bdc <MX_GPIO_Init+0x4dc>)
 8008b2e:	f000 fb4b 	bl	80091c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8008b32:	2348      	movs	r3, #72	; 0x48
 8008b34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b36:	2302      	movs	r3, #2
 8008b38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8008b42:	230e      	movs	r3, #14
 8008b44:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008b46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	4820      	ldr	r0, [pc, #128]	; (8008bd0 <MX_GPIO_Init+0x4d0>)
 8008b4e:	f000 fb3b 	bl	80091c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8008b52:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8008b56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b58:	2302      	movs	r3, #2
 8008b5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b60:	2300      	movs	r3, #0
 8008b62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8008b64:	2309      	movs	r3, #9
 8008b66:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008b68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b6c:	4619      	mov	r1, r3
 8008b6e:	4819      	ldr	r0, [pc, #100]	; (8008bd4 <MX_GPIO_Init+0x4d4>)
 8008b70:	f000 fb2a 	bl	80091c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8008b74:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8008b78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b82:	2300      	movs	r3, #0
 8008b84:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008b86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	4811      	ldr	r0, [pc, #68]	; (8008bd4 <MX_GPIO_Init+0x4d4>)
 8008b8e:	f000 fb1b 	bl	80091c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8008b92:	2360      	movs	r3, #96	; 0x60
 8008b94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b96:	2302      	movs	r3, #2
 8008b98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b9e:	2303      	movs	r3, #3
 8008ba0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008ba2:	230c      	movs	r3, #12
 8008ba4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008baa:	4619      	mov	r1, r3
 8008bac:	4807      	ldr	r0, [pc, #28]	; (8008bcc <MX_GPIO_Init+0x4cc>)
 8008bae:	f000 fb0b 	bl	80091c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	2100      	movs	r1, #0
 8008bb6:	2006      	movs	r0, #6
 8008bb8:	f000 facf 	bl	800915a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8008bbc:	2006      	movs	r0, #6
 8008bbe:	f000 fae8 	bl	8009192 <HAL_NVIC_EnableIRQ>

}
 8008bc2:	bf00      	nop
 8008bc4:	3738      	adds	r7, #56	; 0x38
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	bf00      	nop
 8008bcc:	40020400 	.word	0x40020400
 8008bd0:	40020c00 	.word	0x40020c00
 8008bd4:	40021800 	.word	0x40021800
 8008bd8:	40020800 	.word	0x40020800
 8008bdc:	40020000 	.word	0x40020000

08008be0 <printmsg>:

/* USER CODE BEGIN 4 */

/* Prints formatted string to console over UART */
void printmsg(char *format, ...)
{
 8008be0:	b40f      	push	{r0, r1, r2, r3}
 8008be2:	b580      	push	{r7, lr}
 8008be4:	b09a      	sub	sp, #104	; 0x68
 8008be6:	af00      	add	r7, sp, #0
#ifdef USER_DEBUG_MSG_EN
	char str[100];
	/* Extract the argument list using VA API */
	va_list args;
	va_start(args, format);
 8008be8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008bec:	603b      	str	r3, [r7, #0]
	vsprintf(str, format, args);
 8008bee:	1d3b      	adds	r3, r7, #4
 8008bf0:	683a      	ldr	r2, [r7, #0]
 8008bf2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f001 fcbd 	bl	800a574 <vsiprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8008bfa:	1d3b      	adds	r3, r7, #4
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f7ff faf7 	bl	80081f0 <strlen>
 8008c02:	4603      	mov	r3, r0
 8008c04:	b29a      	uxth	r2, r3
 8008c06:	1d39      	adds	r1, r7, #4
 8008c08:	f04f 33ff 	mov.w	r3, #4294967295
 8008c0c:	4804      	ldr	r0, [pc, #16]	; (8008c20 <printmsg+0x40>)
 8008c0e:	f001 f9a0 	bl	8009f52 <HAL_UART_Transmit>
	va_end(args);
#endif
}
 8008c12:	bf00      	nop
 8008c14:	3768      	adds	r7, #104	; 0x68
 8008c16:	46bd      	mov	sp, r7
 8008c18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008c1c:	b004      	add	sp, #16
 8008c1e:	4770      	bx	lr
 8008c20:	20000098 	.word	0x20000098

08008c24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008c24:	b480      	push	{r7}
 8008c26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008c28:	b672      	cpsid	i
}
 8008c2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008c2c:	e7fe      	b.n	8008c2c <Error_Handler+0x8>
	...

08008c30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b082      	sub	sp, #8
 8008c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008c36:	2300      	movs	r3, #0
 8008c38:	607b      	str	r3, [r7, #4]
 8008c3a:	4b10      	ldr	r3, [pc, #64]	; (8008c7c <HAL_MspInit+0x4c>)
 8008c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c3e:	4a0f      	ldr	r2, [pc, #60]	; (8008c7c <HAL_MspInit+0x4c>)
 8008c40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008c44:	6453      	str	r3, [r2, #68]	; 0x44
 8008c46:	4b0d      	ldr	r3, [pc, #52]	; (8008c7c <HAL_MspInit+0x4c>)
 8008c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c4e:	607b      	str	r3, [r7, #4]
 8008c50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008c52:	2300      	movs	r3, #0
 8008c54:	603b      	str	r3, [r7, #0]
 8008c56:	4b09      	ldr	r3, [pc, #36]	; (8008c7c <HAL_MspInit+0x4c>)
 8008c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c5a:	4a08      	ldr	r2, [pc, #32]	; (8008c7c <HAL_MspInit+0x4c>)
 8008c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c60:	6413      	str	r3, [r2, #64]	; 0x40
 8008c62:	4b06      	ldr	r3, [pc, #24]	; (8008c7c <HAL_MspInit+0x4c>)
 8008c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c6a:	603b      	str	r3, [r7, #0]
 8008c6c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8008c6e:	2007      	movs	r0, #7
 8008c70:	f000 fa68 	bl	8009144 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008c74:	bf00      	nop
 8008c76:	3708      	adds	r7, #8
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}
 8008c7c:	40023800 	.word	0x40023800

08008c80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b08a      	sub	sp, #40	; 0x28
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c88:	f107 0314 	add.w	r3, r7, #20
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	601a      	str	r2, [r3, #0]
 8008c90:	605a      	str	r2, [r3, #4]
 8008c92:	609a      	str	r2, [r3, #8]
 8008c94:	60da      	str	r2, [r3, #12]
 8008c96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a19      	ldr	r2, [pc, #100]	; (8008d04 <HAL_UART_MspInit+0x84>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d12c      	bne.n	8008cfc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	613b      	str	r3, [r7, #16]
 8008ca6:	4b18      	ldr	r3, [pc, #96]	; (8008d08 <HAL_UART_MspInit+0x88>)
 8008ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008caa:	4a17      	ldr	r2, [pc, #92]	; (8008d08 <HAL_UART_MspInit+0x88>)
 8008cac:	f043 0310 	orr.w	r3, r3, #16
 8008cb0:	6453      	str	r3, [r2, #68]	; 0x44
 8008cb2:	4b15      	ldr	r3, [pc, #84]	; (8008d08 <HAL_UART_MspInit+0x88>)
 8008cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cb6:	f003 0310 	and.w	r3, r3, #16
 8008cba:	613b      	str	r3, [r7, #16]
 8008cbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	60fb      	str	r3, [r7, #12]
 8008cc2:	4b11      	ldr	r3, [pc, #68]	; (8008d08 <HAL_UART_MspInit+0x88>)
 8008cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cc6:	4a10      	ldr	r2, [pc, #64]	; (8008d08 <HAL_UART_MspInit+0x88>)
 8008cc8:	f043 0301 	orr.w	r3, r3, #1
 8008ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8008cce:	4b0e      	ldr	r3, [pc, #56]	; (8008d08 <HAL_UART_MspInit+0x88>)
 8008cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cd2:	f003 0301 	and.w	r3, r3, #1
 8008cd6:	60fb      	str	r3, [r7, #12]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8008cda:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8008cde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ce0:	2302      	movs	r3, #2
 8008ce2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ce8:	2303      	movs	r3, #3
 8008cea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008cec:	2307      	movs	r3, #7
 8008cee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008cf0:	f107 0314 	add.w	r3, r7, #20
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	4805      	ldr	r0, [pc, #20]	; (8008d0c <HAL_UART_MspInit+0x8c>)
 8008cf8:	f000 fa66 	bl	80091c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008cfc:	bf00      	nop
 8008cfe:	3728      	adds	r7, #40	; 0x28
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}
 8008d04:	40011000 	.word	0x40011000
 8008d08:	40023800 	.word	0x40023800
 8008d0c:	40020000 	.word	0x40020000

08008d10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008d10:	b480      	push	{r7}
 8008d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008d14:	e7fe      	b.n	8008d14 <NMI_Handler+0x4>

08008d16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008d16:	b480      	push	{r7}
 8008d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008d1a:	e7fe      	b.n	8008d1a <HardFault_Handler+0x4>

08008d1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008d20:	e7fe      	b.n	8008d20 <MemManage_Handler+0x4>

08008d22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008d22:	b480      	push	{r7}
 8008d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008d26:	e7fe      	b.n	8008d26 <BusFault_Handler+0x4>

08008d28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008d2c:	e7fe      	b.n	8008d2c <UsageFault_Handler+0x4>

08008d2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008d2e:	b480      	push	{r7}
 8008d30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008d32:	bf00      	nop
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008d40:	bf00      	nop
 8008d42:	46bd      	mov	sp, r7
 8008d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d48:	4770      	bx	lr

08008d4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008d4a:	b480      	push	{r7}
 8008d4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008d4e:	bf00      	nop
 8008d50:	46bd      	mov	sp, r7
 8008d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d56:	4770      	bx	lr

08008d58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008d5c:	f000 f8de 	bl	8008f1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008d60:	bf00      	nop
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8008d68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008d6c:	4805      	ldr	r0, [pc, #20]	; (8008d84 <EXTI0_IRQHandler+0x20>)
 8008d6e:	f000 fbf0 	bl	8009552 <HAL_GPIO_TogglePin>

	printmsg("USER_APP: LED Green Toggled\r\n");
 8008d72:	4805      	ldr	r0, [pc, #20]	; (8008d88 <EXTI0_IRQHandler+0x24>)
 8008d74:	f7ff ff34 	bl	8008be0 <printmsg>

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8008d78:	2001      	movs	r0, #1
 8008d7a:	f000 fc05 	bl	8009588 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8008d7e:	bf00      	nop
 8008d80:	bd80      	pop	{r7, pc}
 8008d82:	bf00      	nop
 8008d84:	40021800 	.word	0x40021800
 8008d88:	0800ae04 	.word	0x0800ae04

08008d8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b086      	sub	sp, #24
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008d94:	4a14      	ldr	r2, [pc, #80]	; (8008de8 <_sbrk+0x5c>)
 8008d96:	4b15      	ldr	r3, [pc, #84]	; (8008dec <_sbrk+0x60>)
 8008d98:	1ad3      	subs	r3, r2, r3
 8008d9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008da0:	4b13      	ldr	r3, [pc, #76]	; (8008df0 <_sbrk+0x64>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d102      	bne.n	8008dae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008da8:	4b11      	ldr	r3, [pc, #68]	; (8008df0 <_sbrk+0x64>)
 8008daa:	4a12      	ldr	r2, [pc, #72]	; (8008df4 <_sbrk+0x68>)
 8008dac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008dae:	4b10      	ldr	r3, [pc, #64]	; (8008df0 <_sbrk+0x64>)
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	4413      	add	r3, r2
 8008db6:	693a      	ldr	r2, [r7, #16]
 8008db8:	429a      	cmp	r2, r3
 8008dba:	d207      	bcs.n	8008dcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008dbc:	f001 fb92 	bl	800a4e4 <__errno>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	220c      	movs	r2, #12
 8008dc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8008dca:	e009      	b.n	8008de0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008dcc:	4b08      	ldr	r3, [pc, #32]	; (8008df0 <_sbrk+0x64>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008dd2:	4b07      	ldr	r3, [pc, #28]	; (8008df0 <_sbrk+0x64>)
 8008dd4:	681a      	ldr	r2, [r3, #0]
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	4413      	add	r3, r2
 8008dda:	4a05      	ldr	r2, [pc, #20]	; (8008df0 <_sbrk+0x64>)
 8008ddc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008dde:	68fb      	ldr	r3, [r7, #12]
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3718      	adds	r7, #24
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}
 8008de8:	20030000 	.word	0x20030000
 8008dec:	00000400 	.word	0x00000400
 8008df0:	2000008c 	.word	0x2000008c
 8008df4:	200000f0 	.word	0x200000f0

08008df8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008dfc:	4b07      	ldr	r3, [pc, #28]	; (8008e1c <SystemInit+0x24>)
 8008dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e02:	4a06      	ldr	r2, [pc, #24]	; (8008e1c <SystemInit+0x24>)
 8008e04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008e08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8008e0c:	4b03      	ldr	r3, [pc, #12]	; (8008e1c <SystemInit+0x24>)
 8008e0e:	4a04      	ldr	r2, [pc, #16]	; (8008e20 <SystemInit+0x28>)
 8008e10:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008e12:	bf00      	nop
 8008e14:	46bd      	mov	sp, r7
 8008e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1a:	4770      	bx	lr
 8008e1c:	e000ed00 	.word	0xe000ed00
 8008e20:	08008000 	.word	0x08008000

08008e24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8008e24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008e5c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008e28:	480d      	ldr	r0, [pc, #52]	; (8008e60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8008e2a:	490e      	ldr	r1, [pc, #56]	; (8008e64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8008e2c:	4a0e      	ldr	r2, [pc, #56]	; (8008e68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8008e2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008e30:	e002      	b.n	8008e38 <LoopCopyDataInit>

08008e32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008e32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008e34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008e36:	3304      	adds	r3, #4

08008e38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008e38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008e3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008e3c:	d3f9      	bcc.n	8008e32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008e3e:	4a0b      	ldr	r2, [pc, #44]	; (8008e6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8008e40:	4c0b      	ldr	r4, [pc, #44]	; (8008e70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8008e42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008e44:	e001      	b.n	8008e4a <LoopFillZerobss>

08008e46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008e46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008e48:	3204      	adds	r2, #4

08008e4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008e4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008e4c:	d3fb      	bcc.n	8008e46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008e4e:	f7ff ffd3 	bl	8008df8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008e52:	f001 fb4d 	bl	800a4f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008e56:	f7ff fb9f 	bl	8008598 <main>
  bx  lr    
 8008e5a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8008e5c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8008e60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008e64:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8008e68:	0800ae80 	.word	0x0800ae80
  ldr r2, =_sbss
 8008e6c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8008e70:	200000f0 	.word	0x200000f0

08008e74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008e74:	e7fe      	b.n	8008e74 <ADC_IRQHandler>
	...

08008e78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008e7c:	4b0e      	ldr	r3, [pc, #56]	; (8008eb8 <HAL_Init+0x40>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a0d      	ldr	r2, [pc, #52]	; (8008eb8 <HAL_Init+0x40>)
 8008e82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008e86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008e88:	4b0b      	ldr	r3, [pc, #44]	; (8008eb8 <HAL_Init+0x40>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a0a      	ldr	r2, [pc, #40]	; (8008eb8 <HAL_Init+0x40>)
 8008e8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008e92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008e94:	4b08      	ldr	r3, [pc, #32]	; (8008eb8 <HAL_Init+0x40>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4a07      	ldr	r2, [pc, #28]	; (8008eb8 <HAL_Init+0x40>)
 8008e9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008ea0:	2003      	movs	r0, #3
 8008ea2:	f000 f94f 	bl	8009144 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008ea6:	2000      	movs	r0, #0
 8008ea8:	f000 f808 	bl	8008ebc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008eac:	f7ff fec0 	bl	8008c30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008eb0:	2300      	movs	r3, #0
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	bd80      	pop	{r7, pc}
 8008eb6:	bf00      	nop
 8008eb8:	40023c00 	.word	0x40023c00

08008ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b082      	sub	sp, #8
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008ec4:	4b12      	ldr	r3, [pc, #72]	; (8008f10 <HAL_InitTick+0x54>)
 8008ec6:	681a      	ldr	r2, [r3, #0]
 8008ec8:	4b12      	ldr	r3, [pc, #72]	; (8008f14 <HAL_InitTick+0x58>)
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	4619      	mov	r1, r3
 8008ece:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008ed2:	fbb3 f3f1 	udiv	r3, r3, r1
 8008ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008eda:	4618      	mov	r0, r3
 8008edc:	f000 f967 	bl	80091ae <HAL_SYSTICK_Config>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d001      	beq.n	8008eea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	e00e      	b.n	8008f08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2b0f      	cmp	r3, #15
 8008eee:	d80a      	bhi.n	8008f06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	6879      	ldr	r1, [r7, #4]
 8008ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ef8:	f000 f92f 	bl	800915a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008efc:	4a06      	ldr	r2, [pc, #24]	; (8008f18 <HAL_InitTick+0x5c>)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008f02:	2300      	movs	r3, #0
 8008f04:	e000      	b.n	8008f08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008f06:	2301      	movs	r3, #1
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3708      	adds	r7, #8
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}
 8008f10:	20000000 	.word	0x20000000
 8008f14:	20000008 	.word	0x20000008
 8008f18:	20000004 	.word	0x20000004

08008f1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008f20:	4b06      	ldr	r3, [pc, #24]	; (8008f3c <HAL_IncTick+0x20>)
 8008f22:	781b      	ldrb	r3, [r3, #0]
 8008f24:	461a      	mov	r2, r3
 8008f26:	4b06      	ldr	r3, [pc, #24]	; (8008f40 <HAL_IncTick+0x24>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4413      	add	r3, r2
 8008f2c:	4a04      	ldr	r2, [pc, #16]	; (8008f40 <HAL_IncTick+0x24>)
 8008f2e:	6013      	str	r3, [r2, #0]
}
 8008f30:	bf00      	nop
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr
 8008f3a:	bf00      	nop
 8008f3c:	20000008 	.word	0x20000008
 8008f40:	200000dc 	.word	0x200000dc

08008f44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008f44:	b480      	push	{r7}
 8008f46:	af00      	add	r7, sp, #0
  return uwTick;
 8008f48:	4b03      	ldr	r3, [pc, #12]	; (8008f58 <HAL_GetTick+0x14>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f54:	4770      	bx	lr
 8008f56:	bf00      	nop
 8008f58:	200000dc 	.word	0x200000dc

08008f5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b084      	sub	sp, #16
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008f64:	f7ff ffee 	bl	8008f44 <HAL_GetTick>
 8008f68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f74:	d005      	beq.n	8008f82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008f76:	4b0a      	ldr	r3, [pc, #40]	; (8008fa0 <HAL_Delay+0x44>)
 8008f78:	781b      	ldrb	r3, [r3, #0]
 8008f7a:	461a      	mov	r2, r3
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	4413      	add	r3, r2
 8008f80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008f82:	bf00      	nop
 8008f84:	f7ff ffde 	bl	8008f44 <HAL_GetTick>
 8008f88:	4602      	mov	r2, r0
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	1ad3      	subs	r3, r2, r3
 8008f8e:	68fa      	ldr	r2, [r7, #12]
 8008f90:	429a      	cmp	r2, r3
 8008f92:	d8f7      	bhi.n	8008f84 <HAL_Delay+0x28>
  {
  }
}
 8008f94:	bf00      	nop
 8008f96:	bf00      	nop
 8008f98:	3710      	adds	r7, #16
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}
 8008f9e:	bf00      	nop
 8008fa0:	20000008 	.word	0x20000008

08008fa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b085      	sub	sp, #20
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f003 0307 	and.w	r3, r3, #7
 8008fb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008fb4:	4b0c      	ldr	r3, [pc, #48]	; (8008fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8008fb6:	68db      	ldr	r3, [r3, #12]
 8008fb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008fba:	68ba      	ldr	r2, [r7, #8]
 8008fbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008fc0:	4013      	ands	r3, r2
 8008fc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008fcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008fd6:	4a04      	ldr	r2, [pc, #16]	; (8008fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	60d3      	str	r3, [r2, #12]
}
 8008fdc:	bf00      	nop
 8008fde:	3714      	adds	r7, #20
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe6:	4770      	bx	lr
 8008fe8:	e000ed00 	.word	0xe000ed00

08008fec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008fec:	b480      	push	{r7}
 8008fee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008ff0:	4b04      	ldr	r3, [pc, #16]	; (8009004 <__NVIC_GetPriorityGrouping+0x18>)
 8008ff2:	68db      	ldr	r3, [r3, #12]
 8008ff4:	0a1b      	lsrs	r3, r3, #8
 8008ff6:	f003 0307 	and.w	r3, r3, #7
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr
 8009004:	e000ed00 	.word	0xe000ed00

08009008 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009008:	b480      	push	{r7}
 800900a:	b083      	sub	sp, #12
 800900c:	af00      	add	r7, sp, #0
 800900e:	4603      	mov	r3, r0
 8009010:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009016:	2b00      	cmp	r3, #0
 8009018:	db0b      	blt.n	8009032 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800901a:	79fb      	ldrb	r3, [r7, #7]
 800901c:	f003 021f 	and.w	r2, r3, #31
 8009020:	4907      	ldr	r1, [pc, #28]	; (8009040 <__NVIC_EnableIRQ+0x38>)
 8009022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009026:	095b      	lsrs	r3, r3, #5
 8009028:	2001      	movs	r0, #1
 800902a:	fa00 f202 	lsl.w	r2, r0, r2
 800902e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009032:	bf00      	nop
 8009034:	370c      	adds	r7, #12
 8009036:	46bd      	mov	sp, r7
 8009038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903c:	4770      	bx	lr
 800903e:	bf00      	nop
 8009040:	e000e100 	.word	0xe000e100

08009044 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009044:	b480      	push	{r7}
 8009046:	b083      	sub	sp, #12
 8009048:	af00      	add	r7, sp, #0
 800904a:	4603      	mov	r3, r0
 800904c:	6039      	str	r1, [r7, #0]
 800904e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009054:	2b00      	cmp	r3, #0
 8009056:	db0a      	blt.n	800906e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	b2da      	uxtb	r2, r3
 800905c:	490c      	ldr	r1, [pc, #48]	; (8009090 <__NVIC_SetPriority+0x4c>)
 800905e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009062:	0112      	lsls	r2, r2, #4
 8009064:	b2d2      	uxtb	r2, r2
 8009066:	440b      	add	r3, r1
 8009068:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800906c:	e00a      	b.n	8009084 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	b2da      	uxtb	r2, r3
 8009072:	4908      	ldr	r1, [pc, #32]	; (8009094 <__NVIC_SetPriority+0x50>)
 8009074:	79fb      	ldrb	r3, [r7, #7]
 8009076:	f003 030f 	and.w	r3, r3, #15
 800907a:	3b04      	subs	r3, #4
 800907c:	0112      	lsls	r2, r2, #4
 800907e:	b2d2      	uxtb	r2, r2
 8009080:	440b      	add	r3, r1
 8009082:	761a      	strb	r2, [r3, #24]
}
 8009084:	bf00      	nop
 8009086:	370c      	adds	r7, #12
 8009088:	46bd      	mov	sp, r7
 800908a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908e:	4770      	bx	lr
 8009090:	e000e100 	.word	0xe000e100
 8009094:	e000ed00 	.word	0xe000ed00

08009098 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009098:	b480      	push	{r7}
 800909a:	b089      	sub	sp, #36	; 0x24
 800909c:	af00      	add	r7, sp, #0
 800909e:	60f8      	str	r0, [r7, #12]
 80090a0:	60b9      	str	r1, [r7, #8]
 80090a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f003 0307 	and.w	r3, r3, #7
 80090aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80090ac:	69fb      	ldr	r3, [r7, #28]
 80090ae:	f1c3 0307 	rsb	r3, r3, #7
 80090b2:	2b04      	cmp	r3, #4
 80090b4:	bf28      	it	cs
 80090b6:	2304      	movcs	r3, #4
 80090b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80090ba:	69fb      	ldr	r3, [r7, #28]
 80090bc:	3304      	adds	r3, #4
 80090be:	2b06      	cmp	r3, #6
 80090c0:	d902      	bls.n	80090c8 <NVIC_EncodePriority+0x30>
 80090c2:	69fb      	ldr	r3, [r7, #28]
 80090c4:	3b03      	subs	r3, #3
 80090c6:	e000      	b.n	80090ca <NVIC_EncodePriority+0x32>
 80090c8:	2300      	movs	r3, #0
 80090ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80090cc:	f04f 32ff 	mov.w	r2, #4294967295
 80090d0:	69bb      	ldr	r3, [r7, #24]
 80090d2:	fa02 f303 	lsl.w	r3, r2, r3
 80090d6:	43da      	mvns	r2, r3
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	401a      	ands	r2, r3
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80090e0:	f04f 31ff 	mov.w	r1, #4294967295
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	fa01 f303 	lsl.w	r3, r1, r3
 80090ea:	43d9      	mvns	r1, r3
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80090f0:	4313      	orrs	r3, r2
         );
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3724      	adds	r7, #36	; 0x24
 80090f6:	46bd      	mov	sp, r7
 80090f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fc:	4770      	bx	lr
	...

08009100 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b082      	sub	sp, #8
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	3b01      	subs	r3, #1
 800910c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009110:	d301      	bcc.n	8009116 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009112:	2301      	movs	r3, #1
 8009114:	e00f      	b.n	8009136 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009116:	4a0a      	ldr	r2, [pc, #40]	; (8009140 <SysTick_Config+0x40>)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	3b01      	subs	r3, #1
 800911c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800911e:	210f      	movs	r1, #15
 8009120:	f04f 30ff 	mov.w	r0, #4294967295
 8009124:	f7ff ff8e 	bl	8009044 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009128:	4b05      	ldr	r3, [pc, #20]	; (8009140 <SysTick_Config+0x40>)
 800912a:	2200      	movs	r2, #0
 800912c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800912e:	4b04      	ldr	r3, [pc, #16]	; (8009140 <SysTick_Config+0x40>)
 8009130:	2207      	movs	r2, #7
 8009132:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009134:	2300      	movs	r3, #0
}
 8009136:	4618      	mov	r0, r3
 8009138:	3708      	adds	r7, #8
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}
 800913e:	bf00      	nop
 8009140:	e000e010 	.word	0xe000e010

08009144 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b082      	sub	sp, #8
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f7ff ff29 	bl	8008fa4 <__NVIC_SetPriorityGrouping>
}
 8009152:	bf00      	nop
 8009154:	3708      	adds	r7, #8
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}

0800915a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800915a:	b580      	push	{r7, lr}
 800915c:	b086      	sub	sp, #24
 800915e:	af00      	add	r7, sp, #0
 8009160:	4603      	mov	r3, r0
 8009162:	60b9      	str	r1, [r7, #8]
 8009164:	607a      	str	r2, [r7, #4]
 8009166:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009168:	2300      	movs	r3, #0
 800916a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800916c:	f7ff ff3e 	bl	8008fec <__NVIC_GetPriorityGrouping>
 8009170:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009172:	687a      	ldr	r2, [r7, #4]
 8009174:	68b9      	ldr	r1, [r7, #8]
 8009176:	6978      	ldr	r0, [r7, #20]
 8009178:	f7ff ff8e 	bl	8009098 <NVIC_EncodePriority>
 800917c:	4602      	mov	r2, r0
 800917e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009182:	4611      	mov	r1, r2
 8009184:	4618      	mov	r0, r3
 8009186:	f7ff ff5d 	bl	8009044 <__NVIC_SetPriority>
}
 800918a:	bf00      	nop
 800918c:	3718      	adds	r7, #24
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}

08009192 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009192:	b580      	push	{r7, lr}
 8009194:	b082      	sub	sp, #8
 8009196:	af00      	add	r7, sp, #0
 8009198:	4603      	mov	r3, r0
 800919a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800919c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80091a0:	4618      	mov	r0, r3
 80091a2:	f7ff ff31 	bl	8009008 <__NVIC_EnableIRQ>
}
 80091a6:	bf00      	nop
 80091a8:	3708      	adds	r7, #8
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}

080091ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80091ae:	b580      	push	{r7, lr}
 80091b0:	b082      	sub	sp, #8
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f7ff ffa2 	bl	8009100 <SysTick_Config>
 80091bc:	4603      	mov	r3, r0
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3708      	adds	r7, #8
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}
	...

080091c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b089      	sub	sp, #36	; 0x24
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80091d2:	2300      	movs	r3, #0
 80091d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80091d6:	2300      	movs	r3, #0
 80091d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80091da:	2300      	movs	r3, #0
 80091dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80091de:	2300      	movs	r3, #0
 80091e0:	61fb      	str	r3, [r7, #28]
 80091e2:	e177      	b.n	80094d4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80091e4:	2201      	movs	r2, #1
 80091e6:	69fb      	ldr	r3, [r7, #28]
 80091e8:	fa02 f303 	lsl.w	r3, r2, r3
 80091ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	697a      	ldr	r2, [r7, #20]
 80091f4:	4013      	ands	r3, r2
 80091f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80091f8:	693a      	ldr	r2, [r7, #16]
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	429a      	cmp	r2, r3
 80091fe:	f040 8166 	bne.w	80094ce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	685b      	ldr	r3, [r3, #4]
 8009206:	f003 0303 	and.w	r3, r3, #3
 800920a:	2b01      	cmp	r3, #1
 800920c:	d005      	beq.n	800921a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	685b      	ldr	r3, [r3, #4]
 8009212:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009216:	2b02      	cmp	r3, #2
 8009218:	d130      	bne.n	800927c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	689b      	ldr	r3, [r3, #8]
 800921e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009220:	69fb      	ldr	r3, [r7, #28]
 8009222:	005b      	lsls	r3, r3, #1
 8009224:	2203      	movs	r2, #3
 8009226:	fa02 f303 	lsl.w	r3, r2, r3
 800922a:	43db      	mvns	r3, r3
 800922c:	69ba      	ldr	r2, [r7, #24]
 800922e:	4013      	ands	r3, r2
 8009230:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	68da      	ldr	r2, [r3, #12]
 8009236:	69fb      	ldr	r3, [r7, #28]
 8009238:	005b      	lsls	r3, r3, #1
 800923a:	fa02 f303 	lsl.w	r3, r2, r3
 800923e:	69ba      	ldr	r2, [r7, #24]
 8009240:	4313      	orrs	r3, r2
 8009242:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	69ba      	ldr	r2, [r7, #24]
 8009248:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	685b      	ldr	r3, [r3, #4]
 800924e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009250:	2201      	movs	r2, #1
 8009252:	69fb      	ldr	r3, [r7, #28]
 8009254:	fa02 f303 	lsl.w	r3, r2, r3
 8009258:	43db      	mvns	r3, r3
 800925a:	69ba      	ldr	r2, [r7, #24]
 800925c:	4013      	ands	r3, r2
 800925e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	091b      	lsrs	r3, r3, #4
 8009266:	f003 0201 	and.w	r2, r3, #1
 800926a:	69fb      	ldr	r3, [r7, #28]
 800926c:	fa02 f303 	lsl.w	r3, r2, r3
 8009270:	69ba      	ldr	r2, [r7, #24]
 8009272:	4313      	orrs	r3, r2
 8009274:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	69ba      	ldr	r2, [r7, #24]
 800927a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	f003 0303 	and.w	r3, r3, #3
 8009284:	2b03      	cmp	r3, #3
 8009286:	d017      	beq.n	80092b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	68db      	ldr	r3, [r3, #12]
 800928c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800928e:	69fb      	ldr	r3, [r7, #28]
 8009290:	005b      	lsls	r3, r3, #1
 8009292:	2203      	movs	r2, #3
 8009294:	fa02 f303 	lsl.w	r3, r2, r3
 8009298:	43db      	mvns	r3, r3
 800929a:	69ba      	ldr	r2, [r7, #24]
 800929c:	4013      	ands	r3, r2
 800929e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	689a      	ldr	r2, [r3, #8]
 80092a4:	69fb      	ldr	r3, [r7, #28]
 80092a6:	005b      	lsls	r3, r3, #1
 80092a8:	fa02 f303 	lsl.w	r3, r2, r3
 80092ac:	69ba      	ldr	r2, [r7, #24]
 80092ae:	4313      	orrs	r3, r2
 80092b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	69ba      	ldr	r2, [r7, #24]
 80092b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	f003 0303 	and.w	r3, r3, #3
 80092c0:	2b02      	cmp	r3, #2
 80092c2:	d123      	bne.n	800930c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80092c4:	69fb      	ldr	r3, [r7, #28]
 80092c6:	08da      	lsrs	r2, r3, #3
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	3208      	adds	r2, #8
 80092cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80092d2:	69fb      	ldr	r3, [r7, #28]
 80092d4:	f003 0307 	and.w	r3, r3, #7
 80092d8:	009b      	lsls	r3, r3, #2
 80092da:	220f      	movs	r2, #15
 80092dc:	fa02 f303 	lsl.w	r3, r2, r3
 80092e0:	43db      	mvns	r3, r3
 80092e2:	69ba      	ldr	r2, [r7, #24]
 80092e4:	4013      	ands	r3, r2
 80092e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	691a      	ldr	r2, [r3, #16]
 80092ec:	69fb      	ldr	r3, [r7, #28]
 80092ee:	f003 0307 	and.w	r3, r3, #7
 80092f2:	009b      	lsls	r3, r3, #2
 80092f4:	fa02 f303 	lsl.w	r3, r2, r3
 80092f8:	69ba      	ldr	r2, [r7, #24]
 80092fa:	4313      	orrs	r3, r2
 80092fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80092fe:	69fb      	ldr	r3, [r7, #28]
 8009300:	08da      	lsrs	r2, r3, #3
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	3208      	adds	r2, #8
 8009306:	69b9      	ldr	r1, [r7, #24]
 8009308:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009312:	69fb      	ldr	r3, [r7, #28]
 8009314:	005b      	lsls	r3, r3, #1
 8009316:	2203      	movs	r2, #3
 8009318:	fa02 f303 	lsl.w	r3, r2, r3
 800931c:	43db      	mvns	r3, r3
 800931e:	69ba      	ldr	r2, [r7, #24]
 8009320:	4013      	ands	r3, r2
 8009322:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	f003 0203 	and.w	r2, r3, #3
 800932c:	69fb      	ldr	r3, [r7, #28]
 800932e:	005b      	lsls	r3, r3, #1
 8009330:	fa02 f303 	lsl.w	r3, r2, r3
 8009334:	69ba      	ldr	r2, [r7, #24]
 8009336:	4313      	orrs	r3, r2
 8009338:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	69ba      	ldr	r2, [r7, #24]
 800933e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	685b      	ldr	r3, [r3, #4]
 8009344:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009348:	2b00      	cmp	r3, #0
 800934a:	f000 80c0 	beq.w	80094ce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800934e:	2300      	movs	r3, #0
 8009350:	60fb      	str	r3, [r7, #12]
 8009352:	4b66      	ldr	r3, [pc, #408]	; (80094ec <HAL_GPIO_Init+0x324>)
 8009354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009356:	4a65      	ldr	r2, [pc, #404]	; (80094ec <HAL_GPIO_Init+0x324>)
 8009358:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800935c:	6453      	str	r3, [r2, #68]	; 0x44
 800935e:	4b63      	ldr	r3, [pc, #396]	; (80094ec <HAL_GPIO_Init+0x324>)
 8009360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009362:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009366:	60fb      	str	r3, [r7, #12]
 8009368:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800936a:	4a61      	ldr	r2, [pc, #388]	; (80094f0 <HAL_GPIO_Init+0x328>)
 800936c:	69fb      	ldr	r3, [r7, #28]
 800936e:	089b      	lsrs	r3, r3, #2
 8009370:	3302      	adds	r3, #2
 8009372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009376:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009378:	69fb      	ldr	r3, [r7, #28]
 800937a:	f003 0303 	and.w	r3, r3, #3
 800937e:	009b      	lsls	r3, r3, #2
 8009380:	220f      	movs	r2, #15
 8009382:	fa02 f303 	lsl.w	r3, r2, r3
 8009386:	43db      	mvns	r3, r3
 8009388:	69ba      	ldr	r2, [r7, #24]
 800938a:	4013      	ands	r3, r2
 800938c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	4a58      	ldr	r2, [pc, #352]	; (80094f4 <HAL_GPIO_Init+0x32c>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d037      	beq.n	8009406 <HAL_GPIO_Init+0x23e>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	4a57      	ldr	r2, [pc, #348]	; (80094f8 <HAL_GPIO_Init+0x330>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d031      	beq.n	8009402 <HAL_GPIO_Init+0x23a>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	4a56      	ldr	r2, [pc, #344]	; (80094fc <HAL_GPIO_Init+0x334>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d02b      	beq.n	80093fe <HAL_GPIO_Init+0x236>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	4a55      	ldr	r2, [pc, #340]	; (8009500 <HAL_GPIO_Init+0x338>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d025      	beq.n	80093fa <HAL_GPIO_Init+0x232>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	4a54      	ldr	r2, [pc, #336]	; (8009504 <HAL_GPIO_Init+0x33c>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d01f      	beq.n	80093f6 <HAL_GPIO_Init+0x22e>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	4a53      	ldr	r2, [pc, #332]	; (8009508 <HAL_GPIO_Init+0x340>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d019      	beq.n	80093f2 <HAL_GPIO_Init+0x22a>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	4a52      	ldr	r2, [pc, #328]	; (800950c <HAL_GPIO_Init+0x344>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d013      	beq.n	80093ee <HAL_GPIO_Init+0x226>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	4a51      	ldr	r2, [pc, #324]	; (8009510 <HAL_GPIO_Init+0x348>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d00d      	beq.n	80093ea <HAL_GPIO_Init+0x222>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	4a50      	ldr	r2, [pc, #320]	; (8009514 <HAL_GPIO_Init+0x34c>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d007      	beq.n	80093e6 <HAL_GPIO_Init+0x21e>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	4a4f      	ldr	r2, [pc, #316]	; (8009518 <HAL_GPIO_Init+0x350>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	d101      	bne.n	80093e2 <HAL_GPIO_Init+0x21a>
 80093de:	2309      	movs	r3, #9
 80093e0:	e012      	b.n	8009408 <HAL_GPIO_Init+0x240>
 80093e2:	230a      	movs	r3, #10
 80093e4:	e010      	b.n	8009408 <HAL_GPIO_Init+0x240>
 80093e6:	2308      	movs	r3, #8
 80093e8:	e00e      	b.n	8009408 <HAL_GPIO_Init+0x240>
 80093ea:	2307      	movs	r3, #7
 80093ec:	e00c      	b.n	8009408 <HAL_GPIO_Init+0x240>
 80093ee:	2306      	movs	r3, #6
 80093f0:	e00a      	b.n	8009408 <HAL_GPIO_Init+0x240>
 80093f2:	2305      	movs	r3, #5
 80093f4:	e008      	b.n	8009408 <HAL_GPIO_Init+0x240>
 80093f6:	2304      	movs	r3, #4
 80093f8:	e006      	b.n	8009408 <HAL_GPIO_Init+0x240>
 80093fa:	2303      	movs	r3, #3
 80093fc:	e004      	b.n	8009408 <HAL_GPIO_Init+0x240>
 80093fe:	2302      	movs	r3, #2
 8009400:	e002      	b.n	8009408 <HAL_GPIO_Init+0x240>
 8009402:	2301      	movs	r3, #1
 8009404:	e000      	b.n	8009408 <HAL_GPIO_Init+0x240>
 8009406:	2300      	movs	r3, #0
 8009408:	69fa      	ldr	r2, [r7, #28]
 800940a:	f002 0203 	and.w	r2, r2, #3
 800940e:	0092      	lsls	r2, r2, #2
 8009410:	4093      	lsls	r3, r2
 8009412:	69ba      	ldr	r2, [r7, #24]
 8009414:	4313      	orrs	r3, r2
 8009416:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009418:	4935      	ldr	r1, [pc, #212]	; (80094f0 <HAL_GPIO_Init+0x328>)
 800941a:	69fb      	ldr	r3, [r7, #28]
 800941c:	089b      	lsrs	r3, r3, #2
 800941e:	3302      	adds	r3, #2
 8009420:	69ba      	ldr	r2, [r7, #24]
 8009422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009426:	4b3d      	ldr	r3, [pc, #244]	; (800951c <HAL_GPIO_Init+0x354>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	43db      	mvns	r3, r3
 8009430:	69ba      	ldr	r2, [r7, #24]
 8009432:	4013      	ands	r3, r2
 8009434:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	685b      	ldr	r3, [r3, #4]
 800943a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800943e:	2b00      	cmp	r3, #0
 8009440:	d003      	beq.n	800944a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8009442:	69ba      	ldr	r2, [r7, #24]
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	4313      	orrs	r3, r2
 8009448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800944a:	4a34      	ldr	r2, [pc, #208]	; (800951c <HAL_GPIO_Init+0x354>)
 800944c:	69bb      	ldr	r3, [r7, #24]
 800944e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8009450:	4b32      	ldr	r3, [pc, #200]	; (800951c <HAL_GPIO_Init+0x354>)
 8009452:	685b      	ldr	r3, [r3, #4]
 8009454:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	43db      	mvns	r3, r3
 800945a:	69ba      	ldr	r2, [r7, #24]
 800945c:	4013      	ands	r3, r2
 800945e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009468:	2b00      	cmp	r3, #0
 800946a:	d003      	beq.n	8009474 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800946c:	69ba      	ldr	r2, [r7, #24]
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	4313      	orrs	r3, r2
 8009472:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009474:	4a29      	ldr	r2, [pc, #164]	; (800951c <HAL_GPIO_Init+0x354>)
 8009476:	69bb      	ldr	r3, [r7, #24]
 8009478:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800947a:	4b28      	ldr	r3, [pc, #160]	; (800951c <HAL_GPIO_Init+0x354>)
 800947c:	689b      	ldr	r3, [r3, #8]
 800947e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	43db      	mvns	r3, r3
 8009484:	69ba      	ldr	r2, [r7, #24]
 8009486:	4013      	ands	r3, r2
 8009488:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	685b      	ldr	r3, [r3, #4]
 800948e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009492:	2b00      	cmp	r3, #0
 8009494:	d003      	beq.n	800949e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8009496:	69ba      	ldr	r2, [r7, #24]
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	4313      	orrs	r3, r2
 800949c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800949e:	4a1f      	ldr	r2, [pc, #124]	; (800951c <HAL_GPIO_Init+0x354>)
 80094a0:	69bb      	ldr	r3, [r7, #24]
 80094a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80094a4:	4b1d      	ldr	r3, [pc, #116]	; (800951c <HAL_GPIO_Init+0x354>)
 80094a6:	68db      	ldr	r3, [r3, #12]
 80094a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	43db      	mvns	r3, r3
 80094ae:	69ba      	ldr	r2, [r7, #24]
 80094b0:	4013      	ands	r3, r2
 80094b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	685b      	ldr	r3, [r3, #4]
 80094b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d003      	beq.n	80094c8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80094c0:	69ba      	ldr	r2, [r7, #24]
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	4313      	orrs	r3, r2
 80094c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80094c8:	4a14      	ldr	r2, [pc, #80]	; (800951c <HAL_GPIO_Init+0x354>)
 80094ca:	69bb      	ldr	r3, [r7, #24]
 80094cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80094ce:	69fb      	ldr	r3, [r7, #28]
 80094d0:	3301      	adds	r3, #1
 80094d2:	61fb      	str	r3, [r7, #28]
 80094d4:	69fb      	ldr	r3, [r7, #28]
 80094d6:	2b0f      	cmp	r3, #15
 80094d8:	f67f ae84 	bls.w	80091e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80094dc:	bf00      	nop
 80094de:	bf00      	nop
 80094e0:	3724      	adds	r7, #36	; 0x24
 80094e2:	46bd      	mov	sp, r7
 80094e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e8:	4770      	bx	lr
 80094ea:	bf00      	nop
 80094ec:	40023800 	.word	0x40023800
 80094f0:	40013800 	.word	0x40013800
 80094f4:	40020000 	.word	0x40020000
 80094f8:	40020400 	.word	0x40020400
 80094fc:	40020800 	.word	0x40020800
 8009500:	40020c00 	.word	0x40020c00
 8009504:	40021000 	.word	0x40021000
 8009508:	40021400 	.word	0x40021400
 800950c:	40021800 	.word	0x40021800
 8009510:	40021c00 	.word	0x40021c00
 8009514:	40022000 	.word	0x40022000
 8009518:	40022400 	.word	0x40022400
 800951c:	40013c00 	.word	0x40013c00

08009520 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009520:	b480      	push	{r7}
 8009522:	b083      	sub	sp, #12
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	460b      	mov	r3, r1
 800952a:	807b      	strh	r3, [r7, #2]
 800952c:	4613      	mov	r3, r2
 800952e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009530:	787b      	ldrb	r3, [r7, #1]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d003      	beq.n	800953e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009536:	887a      	ldrh	r2, [r7, #2]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800953c:	e003      	b.n	8009546 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800953e:	887b      	ldrh	r3, [r7, #2]
 8009540:	041a      	lsls	r2, r3, #16
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	619a      	str	r2, [r3, #24]
}
 8009546:	bf00      	nop
 8009548:	370c      	adds	r7, #12
 800954a:	46bd      	mov	sp, r7
 800954c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009550:	4770      	bx	lr

08009552 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009552:	b480      	push	{r7}
 8009554:	b085      	sub	sp, #20
 8009556:	af00      	add	r7, sp, #0
 8009558:	6078      	str	r0, [r7, #4]
 800955a:	460b      	mov	r3, r1
 800955c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	695b      	ldr	r3, [r3, #20]
 8009562:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009564:	887a      	ldrh	r2, [r7, #2]
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	4013      	ands	r3, r2
 800956a:	041a      	lsls	r2, r3, #16
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	43d9      	mvns	r1, r3
 8009570:	887b      	ldrh	r3, [r7, #2]
 8009572:	400b      	ands	r3, r1
 8009574:	431a      	orrs	r2, r3
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	619a      	str	r2, [r3, #24]
}
 800957a:	bf00      	nop
 800957c:	3714      	adds	r7, #20
 800957e:	46bd      	mov	sp, r7
 8009580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009584:	4770      	bx	lr
	...

08009588 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b082      	sub	sp, #8
 800958c:	af00      	add	r7, sp, #0
 800958e:	4603      	mov	r3, r0
 8009590:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8009592:	4b08      	ldr	r3, [pc, #32]	; (80095b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009594:	695a      	ldr	r2, [r3, #20]
 8009596:	88fb      	ldrh	r3, [r7, #6]
 8009598:	4013      	ands	r3, r2
 800959a:	2b00      	cmp	r3, #0
 800959c:	d006      	beq.n	80095ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800959e:	4a05      	ldr	r2, [pc, #20]	; (80095b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80095a0:	88fb      	ldrh	r3, [r7, #6]
 80095a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80095a4:	88fb      	ldrh	r3, [r7, #6]
 80095a6:	4618      	mov	r0, r3
 80095a8:	f000 f806 	bl	80095b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80095ac:	bf00      	nop
 80095ae:	3708      	adds	r7, #8
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}
 80095b4:	40013c00 	.word	0x40013c00

080095b8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b083      	sub	sp, #12
 80095bc:	af00      	add	r7, sp, #0
 80095be:	4603      	mov	r3, r0
 80095c0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80095c2:	bf00      	nop
 80095c4:	370c      	adds	r7, #12
 80095c6:	46bd      	mov	sp, r7
 80095c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095cc:	4770      	bx	lr
	...

080095d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b086      	sub	sp, #24
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d101      	bne.n	80095e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80095de:	2301      	movs	r3, #1
 80095e0:	e264      	b.n	8009aac <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f003 0301 	and.w	r3, r3, #1
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d075      	beq.n	80096da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80095ee:	4ba3      	ldr	r3, [pc, #652]	; (800987c <HAL_RCC_OscConfig+0x2ac>)
 80095f0:	689b      	ldr	r3, [r3, #8]
 80095f2:	f003 030c 	and.w	r3, r3, #12
 80095f6:	2b04      	cmp	r3, #4
 80095f8:	d00c      	beq.n	8009614 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80095fa:	4ba0      	ldr	r3, [pc, #640]	; (800987c <HAL_RCC_OscConfig+0x2ac>)
 80095fc:	689b      	ldr	r3, [r3, #8]
 80095fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009602:	2b08      	cmp	r3, #8
 8009604:	d112      	bne.n	800962c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009606:	4b9d      	ldr	r3, [pc, #628]	; (800987c <HAL_RCC_OscConfig+0x2ac>)
 8009608:	685b      	ldr	r3, [r3, #4]
 800960a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800960e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009612:	d10b      	bne.n	800962c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009614:	4b99      	ldr	r3, [pc, #612]	; (800987c <HAL_RCC_OscConfig+0x2ac>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800961c:	2b00      	cmp	r3, #0
 800961e:	d05b      	beq.n	80096d8 <HAL_RCC_OscConfig+0x108>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d157      	bne.n	80096d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009628:	2301      	movs	r3, #1
 800962a:	e23f      	b.n	8009aac <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009634:	d106      	bne.n	8009644 <HAL_RCC_OscConfig+0x74>
 8009636:	4b91      	ldr	r3, [pc, #580]	; (800987c <HAL_RCC_OscConfig+0x2ac>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	4a90      	ldr	r2, [pc, #576]	; (800987c <HAL_RCC_OscConfig+0x2ac>)
 800963c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009640:	6013      	str	r3, [r2, #0]
 8009642:	e01d      	b.n	8009680 <HAL_RCC_OscConfig+0xb0>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	685b      	ldr	r3, [r3, #4]
 8009648:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800964c:	d10c      	bne.n	8009668 <HAL_RCC_OscConfig+0x98>
 800964e:	4b8b      	ldr	r3, [pc, #556]	; (800987c <HAL_RCC_OscConfig+0x2ac>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	4a8a      	ldr	r2, [pc, #552]	; (800987c <HAL_RCC_OscConfig+0x2ac>)
 8009654:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009658:	6013      	str	r3, [r2, #0]
 800965a:	4b88      	ldr	r3, [pc, #544]	; (800987c <HAL_RCC_OscConfig+0x2ac>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	4a87      	ldr	r2, [pc, #540]	; (800987c <HAL_RCC_OscConfig+0x2ac>)
 8009660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009664:	6013      	str	r3, [r2, #0]
 8009666:	e00b      	b.n	8009680 <HAL_RCC_OscConfig+0xb0>
 8009668:	4b84      	ldr	r3, [pc, #528]	; (800987c <HAL_RCC_OscConfig+0x2ac>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4a83      	ldr	r2, [pc, #524]	; (800987c <HAL_RCC_OscConfig+0x2ac>)
 800966e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009672:	6013      	str	r3, [r2, #0]
 8009674:	4b81      	ldr	r3, [pc, #516]	; (800987c <HAL_RCC_OscConfig+0x2ac>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4a80      	ldr	r2, [pc, #512]	; (800987c <HAL_RCC_OscConfig+0x2ac>)
 800967a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800967e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	685b      	ldr	r3, [r3, #4]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d013      	beq.n	80096b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009688:	f7ff fc5c 	bl	8008f44 <HAL_GetTick>
 800968c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800968e:	e008      	b.n	80096a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009690:	f7ff fc58 	bl	8008f44 <HAL_GetTick>
 8009694:	4602      	mov	r2, r0
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	1ad3      	subs	r3, r2, r3
 800969a:	2b64      	cmp	r3, #100	; 0x64
 800969c:	d901      	bls.n	80096a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800969e:	2303      	movs	r3, #3
 80096a0:	e204      	b.n	8009aac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80096a2:	4b76      	ldr	r3, [pc, #472]	; (800987c <HAL_RCC_OscConfig+0x2ac>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d0f0      	beq.n	8009690 <HAL_RCC_OscConfig+0xc0>
 80096ae:	e014      	b.n	80096da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80096b0:	f7ff fc48 	bl	8008f44 <HAL_GetTick>
 80096b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80096b6:	e008      	b.n	80096ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80096b8:	f7ff fc44 	bl	8008f44 <HAL_GetTick>
 80096bc:	4602      	mov	r2, r0
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	1ad3      	subs	r3, r2, r3
 80096c2:	2b64      	cmp	r3, #100	; 0x64
 80096c4:	d901      	bls.n	80096ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80096c6:	2303      	movs	r3, #3
 80096c8:	e1f0      	b.n	8009aac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80096ca:	4b6c      	ldr	r3, [pc, #432]	; (800987c <HAL_RCC_OscConfig+0x2ac>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d1f0      	bne.n	80096b8 <HAL_RCC_OscConfig+0xe8>
 80096d6:	e000      	b.n	80096da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80096d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f003 0302 	and.w	r3, r3, #2
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d063      	beq.n	80097ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80096e6:	4b65      	ldr	r3, [pc, #404]	; (800987c <HAL_RCC_OscConfig+0x2ac>)
 80096e8:	689b      	ldr	r3, [r3, #8]
 80096ea:	f003 030c 	and.w	r3, r3, #12
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d00b      	beq.n	800970a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80096f2:	4b62      	ldr	r3, [pc, #392]	; (800987c <HAL_RCC_OscConfig+0x2ac>)
 80096f4:	689b      	ldr	r3, [r3, #8]
 80096f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80096fa:	2b08      	cmp	r3, #8
 80096fc:	d11c      	bne.n	8009738 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80096fe:	4b5f      	ldr	r3, [pc, #380]	; (800987c <HAL_RCC_OscConfig+0x2ac>)
 8009700:	685b      	ldr	r3, [r3, #4]
 8009702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009706:	2b00      	cmp	r3, #0
 8009708:	d116      	bne.n	8009738 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800970a:	4b5c      	ldr	r3, [pc, #368]	; (800987c <HAL_RCC_OscConfig+0x2ac>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f003 0302 	and.w	r3, r3, #2
 8009712:	2b00      	cmp	r3, #0
 8009714:	d005      	beq.n	8009722 <HAL_RCC_OscConfig+0x152>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	68db      	ldr	r3, [r3, #12]
 800971a:	2b01      	cmp	r3, #1
 800971c:	d001      	beq.n	8009722 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800971e:	2301      	movs	r3, #1
 8009720:	e1c4      	b.n	8009aac <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009722:	4b56      	ldr	r3, [pc, #344]	; (800987c <HAL_RCC_OscConfig+0x2ac>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	691b      	ldr	r3, [r3, #16]
 800972e:	00db      	lsls	r3, r3, #3
 8009730:	4952      	ldr	r1, [pc, #328]	; (800987c <HAL_RCC_OscConfig+0x2ac>)
 8009732:	4313      	orrs	r3, r2
 8009734:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009736:	e03a      	b.n	80097ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	68db      	ldr	r3, [r3, #12]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d020      	beq.n	8009782 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009740:	4b4f      	ldr	r3, [pc, #316]	; (8009880 <HAL_RCC_OscConfig+0x2b0>)
 8009742:	2201      	movs	r2, #1
 8009744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009746:	f7ff fbfd 	bl	8008f44 <HAL_GetTick>
 800974a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800974c:	e008      	b.n	8009760 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800974e:	f7ff fbf9 	bl	8008f44 <HAL_GetTick>
 8009752:	4602      	mov	r2, r0
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	1ad3      	subs	r3, r2, r3
 8009758:	2b02      	cmp	r3, #2
 800975a:	d901      	bls.n	8009760 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800975c:	2303      	movs	r3, #3
 800975e:	e1a5      	b.n	8009aac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009760:	4b46      	ldr	r3, [pc, #280]	; (800987c <HAL_RCC_OscConfig+0x2ac>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f003 0302 	and.w	r3, r3, #2
 8009768:	2b00      	cmp	r3, #0
 800976a:	d0f0      	beq.n	800974e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800976c:	4b43      	ldr	r3, [pc, #268]	; (800987c <HAL_RCC_OscConfig+0x2ac>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	691b      	ldr	r3, [r3, #16]
 8009778:	00db      	lsls	r3, r3, #3
 800977a:	4940      	ldr	r1, [pc, #256]	; (800987c <HAL_RCC_OscConfig+0x2ac>)
 800977c:	4313      	orrs	r3, r2
 800977e:	600b      	str	r3, [r1, #0]
 8009780:	e015      	b.n	80097ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009782:	4b3f      	ldr	r3, [pc, #252]	; (8009880 <HAL_RCC_OscConfig+0x2b0>)
 8009784:	2200      	movs	r2, #0
 8009786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009788:	f7ff fbdc 	bl	8008f44 <HAL_GetTick>
 800978c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800978e:	e008      	b.n	80097a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009790:	f7ff fbd8 	bl	8008f44 <HAL_GetTick>
 8009794:	4602      	mov	r2, r0
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	1ad3      	subs	r3, r2, r3
 800979a:	2b02      	cmp	r3, #2
 800979c:	d901      	bls.n	80097a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800979e:	2303      	movs	r3, #3
 80097a0:	e184      	b.n	8009aac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80097a2:	4b36      	ldr	r3, [pc, #216]	; (800987c <HAL_RCC_OscConfig+0x2ac>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f003 0302 	and.w	r3, r3, #2
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d1f0      	bne.n	8009790 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f003 0308 	and.w	r3, r3, #8
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d030      	beq.n	800981c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	695b      	ldr	r3, [r3, #20]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d016      	beq.n	80097f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80097c2:	4b30      	ldr	r3, [pc, #192]	; (8009884 <HAL_RCC_OscConfig+0x2b4>)
 80097c4:	2201      	movs	r2, #1
 80097c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097c8:	f7ff fbbc 	bl	8008f44 <HAL_GetTick>
 80097cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80097ce:	e008      	b.n	80097e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80097d0:	f7ff fbb8 	bl	8008f44 <HAL_GetTick>
 80097d4:	4602      	mov	r2, r0
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	1ad3      	subs	r3, r2, r3
 80097da:	2b02      	cmp	r3, #2
 80097dc:	d901      	bls.n	80097e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80097de:	2303      	movs	r3, #3
 80097e0:	e164      	b.n	8009aac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80097e2:	4b26      	ldr	r3, [pc, #152]	; (800987c <HAL_RCC_OscConfig+0x2ac>)
 80097e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097e6:	f003 0302 	and.w	r3, r3, #2
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d0f0      	beq.n	80097d0 <HAL_RCC_OscConfig+0x200>
 80097ee:	e015      	b.n	800981c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80097f0:	4b24      	ldr	r3, [pc, #144]	; (8009884 <HAL_RCC_OscConfig+0x2b4>)
 80097f2:	2200      	movs	r2, #0
 80097f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80097f6:	f7ff fba5 	bl	8008f44 <HAL_GetTick>
 80097fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80097fc:	e008      	b.n	8009810 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80097fe:	f7ff fba1 	bl	8008f44 <HAL_GetTick>
 8009802:	4602      	mov	r2, r0
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	1ad3      	subs	r3, r2, r3
 8009808:	2b02      	cmp	r3, #2
 800980a:	d901      	bls.n	8009810 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800980c:	2303      	movs	r3, #3
 800980e:	e14d      	b.n	8009aac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009810:	4b1a      	ldr	r3, [pc, #104]	; (800987c <HAL_RCC_OscConfig+0x2ac>)
 8009812:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009814:	f003 0302 	and.w	r3, r3, #2
 8009818:	2b00      	cmp	r3, #0
 800981a:	d1f0      	bne.n	80097fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f003 0304 	and.w	r3, r3, #4
 8009824:	2b00      	cmp	r3, #0
 8009826:	f000 80a0 	beq.w	800996a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800982a:	2300      	movs	r3, #0
 800982c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800982e:	4b13      	ldr	r3, [pc, #76]	; (800987c <HAL_RCC_OscConfig+0x2ac>)
 8009830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009836:	2b00      	cmp	r3, #0
 8009838:	d10f      	bne.n	800985a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800983a:	2300      	movs	r3, #0
 800983c:	60bb      	str	r3, [r7, #8]
 800983e:	4b0f      	ldr	r3, [pc, #60]	; (800987c <HAL_RCC_OscConfig+0x2ac>)
 8009840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009842:	4a0e      	ldr	r2, [pc, #56]	; (800987c <HAL_RCC_OscConfig+0x2ac>)
 8009844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009848:	6413      	str	r3, [r2, #64]	; 0x40
 800984a:	4b0c      	ldr	r3, [pc, #48]	; (800987c <HAL_RCC_OscConfig+0x2ac>)
 800984c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800984e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009852:	60bb      	str	r3, [r7, #8]
 8009854:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009856:	2301      	movs	r3, #1
 8009858:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800985a:	4b0b      	ldr	r3, [pc, #44]	; (8009888 <HAL_RCC_OscConfig+0x2b8>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009862:	2b00      	cmp	r3, #0
 8009864:	d121      	bne.n	80098aa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009866:	4b08      	ldr	r3, [pc, #32]	; (8009888 <HAL_RCC_OscConfig+0x2b8>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4a07      	ldr	r2, [pc, #28]	; (8009888 <HAL_RCC_OscConfig+0x2b8>)
 800986c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009870:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009872:	f7ff fb67 	bl	8008f44 <HAL_GetTick>
 8009876:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009878:	e011      	b.n	800989e <HAL_RCC_OscConfig+0x2ce>
 800987a:	bf00      	nop
 800987c:	40023800 	.word	0x40023800
 8009880:	42470000 	.word	0x42470000
 8009884:	42470e80 	.word	0x42470e80
 8009888:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800988c:	f7ff fb5a 	bl	8008f44 <HAL_GetTick>
 8009890:	4602      	mov	r2, r0
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	1ad3      	subs	r3, r2, r3
 8009896:	2b02      	cmp	r3, #2
 8009898:	d901      	bls.n	800989e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800989a:	2303      	movs	r3, #3
 800989c:	e106      	b.n	8009aac <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800989e:	4b85      	ldr	r3, [pc, #532]	; (8009ab4 <HAL_RCC_OscConfig+0x4e4>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d0f0      	beq.n	800988c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	689b      	ldr	r3, [r3, #8]
 80098ae:	2b01      	cmp	r3, #1
 80098b0:	d106      	bne.n	80098c0 <HAL_RCC_OscConfig+0x2f0>
 80098b2:	4b81      	ldr	r3, [pc, #516]	; (8009ab8 <HAL_RCC_OscConfig+0x4e8>)
 80098b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098b6:	4a80      	ldr	r2, [pc, #512]	; (8009ab8 <HAL_RCC_OscConfig+0x4e8>)
 80098b8:	f043 0301 	orr.w	r3, r3, #1
 80098bc:	6713      	str	r3, [r2, #112]	; 0x70
 80098be:	e01c      	b.n	80098fa <HAL_RCC_OscConfig+0x32a>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	689b      	ldr	r3, [r3, #8]
 80098c4:	2b05      	cmp	r3, #5
 80098c6:	d10c      	bne.n	80098e2 <HAL_RCC_OscConfig+0x312>
 80098c8:	4b7b      	ldr	r3, [pc, #492]	; (8009ab8 <HAL_RCC_OscConfig+0x4e8>)
 80098ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098cc:	4a7a      	ldr	r2, [pc, #488]	; (8009ab8 <HAL_RCC_OscConfig+0x4e8>)
 80098ce:	f043 0304 	orr.w	r3, r3, #4
 80098d2:	6713      	str	r3, [r2, #112]	; 0x70
 80098d4:	4b78      	ldr	r3, [pc, #480]	; (8009ab8 <HAL_RCC_OscConfig+0x4e8>)
 80098d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098d8:	4a77      	ldr	r2, [pc, #476]	; (8009ab8 <HAL_RCC_OscConfig+0x4e8>)
 80098da:	f043 0301 	orr.w	r3, r3, #1
 80098de:	6713      	str	r3, [r2, #112]	; 0x70
 80098e0:	e00b      	b.n	80098fa <HAL_RCC_OscConfig+0x32a>
 80098e2:	4b75      	ldr	r3, [pc, #468]	; (8009ab8 <HAL_RCC_OscConfig+0x4e8>)
 80098e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098e6:	4a74      	ldr	r2, [pc, #464]	; (8009ab8 <HAL_RCC_OscConfig+0x4e8>)
 80098e8:	f023 0301 	bic.w	r3, r3, #1
 80098ec:	6713      	str	r3, [r2, #112]	; 0x70
 80098ee:	4b72      	ldr	r3, [pc, #456]	; (8009ab8 <HAL_RCC_OscConfig+0x4e8>)
 80098f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098f2:	4a71      	ldr	r2, [pc, #452]	; (8009ab8 <HAL_RCC_OscConfig+0x4e8>)
 80098f4:	f023 0304 	bic.w	r3, r3, #4
 80098f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	689b      	ldr	r3, [r3, #8]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d015      	beq.n	800992e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009902:	f7ff fb1f 	bl	8008f44 <HAL_GetTick>
 8009906:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009908:	e00a      	b.n	8009920 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800990a:	f7ff fb1b 	bl	8008f44 <HAL_GetTick>
 800990e:	4602      	mov	r2, r0
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	1ad3      	subs	r3, r2, r3
 8009914:	f241 3288 	movw	r2, #5000	; 0x1388
 8009918:	4293      	cmp	r3, r2
 800991a:	d901      	bls.n	8009920 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800991c:	2303      	movs	r3, #3
 800991e:	e0c5      	b.n	8009aac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009920:	4b65      	ldr	r3, [pc, #404]	; (8009ab8 <HAL_RCC_OscConfig+0x4e8>)
 8009922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009924:	f003 0302 	and.w	r3, r3, #2
 8009928:	2b00      	cmp	r3, #0
 800992a:	d0ee      	beq.n	800990a <HAL_RCC_OscConfig+0x33a>
 800992c:	e014      	b.n	8009958 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800992e:	f7ff fb09 	bl	8008f44 <HAL_GetTick>
 8009932:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009934:	e00a      	b.n	800994c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009936:	f7ff fb05 	bl	8008f44 <HAL_GetTick>
 800993a:	4602      	mov	r2, r0
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	1ad3      	subs	r3, r2, r3
 8009940:	f241 3288 	movw	r2, #5000	; 0x1388
 8009944:	4293      	cmp	r3, r2
 8009946:	d901      	bls.n	800994c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8009948:	2303      	movs	r3, #3
 800994a:	e0af      	b.n	8009aac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800994c:	4b5a      	ldr	r3, [pc, #360]	; (8009ab8 <HAL_RCC_OscConfig+0x4e8>)
 800994e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009950:	f003 0302 	and.w	r3, r3, #2
 8009954:	2b00      	cmp	r3, #0
 8009956:	d1ee      	bne.n	8009936 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009958:	7dfb      	ldrb	r3, [r7, #23]
 800995a:	2b01      	cmp	r3, #1
 800995c:	d105      	bne.n	800996a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800995e:	4b56      	ldr	r3, [pc, #344]	; (8009ab8 <HAL_RCC_OscConfig+0x4e8>)
 8009960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009962:	4a55      	ldr	r2, [pc, #340]	; (8009ab8 <HAL_RCC_OscConfig+0x4e8>)
 8009964:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009968:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	699b      	ldr	r3, [r3, #24]
 800996e:	2b00      	cmp	r3, #0
 8009970:	f000 809b 	beq.w	8009aaa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009974:	4b50      	ldr	r3, [pc, #320]	; (8009ab8 <HAL_RCC_OscConfig+0x4e8>)
 8009976:	689b      	ldr	r3, [r3, #8]
 8009978:	f003 030c 	and.w	r3, r3, #12
 800997c:	2b08      	cmp	r3, #8
 800997e:	d05c      	beq.n	8009a3a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	699b      	ldr	r3, [r3, #24]
 8009984:	2b02      	cmp	r3, #2
 8009986:	d141      	bne.n	8009a0c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009988:	4b4c      	ldr	r3, [pc, #304]	; (8009abc <HAL_RCC_OscConfig+0x4ec>)
 800998a:	2200      	movs	r2, #0
 800998c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800998e:	f7ff fad9 	bl	8008f44 <HAL_GetTick>
 8009992:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009994:	e008      	b.n	80099a8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009996:	f7ff fad5 	bl	8008f44 <HAL_GetTick>
 800999a:	4602      	mov	r2, r0
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	1ad3      	subs	r3, r2, r3
 80099a0:	2b02      	cmp	r3, #2
 80099a2:	d901      	bls.n	80099a8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80099a4:	2303      	movs	r3, #3
 80099a6:	e081      	b.n	8009aac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80099a8:	4b43      	ldr	r3, [pc, #268]	; (8009ab8 <HAL_RCC_OscConfig+0x4e8>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d1f0      	bne.n	8009996 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	69da      	ldr	r2, [r3, #28]
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6a1b      	ldr	r3, [r3, #32]
 80099bc:	431a      	orrs	r2, r3
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099c2:	019b      	lsls	r3, r3, #6
 80099c4:	431a      	orrs	r2, r3
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099ca:	085b      	lsrs	r3, r3, #1
 80099cc:	3b01      	subs	r3, #1
 80099ce:	041b      	lsls	r3, r3, #16
 80099d0:	431a      	orrs	r2, r3
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099d6:	061b      	lsls	r3, r3, #24
 80099d8:	4937      	ldr	r1, [pc, #220]	; (8009ab8 <HAL_RCC_OscConfig+0x4e8>)
 80099da:	4313      	orrs	r3, r2
 80099dc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80099de:	4b37      	ldr	r3, [pc, #220]	; (8009abc <HAL_RCC_OscConfig+0x4ec>)
 80099e0:	2201      	movs	r2, #1
 80099e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80099e4:	f7ff faae 	bl	8008f44 <HAL_GetTick>
 80099e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80099ea:	e008      	b.n	80099fe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80099ec:	f7ff faaa 	bl	8008f44 <HAL_GetTick>
 80099f0:	4602      	mov	r2, r0
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	1ad3      	subs	r3, r2, r3
 80099f6:	2b02      	cmp	r3, #2
 80099f8:	d901      	bls.n	80099fe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80099fa:	2303      	movs	r3, #3
 80099fc:	e056      	b.n	8009aac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80099fe:	4b2e      	ldr	r3, [pc, #184]	; (8009ab8 <HAL_RCC_OscConfig+0x4e8>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d0f0      	beq.n	80099ec <HAL_RCC_OscConfig+0x41c>
 8009a0a:	e04e      	b.n	8009aaa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009a0c:	4b2b      	ldr	r3, [pc, #172]	; (8009abc <HAL_RCC_OscConfig+0x4ec>)
 8009a0e:	2200      	movs	r2, #0
 8009a10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a12:	f7ff fa97 	bl	8008f44 <HAL_GetTick>
 8009a16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009a18:	e008      	b.n	8009a2c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009a1a:	f7ff fa93 	bl	8008f44 <HAL_GetTick>
 8009a1e:	4602      	mov	r2, r0
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	1ad3      	subs	r3, r2, r3
 8009a24:	2b02      	cmp	r3, #2
 8009a26:	d901      	bls.n	8009a2c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8009a28:	2303      	movs	r3, #3
 8009a2a:	e03f      	b.n	8009aac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009a2c:	4b22      	ldr	r3, [pc, #136]	; (8009ab8 <HAL_RCC_OscConfig+0x4e8>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d1f0      	bne.n	8009a1a <HAL_RCC_OscConfig+0x44a>
 8009a38:	e037      	b.n	8009aaa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	699b      	ldr	r3, [r3, #24]
 8009a3e:	2b01      	cmp	r3, #1
 8009a40:	d101      	bne.n	8009a46 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8009a42:	2301      	movs	r3, #1
 8009a44:	e032      	b.n	8009aac <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009a46:	4b1c      	ldr	r3, [pc, #112]	; (8009ab8 <HAL_RCC_OscConfig+0x4e8>)
 8009a48:	685b      	ldr	r3, [r3, #4]
 8009a4a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	699b      	ldr	r3, [r3, #24]
 8009a50:	2b01      	cmp	r3, #1
 8009a52:	d028      	beq.n	8009aa6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009a5e:	429a      	cmp	r2, r3
 8009a60:	d121      	bne.n	8009aa6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d11a      	bne.n	8009aa6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009a70:	68fa      	ldr	r2, [r7, #12]
 8009a72:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009a76:	4013      	ands	r3, r2
 8009a78:	687a      	ldr	r2, [r7, #4]
 8009a7a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009a7c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d111      	bne.n	8009aa6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a8c:	085b      	lsrs	r3, r3, #1
 8009a8e:	3b01      	subs	r3, #1
 8009a90:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009a92:	429a      	cmp	r2, r3
 8009a94:	d107      	bne.n	8009aa6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aa0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009aa2:	429a      	cmp	r2, r3
 8009aa4:	d001      	beq.n	8009aaa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	e000      	b.n	8009aac <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8009aaa:	2300      	movs	r3, #0
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3718      	adds	r7, #24
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}
 8009ab4:	40007000 	.word	0x40007000
 8009ab8:	40023800 	.word	0x40023800
 8009abc:	42470060 	.word	0x42470060

08009ac0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b084      	sub	sp, #16
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
 8009ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d101      	bne.n	8009ad4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	e0cc      	b.n	8009c6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009ad4:	4b68      	ldr	r3, [pc, #416]	; (8009c78 <HAL_RCC_ClockConfig+0x1b8>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f003 030f 	and.w	r3, r3, #15
 8009adc:	683a      	ldr	r2, [r7, #0]
 8009ade:	429a      	cmp	r2, r3
 8009ae0:	d90c      	bls.n	8009afc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009ae2:	4b65      	ldr	r3, [pc, #404]	; (8009c78 <HAL_RCC_ClockConfig+0x1b8>)
 8009ae4:	683a      	ldr	r2, [r7, #0]
 8009ae6:	b2d2      	uxtb	r2, r2
 8009ae8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009aea:	4b63      	ldr	r3, [pc, #396]	; (8009c78 <HAL_RCC_ClockConfig+0x1b8>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f003 030f 	and.w	r3, r3, #15
 8009af2:	683a      	ldr	r2, [r7, #0]
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d001      	beq.n	8009afc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009af8:	2301      	movs	r3, #1
 8009afa:	e0b8      	b.n	8009c6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f003 0302 	and.w	r3, r3, #2
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d020      	beq.n	8009b4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f003 0304 	and.w	r3, r3, #4
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d005      	beq.n	8009b20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009b14:	4b59      	ldr	r3, [pc, #356]	; (8009c7c <HAL_RCC_ClockConfig+0x1bc>)
 8009b16:	689b      	ldr	r3, [r3, #8]
 8009b18:	4a58      	ldr	r2, [pc, #352]	; (8009c7c <HAL_RCC_ClockConfig+0x1bc>)
 8009b1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009b1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f003 0308 	and.w	r3, r3, #8
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d005      	beq.n	8009b38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009b2c:	4b53      	ldr	r3, [pc, #332]	; (8009c7c <HAL_RCC_ClockConfig+0x1bc>)
 8009b2e:	689b      	ldr	r3, [r3, #8]
 8009b30:	4a52      	ldr	r2, [pc, #328]	; (8009c7c <HAL_RCC_ClockConfig+0x1bc>)
 8009b32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009b36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009b38:	4b50      	ldr	r3, [pc, #320]	; (8009c7c <HAL_RCC_ClockConfig+0x1bc>)
 8009b3a:	689b      	ldr	r3, [r3, #8]
 8009b3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	689b      	ldr	r3, [r3, #8]
 8009b44:	494d      	ldr	r1, [pc, #308]	; (8009c7c <HAL_RCC_ClockConfig+0x1bc>)
 8009b46:	4313      	orrs	r3, r2
 8009b48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f003 0301 	and.w	r3, r3, #1
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d044      	beq.n	8009be0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	685b      	ldr	r3, [r3, #4]
 8009b5a:	2b01      	cmp	r3, #1
 8009b5c:	d107      	bne.n	8009b6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009b5e:	4b47      	ldr	r3, [pc, #284]	; (8009c7c <HAL_RCC_ClockConfig+0x1bc>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d119      	bne.n	8009b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	e07f      	b.n	8009c6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	2b02      	cmp	r3, #2
 8009b74:	d003      	beq.n	8009b7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009b7a:	2b03      	cmp	r3, #3
 8009b7c:	d107      	bne.n	8009b8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009b7e:	4b3f      	ldr	r3, [pc, #252]	; (8009c7c <HAL_RCC_ClockConfig+0x1bc>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d109      	bne.n	8009b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	e06f      	b.n	8009c6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009b8e:	4b3b      	ldr	r3, [pc, #236]	; (8009c7c <HAL_RCC_ClockConfig+0x1bc>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f003 0302 	and.w	r3, r3, #2
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d101      	bne.n	8009b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	e067      	b.n	8009c6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009b9e:	4b37      	ldr	r3, [pc, #220]	; (8009c7c <HAL_RCC_ClockConfig+0x1bc>)
 8009ba0:	689b      	ldr	r3, [r3, #8]
 8009ba2:	f023 0203 	bic.w	r2, r3, #3
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	685b      	ldr	r3, [r3, #4]
 8009baa:	4934      	ldr	r1, [pc, #208]	; (8009c7c <HAL_RCC_ClockConfig+0x1bc>)
 8009bac:	4313      	orrs	r3, r2
 8009bae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009bb0:	f7ff f9c8 	bl	8008f44 <HAL_GetTick>
 8009bb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009bb6:	e00a      	b.n	8009bce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009bb8:	f7ff f9c4 	bl	8008f44 <HAL_GetTick>
 8009bbc:	4602      	mov	r2, r0
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	1ad3      	subs	r3, r2, r3
 8009bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d901      	bls.n	8009bce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009bca:	2303      	movs	r3, #3
 8009bcc:	e04f      	b.n	8009c6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009bce:	4b2b      	ldr	r3, [pc, #172]	; (8009c7c <HAL_RCC_ClockConfig+0x1bc>)
 8009bd0:	689b      	ldr	r3, [r3, #8]
 8009bd2:	f003 020c 	and.w	r2, r3, #12
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	009b      	lsls	r3, r3, #2
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d1eb      	bne.n	8009bb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009be0:	4b25      	ldr	r3, [pc, #148]	; (8009c78 <HAL_RCC_ClockConfig+0x1b8>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f003 030f 	and.w	r3, r3, #15
 8009be8:	683a      	ldr	r2, [r7, #0]
 8009bea:	429a      	cmp	r2, r3
 8009bec:	d20c      	bcs.n	8009c08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009bee:	4b22      	ldr	r3, [pc, #136]	; (8009c78 <HAL_RCC_ClockConfig+0x1b8>)
 8009bf0:	683a      	ldr	r2, [r7, #0]
 8009bf2:	b2d2      	uxtb	r2, r2
 8009bf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009bf6:	4b20      	ldr	r3, [pc, #128]	; (8009c78 <HAL_RCC_ClockConfig+0x1b8>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f003 030f 	and.w	r3, r3, #15
 8009bfe:	683a      	ldr	r2, [r7, #0]
 8009c00:	429a      	cmp	r2, r3
 8009c02:	d001      	beq.n	8009c08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009c04:	2301      	movs	r3, #1
 8009c06:	e032      	b.n	8009c6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f003 0304 	and.w	r3, r3, #4
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d008      	beq.n	8009c26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009c14:	4b19      	ldr	r3, [pc, #100]	; (8009c7c <HAL_RCC_ClockConfig+0x1bc>)
 8009c16:	689b      	ldr	r3, [r3, #8]
 8009c18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	68db      	ldr	r3, [r3, #12]
 8009c20:	4916      	ldr	r1, [pc, #88]	; (8009c7c <HAL_RCC_ClockConfig+0x1bc>)
 8009c22:	4313      	orrs	r3, r2
 8009c24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f003 0308 	and.w	r3, r3, #8
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d009      	beq.n	8009c46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009c32:	4b12      	ldr	r3, [pc, #72]	; (8009c7c <HAL_RCC_ClockConfig+0x1bc>)
 8009c34:	689b      	ldr	r3, [r3, #8]
 8009c36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	691b      	ldr	r3, [r3, #16]
 8009c3e:	00db      	lsls	r3, r3, #3
 8009c40:	490e      	ldr	r1, [pc, #56]	; (8009c7c <HAL_RCC_ClockConfig+0x1bc>)
 8009c42:	4313      	orrs	r3, r2
 8009c44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009c46:	f000 f821 	bl	8009c8c <HAL_RCC_GetSysClockFreq>
 8009c4a:	4602      	mov	r2, r0
 8009c4c:	4b0b      	ldr	r3, [pc, #44]	; (8009c7c <HAL_RCC_ClockConfig+0x1bc>)
 8009c4e:	689b      	ldr	r3, [r3, #8]
 8009c50:	091b      	lsrs	r3, r3, #4
 8009c52:	f003 030f 	and.w	r3, r3, #15
 8009c56:	490a      	ldr	r1, [pc, #40]	; (8009c80 <HAL_RCC_ClockConfig+0x1c0>)
 8009c58:	5ccb      	ldrb	r3, [r1, r3]
 8009c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8009c5e:	4a09      	ldr	r2, [pc, #36]	; (8009c84 <HAL_RCC_ClockConfig+0x1c4>)
 8009c60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009c62:	4b09      	ldr	r3, [pc, #36]	; (8009c88 <HAL_RCC_ClockConfig+0x1c8>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4618      	mov	r0, r3
 8009c68:	f7ff f928 	bl	8008ebc <HAL_InitTick>

  return HAL_OK;
 8009c6c:	2300      	movs	r3, #0
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3710      	adds	r7, #16
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}
 8009c76:	bf00      	nop
 8009c78:	40023c00 	.word	0x40023c00
 8009c7c:	40023800 	.word	0x40023800
 8009c80:	0800ae24 	.word	0x0800ae24
 8009c84:	20000000 	.word	0x20000000
 8009c88:	20000004 	.word	0x20000004

08009c8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009c8c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009c90:	b084      	sub	sp, #16
 8009c92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009c94:	2300      	movs	r3, #0
 8009c96:	607b      	str	r3, [r7, #4]
 8009c98:	2300      	movs	r3, #0
 8009c9a:	60fb      	str	r3, [r7, #12]
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009ca4:	4b67      	ldr	r3, [pc, #412]	; (8009e44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009ca6:	689b      	ldr	r3, [r3, #8]
 8009ca8:	f003 030c 	and.w	r3, r3, #12
 8009cac:	2b08      	cmp	r3, #8
 8009cae:	d00d      	beq.n	8009ccc <HAL_RCC_GetSysClockFreq+0x40>
 8009cb0:	2b08      	cmp	r3, #8
 8009cb2:	f200 80bd 	bhi.w	8009e30 <HAL_RCC_GetSysClockFreq+0x1a4>
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d002      	beq.n	8009cc0 <HAL_RCC_GetSysClockFreq+0x34>
 8009cba:	2b04      	cmp	r3, #4
 8009cbc:	d003      	beq.n	8009cc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8009cbe:	e0b7      	b.n	8009e30 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009cc0:	4b61      	ldr	r3, [pc, #388]	; (8009e48 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8009cc2:	60bb      	str	r3, [r7, #8]
       break;
 8009cc4:	e0b7      	b.n	8009e36 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009cc6:	4b61      	ldr	r3, [pc, #388]	; (8009e4c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8009cc8:	60bb      	str	r3, [r7, #8]
      break;
 8009cca:	e0b4      	b.n	8009e36 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009ccc:	4b5d      	ldr	r3, [pc, #372]	; (8009e44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009cce:	685b      	ldr	r3, [r3, #4]
 8009cd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009cd4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009cd6:	4b5b      	ldr	r3, [pc, #364]	; (8009e44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009cd8:	685b      	ldr	r3, [r3, #4]
 8009cda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d04d      	beq.n	8009d7e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009ce2:	4b58      	ldr	r3, [pc, #352]	; (8009e44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009ce4:	685b      	ldr	r3, [r3, #4]
 8009ce6:	099b      	lsrs	r3, r3, #6
 8009ce8:	461a      	mov	r2, r3
 8009cea:	f04f 0300 	mov.w	r3, #0
 8009cee:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009cf2:	f04f 0100 	mov.w	r1, #0
 8009cf6:	ea02 0800 	and.w	r8, r2, r0
 8009cfa:	ea03 0901 	and.w	r9, r3, r1
 8009cfe:	4640      	mov	r0, r8
 8009d00:	4649      	mov	r1, r9
 8009d02:	f04f 0200 	mov.w	r2, #0
 8009d06:	f04f 0300 	mov.w	r3, #0
 8009d0a:	014b      	lsls	r3, r1, #5
 8009d0c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009d10:	0142      	lsls	r2, r0, #5
 8009d12:	4610      	mov	r0, r2
 8009d14:	4619      	mov	r1, r3
 8009d16:	ebb0 0008 	subs.w	r0, r0, r8
 8009d1a:	eb61 0109 	sbc.w	r1, r1, r9
 8009d1e:	f04f 0200 	mov.w	r2, #0
 8009d22:	f04f 0300 	mov.w	r3, #0
 8009d26:	018b      	lsls	r3, r1, #6
 8009d28:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009d2c:	0182      	lsls	r2, r0, #6
 8009d2e:	1a12      	subs	r2, r2, r0
 8009d30:	eb63 0301 	sbc.w	r3, r3, r1
 8009d34:	f04f 0000 	mov.w	r0, #0
 8009d38:	f04f 0100 	mov.w	r1, #0
 8009d3c:	00d9      	lsls	r1, r3, #3
 8009d3e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009d42:	00d0      	lsls	r0, r2, #3
 8009d44:	4602      	mov	r2, r0
 8009d46:	460b      	mov	r3, r1
 8009d48:	eb12 0208 	adds.w	r2, r2, r8
 8009d4c:	eb43 0309 	adc.w	r3, r3, r9
 8009d50:	f04f 0000 	mov.w	r0, #0
 8009d54:	f04f 0100 	mov.w	r1, #0
 8009d58:	0259      	lsls	r1, r3, #9
 8009d5a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8009d5e:	0250      	lsls	r0, r2, #9
 8009d60:	4602      	mov	r2, r0
 8009d62:	460b      	mov	r3, r1
 8009d64:	4610      	mov	r0, r2
 8009d66:	4619      	mov	r1, r3
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	461a      	mov	r2, r3
 8009d6c:	f04f 0300 	mov.w	r3, #0
 8009d70:	f7fe fa96 	bl	80082a0 <__aeabi_uldivmod>
 8009d74:	4602      	mov	r2, r0
 8009d76:	460b      	mov	r3, r1
 8009d78:	4613      	mov	r3, r2
 8009d7a:	60fb      	str	r3, [r7, #12]
 8009d7c:	e04a      	b.n	8009e14 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009d7e:	4b31      	ldr	r3, [pc, #196]	; (8009e44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009d80:	685b      	ldr	r3, [r3, #4]
 8009d82:	099b      	lsrs	r3, r3, #6
 8009d84:	461a      	mov	r2, r3
 8009d86:	f04f 0300 	mov.w	r3, #0
 8009d8a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009d8e:	f04f 0100 	mov.w	r1, #0
 8009d92:	ea02 0400 	and.w	r4, r2, r0
 8009d96:	ea03 0501 	and.w	r5, r3, r1
 8009d9a:	4620      	mov	r0, r4
 8009d9c:	4629      	mov	r1, r5
 8009d9e:	f04f 0200 	mov.w	r2, #0
 8009da2:	f04f 0300 	mov.w	r3, #0
 8009da6:	014b      	lsls	r3, r1, #5
 8009da8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009dac:	0142      	lsls	r2, r0, #5
 8009dae:	4610      	mov	r0, r2
 8009db0:	4619      	mov	r1, r3
 8009db2:	1b00      	subs	r0, r0, r4
 8009db4:	eb61 0105 	sbc.w	r1, r1, r5
 8009db8:	f04f 0200 	mov.w	r2, #0
 8009dbc:	f04f 0300 	mov.w	r3, #0
 8009dc0:	018b      	lsls	r3, r1, #6
 8009dc2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009dc6:	0182      	lsls	r2, r0, #6
 8009dc8:	1a12      	subs	r2, r2, r0
 8009dca:	eb63 0301 	sbc.w	r3, r3, r1
 8009dce:	f04f 0000 	mov.w	r0, #0
 8009dd2:	f04f 0100 	mov.w	r1, #0
 8009dd6:	00d9      	lsls	r1, r3, #3
 8009dd8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009ddc:	00d0      	lsls	r0, r2, #3
 8009dde:	4602      	mov	r2, r0
 8009de0:	460b      	mov	r3, r1
 8009de2:	1912      	adds	r2, r2, r4
 8009de4:	eb45 0303 	adc.w	r3, r5, r3
 8009de8:	f04f 0000 	mov.w	r0, #0
 8009dec:	f04f 0100 	mov.w	r1, #0
 8009df0:	0299      	lsls	r1, r3, #10
 8009df2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8009df6:	0290      	lsls	r0, r2, #10
 8009df8:	4602      	mov	r2, r0
 8009dfa:	460b      	mov	r3, r1
 8009dfc:	4610      	mov	r0, r2
 8009dfe:	4619      	mov	r1, r3
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	461a      	mov	r2, r3
 8009e04:	f04f 0300 	mov.w	r3, #0
 8009e08:	f7fe fa4a 	bl	80082a0 <__aeabi_uldivmod>
 8009e0c:	4602      	mov	r2, r0
 8009e0e:	460b      	mov	r3, r1
 8009e10:	4613      	mov	r3, r2
 8009e12:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009e14:	4b0b      	ldr	r3, [pc, #44]	; (8009e44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009e16:	685b      	ldr	r3, [r3, #4]
 8009e18:	0c1b      	lsrs	r3, r3, #16
 8009e1a:	f003 0303 	and.w	r3, r3, #3
 8009e1e:	3301      	adds	r3, #1
 8009e20:	005b      	lsls	r3, r3, #1
 8009e22:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8009e24:	68fa      	ldr	r2, [r7, #12]
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e2c:	60bb      	str	r3, [r7, #8]
      break;
 8009e2e:	e002      	b.n	8009e36 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009e30:	4b05      	ldr	r3, [pc, #20]	; (8009e48 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8009e32:	60bb      	str	r3, [r7, #8]
      break;
 8009e34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009e36:	68bb      	ldr	r3, [r7, #8]
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3710      	adds	r7, #16
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009e42:	bf00      	nop
 8009e44:	40023800 	.word	0x40023800
 8009e48:	00f42400 	.word	0x00f42400
 8009e4c:	007a1200 	.word	0x007a1200

08009e50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009e50:	b480      	push	{r7}
 8009e52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009e54:	4b03      	ldr	r3, [pc, #12]	; (8009e64 <HAL_RCC_GetHCLKFreq+0x14>)
 8009e56:	681b      	ldr	r3, [r3, #0]
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e60:	4770      	bx	lr
 8009e62:	bf00      	nop
 8009e64:	20000000 	.word	0x20000000

08009e68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009e6c:	f7ff fff0 	bl	8009e50 <HAL_RCC_GetHCLKFreq>
 8009e70:	4602      	mov	r2, r0
 8009e72:	4b05      	ldr	r3, [pc, #20]	; (8009e88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009e74:	689b      	ldr	r3, [r3, #8]
 8009e76:	0a9b      	lsrs	r3, r3, #10
 8009e78:	f003 0307 	and.w	r3, r3, #7
 8009e7c:	4903      	ldr	r1, [pc, #12]	; (8009e8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009e7e:	5ccb      	ldrb	r3, [r1, r3]
 8009e80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	bd80      	pop	{r7, pc}
 8009e88:	40023800 	.word	0x40023800
 8009e8c:	0800ae34 	.word	0x0800ae34

08009e90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009e94:	f7ff ffdc 	bl	8009e50 <HAL_RCC_GetHCLKFreq>
 8009e98:	4602      	mov	r2, r0
 8009e9a:	4b05      	ldr	r3, [pc, #20]	; (8009eb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009e9c:	689b      	ldr	r3, [r3, #8]
 8009e9e:	0b5b      	lsrs	r3, r3, #13
 8009ea0:	f003 0307 	and.w	r3, r3, #7
 8009ea4:	4903      	ldr	r1, [pc, #12]	; (8009eb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009ea6:	5ccb      	ldrb	r3, [r1, r3]
 8009ea8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	bd80      	pop	{r7, pc}
 8009eb0:	40023800 	.word	0x40023800
 8009eb4:	0800ae34 	.word	0x0800ae34

08009eb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b082      	sub	sp, #8
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d101      	bne.n	8009eca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	e03f      	b.n	8009f4a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ed0:	b2db      	uxtb	r3, r3
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d106      	bne.n	8009ee4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2200      	movs	r2, #0
 8009eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f7fe fece 	bl	8008c80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2224      	movs	r2, #36	; 0x24
 8009ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	68da      	ldr	r2, [r3, #12]
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009efa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f000 f929 	bl	800a154 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	691a      	ldr	r2, [r3, #16]
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009f10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	695a      	ldr	r2, [r3, #20]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009f20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	68da      	ldr	r2, [r3, #12]
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009f30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2200      	movs	r2, #0
 8009f36:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2220      	movs	r2, #32
 8009f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2220      	movs	r2, #32
 8009f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009f48:	2300      	movs	r3, #0
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	3708      	adds	r7, #8
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}

08009f52 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f52:	b580      	push	{r7, lr}
 8009f54:	b08a      	sub	sp, #40	; 0x28
 8009f56:	af02      	add	r7, sp, #8
 8009f58:	60f8      	str	r0, [r7, #12]
 8009f5a:	60b9      	str	r1, [r7, #8]
 8009f5c:	603b      	str	r3, [r7, #0]
 8009f5e:	4613      	mov	r3, r2
 8009f60:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009f62:	2300      	movs	r3, #0
 8009f64:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f6c:	b2db      	uxtb	r3, r3
 8009f6e:	2b20      	cmp	r3, #32
 8009f70:	d17c      	bne.n	800a06c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d002      	beq.n	8009f7e <HAL_UART_Transmit+0x2c>
 8009f78:	88fb      	ldrh	r3, [r7, #6]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d101      	bne.n	8009f82 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009f7e:	2301      	movs	r3, #1
 8009f80:	e075      	b.n	800a06e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f88:	2b01      	cmp	r3, #1
 8009f8a:	d101      	bne.n	8009f90 <HAL_UART_Transmit+0x3e>
 8009f8c:	2302      	movs	r3, #2
 8009f8e:	e06e      	b.n	800a06e <HAL_UART_Transmit+0x11c>
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	2201      	movs	r2, #1
 8009f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	2221      	movs	r2, #33	; 0x21
 8009fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009fa6:	f7fe ffcd 	bl	8008f44 <HAL_GetTick>
 8009faa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	88fa      	ldrh	r2, [r7, #6]
 8009fb0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	88fa      	ldrh	r2, [r7, #6]
 8009fb6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	689b      	ldr	r3, [r3, #8]
 8009fbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fc0:	d108      	bne.n	8009fd4 <HAL_UART_Transmit+0x82>
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	691b      	ldr	r3, [r3, #16]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d104      	bne.n	8009fd4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	61bb      	str	r3, [r7, #24]
 8009fd2:	e003      	b.n	8009fdc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009fe4:	e02a      	b.n	800a03c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	9300      	str	r3, [sp, #0]
 8009fea:	697b      	ldr	r3, [r7, #20]
 8009fec:	2200      	movs	r2, #0
 8009fee:	2180      	movs	r1, #128	; 0x80
 8009ff0:	68f8      	ldr	r0, [r7, #12]
 8009ff2:	f000 f840 	bl	800a076 <UART_WaitOnFlagUntilTimeout>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d001      	beq.n	800a000 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009ffc:	2303      	movs	r3, #3
 8009ffe:	e036      	b.n	800a06e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a000:	69fb      	ldr	r3, [r7, #28]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d10b      	bne.n	800a01e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a006:	69bb      	ldr	r3, [r7, #24]
 800a008:	881b      	ldrh	r3, [r3, #0]
 800a00a:	461a      	mov	r2, r3
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a014:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a016:	69bb      	ldr	r3, [r7, #24]
 800a018:	3302      	adds	r3, #2
 800a01a:	61bb      	str	r3, [r7, #24]
 800a01c:	e007      	b.n	800a02e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a01e:	69fb      	ldr	r3, [r7, #28]
 800a020:	781a      	ldrb	r2, [r3, #0]
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a028:	69fb      	ldr	r3, [r7, #28]
 800a02a:	3301      	adds	r3, #1
 800a02c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a032:	b29b      	uxth	r3, r3
 800a034:	3b01      	subs	r3, #1
 800a036:	b29a      	uxth	r2, r3
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a040:	b29b      	uxth	r3, r3
 800a042:	2b00      	cmp	r3, #0
 800a044:	d1cf      	bne.n	8009fe6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	9300      	str	r3, [sp, #0]
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	2200      	movs	r2, #0
 800a04e:	2140      	movs	r1, #64	; 0x40
 800a050:	68f8      	ldr	r0, [r7, #12]
 800a052:	f000 f810 	bl	800a076 <UART_WaitOnFlagUntilTimeout>
 800a056:	4603      	mov	r3, r0
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d001      	beq.n	800a060 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a05c:	2303      	movs	r3, #3
 800a05e:	e006      	b.n	800a06e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	2220      	movs	r2, #32
 800a064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a068:	2300      	movs	r3, #0
 800a06a:	e000      	b.n	800a06e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a06c:	2302      	movs	r3, #2
  }
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3720      	adds	r7, #32
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}

0800a076 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a076:	b580      	push	{r7, lr}
 800a078:	b090      	sub	sp, #64	; 0x40
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	60f8      	str	r0, [r7, #12]
 800a07e:	60b9      	str	r1, [r7, #8]
 800a080:	603b      	str	r3, [r7, #0]
 800a082:	4613      	mov	r3, r2
 800a084:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a086:	e050      	b.n	800a12a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a088:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a08a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a08e:	d04c      	beq.n	800a12a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a090:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a092:	2b00      	cmp	r3, #0
 800a094:	d007      	beq.n	800a0a6 <UART_WaitOnFlagUntilTimeout+0x30>
 800a096:	f7fe ff55 	bl	8008f44 <HAL_GetTick>
 800a09a:	4602      	mov	r2, r0
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	1ad3      	subs	r3, r2, r3
 800a0a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a0a2:	429a      	cmp	r2, r3
 800a0a4:	d241      	bcs.n	800a12a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	330c      	adds	r3, #12
 800a0ac:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b0:	e853 3f00 	ldrex	r3, [r3]
 800a0b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a0bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	330c      	adds	r3, #12
 800a0c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a0c6:	637a      	str	r2, [r7, #52]	; 0x34
 800a0c8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a0cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a0ce:	e841 2300 	strex	r3, r2, [r1]
 800a0d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a0d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d1e5      	bne.n	800a0a6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	3314      	adds	r3, #20
 800a0e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	e853 3f00 	ldrex	r3, [r3]
 800a0e8:	613b      	str	r3, [r7, #16]
   return(result);
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	f023 0301 	bic.w	r3, r3, #1
 800a0f0:	63bb      	str	r3, [r7, #56]	; 0x38
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	3314      	adds	r3, #20
 800a0f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a0fa:	623a      	str	r2, [r7, #32]
 800a0fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0fe:	69f9      	ldr	r1, [r7, #28]
 800a100:	6a3a      	ldr	r2, [r7, #32]
 800a102:	e841 2300 	strex	r3, r2, [r1]
 800a106:	61bb      	str	r3, [r7, #24]
   return(result);
 800a108:	69bb      	ldr	r3, [r7, #24]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d1e5      	bne.n	800a0da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	2220      	movs	r2, #32
 800a112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	2220      	movs	r2, #32
 800a11a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	2200      	movs	r2, #0
 800a122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a126:	2303      	movs	r3, #3
 800a128:	e00f      	b.n	800a14a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	681a      	ldr	r2, [r3, #0]
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	4013      	ands	r3, r2
 800a134:	68ba      	ldr	r2, [r7, #8]
 800a136:	429a      	cmp	r2, r3
 800a138:	bf0c      	ite	eq
 800a13a:	2301      	moveq	r3, #1
 800a13c:	2300      	movne	r3, #0
 800a13e:	b2db      	uxtb	r3, r3
 800a140:	461a      	mov	r2, r3
 800a142:	79fb      	ldrb	r3, [r7, #7]
 800a144:	429a      	cmp	r2, r3
 800a146:	d09f      	beq.n	800a088 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a148:	2300      	movs	r3, #0
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3740      	adds	r7, #64	; 0x40
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}
	...

0800a154 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a158:	b09f      	sub	sp, #124	; 0x7c
 800a15a:	af00      	add	r7, sp, #0
 800a15c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a15e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	691b      	ldr	r3, [r3, #16]
 800a164:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a168:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a16a:	68d9      	ldr	r1, [r3, #12]
 800a16c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a16e:	681a      	ldr	r2, [r3, #0]
 800a170:	ea40 0301 	orr.w	r3, r0, r1
 800a174:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a176:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a178:	689a      	ldr	r2, [r3, #8]
 800a17a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a17c:	691b      	ldr	r3, [r3, #16]
 800a17e:	431a      	orrs	r2, r3
 800a180:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a182:	695b      	ldr	r3, [r3, #20]
 800a184:	431a      	orrs	r2, r3
 800a186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a188:	69db      	ldr	r3, [r3, #28]
 800a18a:	4313      	orrs	r3, r2
 800a18c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800a18e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	68db      	ldr	r3, [r3, #12]
 800a194:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a198:	f021 010c 	bic.w	r1, r1, #12
 800a19c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a19e:	681a      	ldr	r2, [r3, #0]
 800a1a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a1a2:	430b      	orrs	r3, r1
 800a1a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a1a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	695b      	ldr	r3, [r3, #20]
 800a1ac:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a1b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1b2:	6999      	ldr	r1, [r3, #24]
 800a1b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1b6:	681a      	ldr	r2, [r3, #0]
 800a1b8:	ea40 0301 	orr.w	r3, r0, r1
 800a1bc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a1be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1c0:	681a      	ldr	r2, [r3, #0]
 800a1c2:	4bc5      	ldr	r3, [pc, #788]	; (800a4d8 <UART_SetConfig+0x384>)
 800a1c4:	429a      	cmp	r2, r3
 800a1c6:	d004      	beq.n	800a1d2 <UART_SetConfig+0x7e>
 800a1c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1ca:	681a      	ldr	r2, [r3, #0]
 800a1cc:	4bc3      	ldr	r3, [pc, #780]	; (800a4dc <UART_SetConfig+0x388>)
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	d103      	bne.n	800a1da <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a1d2:	f7ff fe5d 	bl	8009e90 <HAL_RCC_GetPCLK2Freq>
 800a1d6:	6778      	str	r0, [r7, #116]	; 0x74
 800a1d8:	e002      	b.n	800a1e0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a1da:	f7ff fe45 	bl	8009e68 <HAL_RCC_GetPCLK1Freq>
 800a1de:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a1e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1e2:	69db      	ldr	r3, [r3, #28]
 800a1e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1e8:	f040 80b6 	bne.w	800a358 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a1ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a1ee:	461c      	mov	r4, r3
 800a1f0:	f04f 0500 	mov.w	r5, #0
 800a1f4:	4622      	mov	r2, r4
 800a1f6:	462b      	mov	r3, r5
 800a1f8:	1891      	adds	r1, r2, r2
 800a1fa:	6439      	str	r1, [r7, #64]	; 0x40
 800a1fc:	415b      	adcs	r3, r3
 800a1fe:	647b      	str	r3, [r7, #68]	; 0x44
 800a200:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a204:	1912      	adds	r2, r2, r4
 800a206:	eb45 0303 	adc.w	r3, r5, r3
 800a20a:	f04f 0000 	mov.w	r0, #0
 800a20e:	f04f 0100 	mov.w	r1, #0
 800a212:	00d9      	lsls	r1, r3, #3
 800a214:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a218:	00d0      	lsls	r0, r2, #3
 800a21a:	4602      	mov	r2, r0
 800a21c:	460b      	mov	r3, r1
 800a21e:	1911      	adds	r1, r2, r4
 800a220:	6639      	str	r1, [r7, #96]	; 0x60
 800a222:	416b      	adcs	r3, r5
 800a224:	667b      	str	r3, [r7, #100]	; 0x64
 800a226:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a228:	685b      	ldr	r3, [r3, #4]
 800a22a:	461a      	mov	r2, r3
 800a22c:	f04f 0300 	mov.w	r3, #0
 800a230:	1891      	adds	r1, r2, r2
 800a232:	63b9      	str	r1, [r7, #56]	; 0x38
 800a234:	415b      	adcs	r3, r3
 800a236:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a238:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a23c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800a240:	f7fe f82e 	bl	80082a0 <__aeabi_uldivmod>
 800a244:	4602      	mov	r2, r0
 800a246:	460b      	mov	r3, r1
 800a248:	4ba5      	ldr	r3, [pc, #660]	; (800a4e0 <UART_SetConfig+0x38c>)
 800a24a:	fba3 2302 	umull	r2, r3, r3, r2
 800a24e:	095b      	lsrs	r3, r3, #5
 800a250:	011e      	lsls	r6, r3, #4
 800a252:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a254:	461c      	mov	r4, r3
 800a256:	f04f 0500 	mov.w	r5, #0
 800a25a:	4622      	mov	r2, r4
 800a25c:	462b      	mov	r3, r5
 800a25e:	1891      	adds	r1, r2, r2
 800a260:	6339      	str	r1, [r7, #48]	; 0x30
 800a262:	415b      	adcs	r3, r3
 800a264:	637b      	str	r3, [r7, #52]	; 0x34
 800a266:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a26a:	1912      	adds	r2, r2, r4
 800a26c:	eb45 0303 	adc.w	r3, r5, r3
 800a270:	f04f 0000 	mov.w	r0, #0
 800a274:	f04f 0100 	mov.w	r1, #0
 800a278:	00d9      	lsls	r1, r3, #3
 800a27a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a27e:	00d0      	lsls	r0, r2, #3
 800a280:	4602      	mov	r2, r0
 800a282:	460b      	mov	r3, r1
 800a284:	1911      	adds	r1, r2, r4
 800a286:	65b9      	str	r1, [r7, #88]	; 0x58
 800a288:	416b      	adcs	r3, r5
 800a28a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a28c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	461a      	mov	r2, r3
 800a292:	f04f 0300 	mov.w	r3, #0
 800a296:	1891      	adds	r1, r2, r2
 800a298:	62b9      	str	r1, [r7, #40]	; 0x28
 800a29a:	415b      	adcs	r3, r3
 800a29c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a29e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a2a2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a2a6:	f7fd fffb 	bl	80082a0 <__aeabi_uldivmod>
 800a2aa:	4602      	mov	r2, r0
 800a2ac:	460b      	mov	r3, r1
 800a2ae:	4b8c      	ldr	r3, [pc, #560]	; (800a4e0 <UART_SetConfig+0x38c>)
 800a2b0:	fba3 1302 	umull	r1, r3, r3, r2
 800a2b4:	095b      	lsrs	r3, r3, #5
 800a2b6:	2164      	movs	r1, #100	; 0x64
 800a2b8:	fb01 f303 	mul.w	r3, r1, r3
 800a2bc:	1ad3      	subs	r3, r2, r3
 800a2be:	00db      	lsls	r3, r3, #3
 800a2c0:	3332      	adds	r3, #50	; 0x32
 800a2c2:	4a87      	ldr	r2, [pc, #540]	; (800a4e0 <UART_SetConfig+0x38c>)
 800a2c4:	fba2 2303 	umull	r2, r3, r2, r3
 800a2c8:	095b      	lsrs	r3, r3, #5
 800a2ca:	005b      	lsls	r3, r3, #1
 800a2cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a2d0:	441e      	add	r6, r3
 800a2d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f04f 0100 	mov.w	r1, #0
 800a2da:	4602      	mov	r2, r0
 800a2dc:	460b      	mov	r3, r1
 800a2de:	1894      	adds	r4, r2, r2
 800a2e0:	623c      	str	r4, [r7, #32]
 800a2e2:	415b      	adcs	r3, r3
 800a2e4:	627b      	str	r3, [r7, #36]	; 0x24
 800a2e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a2ea:	1812      	adds	r2, r2, r0
 800a2ec:	eb41 0303 	adc.w	r3, r1, r3
 800a2f0:	f04f 0400 	mov.w	r4, #0
 800a2f4:	f04f 0500 	mov.w	r5, #0
 800a2f8:	00dd      	lsls	r5, r3, #3
 800a2fa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a2fe:	00d4      	lsls	r4, r2, #3
 800a300:	4622      	mov	r2, r4
 800a302:	462b      	mov	r3, r5
 800a304:	1814      	adds	r4, r2, r0
 800a306:	653c      	str	r4, [r7, #80]	; 0x50
 800a308:	414b      	adcs	r3, r1
 800a30a:	657b      	str	r3, [r7, #84]	; 0x54
 800a30c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a30e:	685b      	ldr	r3, [r3, #4]
 800a310:	461a      	mov	r2, r3
 800a312:	f04f 0300 	mov.w	r3, #0
 800a316:	1891      	adds	r1, r2, r2
 800a318:	61b9      	str	r1, [r7, #24]
 800a31a:	415b      	adcs	r3, r3
 800a31c:	61fb      	str	r3, [r7, #28]
 800a31e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a322:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a326:	f7fd ffbb 	bl	80082a0 <__aeabi_uldivmod>
 800a32a:	4602      	mov	r2, r0
 800a32c:	460b      	mov	r3, r1
 800a32e:	4b6c      	ldr	r3, [pc, #432]	; (800a4e0 <UART_SetConfig+0x38c>)
 800a330:	fba3 1302 	umull	r1, r3, r3, r2
 800a334:	095b      	lsrs	r3, r3, #5
 800a336:	2164      	movs	r1, #100	; 0x64
 800a338:	fb01 f303 	mul.w	r3, r1, r3
 800a33c:	1ad3      	subs	r3, r2, r3
 800a33e:	00db      	lsls	r3, r3, #3
 800a340:	3332      	adds	r3, #50	; 0x32
 800a342:	4a67      	ldr	r2, [pc, #412]	; (800a4e0 <UART_SetConfig+0x38c>)
 800a344:	fba2 2303 	umull	r2, r3, r2, r3
 800a348:	095b      	lsrs	r3, r3, #5
 800a34a:	f003 0207 	and.w	r2, r3, #7
 800a34e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	4432      	add	r2, r6
 800a354:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a356:	e0b9      	b.n	800a4cc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a358:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a35a:	461c      	mov	r4, r3
 800a35c:	f04f 0500 	mov.w	r5, #0
 800a360:	4622      	mov	r2, r4
 800a362:	462b      	mov	r3, r5
 800a364:	1891      	adds	r1, r2, r2
 800a366:	6139      	str	r1, [r7, #16]
 800a368:	415b      	adcs	r3, r3
 800a36a:	617b      	str	r3, [r7, #20]
 800a36c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a370:	1912      	adds	r2, r2, r4
 800a372:	eb45 0303 	adc.w	r3, r5, r3
 800a376:	f04f 0000 	mov.w	r0, #0
 800a37a:	f04f 0100 	mov.w	r1, #0
 800a37e:	00d9      	lsls	r1, r3, #3
 800a380:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a384:	00d0      	lsls	r0, r2, #3
 800a386:	4602      	mov	r2, r0
 800a388:	460b      	mov	r3, r1
 800a38a:	eb12 0804 	adds.w	r8, r2, r4
 800a38e:	eb43 0905 	adc.w	r9, r3, r5
 800a392:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a394:	685b      	ldr	r3, [r3, #4]
 800a396:	4618      	mov	r0, r3
 800a398:	f04f 0100 	mov.w	r1, #0
 800a39c:	f04f 0200 	mov.w	r2, #0
 800a3a0:	f04f 0300 	mov.w	r3, #0
 800a3a4:	008b      	lsls	r3, r1, #2
 800a3a6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a3aa:	0082      	lsls	r2, r0, #2
 800a3ac:	4640      	mov	r0, r8
 800a3ae:	4649      	mov	r1, r9
 800a3b0:	f7fd ff76 	bl	80082a0 <__aeabi_uldivmod>
 800a3b4:	4602      	mov	r2, r0
 800a3b6:	460b      	mov	r3, r1
 800a3b8:	4b49      	ldr	r3, [pc, #292]	; (800a4e0 <UART_SetConfig+0x38c>)
 800a3ba:	fba3 2302 	umull	r2, r3, r3, r2
 800a3be:	095b      	lsrs	r3, r3, #5
 800a3c0:	011e      	lsls	r6, r3, #4
 800a3c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f04f 0100 	mov.w	r1, #0
 800a3ca:	4602      	mov	r2, r0
 800a3cc:	460b      	mov	r3, r1
 800a3ce:	1894      	adds	r4, r2, r2
 800a3d0:	60bc      	str	r4, [r7, #8]
 800a3d2:	415b      	adcs	r3, r3
 800a3d4:	60fb      	str	r3, [r7, #12]
 800a3d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a3da:	1812      	adds	r2, r2, r0
 800a3dc:	eb41 0303 	adc.w	r3, r1, r3
 800a3e0:	f04f 0400 	mov.w	r4, #0
 800a3e4:	f04f 0500 	mov.w	r5, #0
 800a3e8:	00dd      	lsls	r5, r3, #3
 800a3ea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a3ee:	00d4      	lsls	r4, r2, #3
 800a3f0:	4622      	mov	r2, r4
 800a3f2:	462b      	mov	r3, r5
 800a3f4:	1814      	adds	r4, r2, r0
 800a3f6:	64bc      	str	r4, [r7, #72]	; 0x48
 800a3f8:	414b      	adcs	r3, r1
 800a3fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a3fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3fe:	685b      	ldr	r3, [r3, #4]
 800a400:	4618      	mov	r0, r3
 800a402:	f04f 0100 	mov.w	r1, #0
 800a406:	f04f 0200 	mov.w	r2, #0
 800a40a:	f04f 0300 	mov.w	r3, #0
 800a40e:	008b      	lsls	r3, r1, #2
 800a410:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a414:	0082      	lsls	r2, r0, #2
 800a416:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800a41a:	f7fd ff41 	bl	80082a0 <__aeabi_uldivmod>
 800a41e:	4602      	mov	r2, r0
 800a420:	460b      	mov	r3, r1
 800a422:	4b2f      	ldr	r3, [pc, #188]	; (800a4e0 <UART_SetConfig+0x38c>)
 800a424:	fba3 1302 	umull	r1, r3, r3, r2
 800a428:	095b      	lsrs	r3, r3, #5
 800a42a:	2164      	movs	r1, #100	; 0x64
 800a42c:	fb01 f303 	mul.w	r3, r1, r3
 800a430:	1ad3      	subs	r3, r2, r3
 800a432:	011b      	lsls	r3, r3, #4
 800a434:	3332      	adds	r3, #50	; 0x32
 800a436:	4a2a      	ldr	r2, [pc, #168]	; (800a4e0 <UART_SetConfig+0x38c>)
 800a438:	fba2 2303 	umull	r2, r3, r2, r3
 800a43c:	095b      	lsrs	r3, r3, #5
 800a43e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a442:	441e      	add	r6, r3
 800a444:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a446:	4618      	mov	r0, r3
 800a448:	f04f 0100 	mov.w	r1, #0
 800a44c:	4602      	mov	r2, r0
 800a44e:	460b      	mov	r3, r1
 800a450:	1894      	adds	r4, r2, r2
 800a452:	603c      	str	r4, [r7, #0]
 800a454:	415b      	adcs	r3, r3
 800a456:	607b      	str	r3, [r7, #4]
 800a458:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a45c:	1812      	adds	r2, r2, r0
 800a45e:	eb41 0303 	adc.w	r3, r1, r3
 800a462:	f04f 0400 	mov.w	r4, #0
 800a466:	f04f 0500 	mov.w	r5, #0
 800a46a:	00dd      	lsls	r5, r3, #3
 800a46c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a470:	00d4      	lsls	r4, r2, #3
 800a472:	4622      	mov	r2, r4
 800a474:	462b      	mov	r3, r5
 800a476:	eb12 0a00 	adds.w	sl, r2, r0
 800a47a:	eb43 0b01 	adc.w	fp, r3, r1
 800a47e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a480:	685b      	ldr	r3, [r3, #4]
 800a482:	4618      	mov	r0, r3
 800a484:	f04f 0100 	mov.w	r1, #0
 800a488:	f04f 0200 	mov.w	r2, #0
 800a48c:	f04f 0300 	mov.w	r3, #0
 800a490:	008b      	lsls	r3, r1, #2
 800a492:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a496:	0082      	lsls	r2, r0, #2
 800a498:	4650      	mov	r0, sl
 800a49a:	4659      	mov	r1, fp
 800a49c:	f7fd ff00 	bl	80082a0 <__aeabi_uldivmod>
 800a4a0:	4602      	mov	r2, r0
 800a4a2:	460b      	mov	r3, r1
 800a4a4:	4b0e      	ldr	r3, [pc, #56]	; (800a4e0 <UART_SetConfig+0x38c>)
 800a4a6:	fba3 1302 	umull	r1, r3, r3, r2
 800a4aa:	095b      	lsrs	r3, r3, #5
 800a4ac:	2164      	movs	r1, #100	; 0x64
 800a4ae:	fb01 f303 	mul.w	r3, r1, r3
 800a4b2:	1ad3      	subs	r3, r2, r3
 800a4b4:	011b      	lsls	r3, r3, #4
 800a4b6:	3332      	adds	r3, #50	; 0x32
 800a4b8:	4a09      	ldr	r2, [pc, #36]	; (800a4e0 <UART_SetConfig+0x38c>)
 800a4ba:	fba2 2303 	umull	r2, r3, r2, r3
 800a4be:	095b      	lsrs	r3, r3, #5
 800a4c0:	f003 020f 	and.w	r2, r3, #15
 800a4c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	4432      	add	r2, r6
 800a4ca:	609a      	str	r2, [r3, #8]
}
 800a4cc:	bf00      	nop
 800a4ce:	377c      	adds	r7, #124	; 0x7c
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4d6:	bf00      	nop
 800a4d8:	40011000 	.word	0x40011000
 800a4dc:	40011400 	.word	0x40011400
 800a4e0:	51eb851f 	.word	0x51eb851f

0800a4e4 <__errno>:
 800a4e4:	4b01      	ldr	r3, [pc, #4]	; (800a4ec <__errno+0x8>)
 800a4e6:	6818      	ldr	r0, [r3, #0]
 800a4e8:	4770      	bx	lr
 800a4ea:	bf00      	nop
 800a4ec:	2000000c 	.word	0x2000000c

0800a4f0 <__libc_init_array>:
 800a4f0:	b570      	push	{r4, r5, r6, lr}
 800a4f2:	4d0d      	ldr	r5, [pc, #52]	; (800a528 <__libc_init_array+0x38>)
 800a4f4:	4c0d      	ldr	r4, [pc, #52]	; (800a52c <__libc_init_array+0x3c>)
 800a4f6:	1b64      	subs	r4, r4, r5
 800a4f8:	10a4      	asrs	r4, r4, #2
 800a4fa:	2600      	movs	r6, #0
 800a4fc:	42a6      	cmp	r6, r4
 800a4fe:	d109      	bne.n	800a514 <__libc_init_array+0x24>
 800a500:	4d0b      	ldr	r5, [pc, #44]	; (800a530 <__libc_init_array+0x40>)
 800a502:	4c0c      	ldr	r4, [pc, #48]	; (800a534 <__libc_init_array+0x44>)
 800a504:	f000 fc4e 	bl	800ada4 <_init>
 800a508:	1b64      	subs	r4, r4, r5
 800a50a:	10a4      	asrs	r4, r4, #2
 800a50c:	2600      	movs	r6, #0
 800a50e:	42a6      	cmp	r6, r4
 800a510:	d105      	bne.n	800a51e <__libc_init_array+0x2e>
 800a512:	bd70      	pop	{r4, r5, r6, pc}
 800a514:	f855 3b04 	ldr.w	r3, [r5], #4
 800a518:	4798      	blx	r3
 800a51a:	3601      	adds	r6, #1
 800a51c:	e7ee      	b.n	800a4fc <__libc_init_array+0xc>
 800a51e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a522:	4798      	blx	r3
 800a524:	3601      	adds	r6, #1
 800a526:	e7f2      	b.n	800a50e <__libc_init_array+0x1e>
 800a528:	0800ae78 	.word	0x0800ae78
 800a52c:	0800ae78 	.word	0x0800ae78
 800a530:	0800ae78 	.word	0x0800ae78
 800a534:	0800ae7c 	.word	0x0800ae7c

0800a538 <memset>:
 800a538:	4402      	add	r2, r0
 800a53a:	4603      	mov	r3, r0
 800a53c:	4293      	cmp	r3, r2
 800a53e:	d100      	bne.n	800a542 <memset+0xa>
 800a540:	4770      	bx	lr
 800a542:	f803 1b01 	strb.w	r1, [r3], #1
 800a546:	e7f9      	b.n	800a53c <memset+0x4>

0800a548 <_vsiprintf_r>:
 800a548:	b500      	push	{lr}
 800a54a:	b09b      	sub	sp, #108	; 0x6c
 800a54c:	9100      	str	r1, [sp, #0]
 800a54e:	9104      	str	r1, [sp, #16]
 800a550:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a554:	9105      	str	r1, [sp, #20]
 800a556:	9102      	str	r1, [sp, #8]
 800a558:	4905      	ldr	r1, [pc, #20]	; (800a570 <_vsiprintf_r+0x28>)
 800a55a:	9103      	str	r1, [sp, #12]
 800a55c:	4669      	mov	r1, sp
 800a55e:	f000 f86f 	bl	800a640 <_svfiprintf_r>
 800a562:	9b00      	ldr	r3, [sp, #0]
 800a564:	2200      	movs	r2, #0
 800a566:	701a      	strb	r2, [r3, #0]
 800a568:	b01b      	add	sp, #108	; 0x6c
 800a56a:	f85d fb04 	ldr.w	pc, [sp], #4
 800a56e:	bf00      	nop
 800a570:	ffff0208 	.word	0xffff0208

0800a574 <vsiprintf>:
 800a574:	4613      	mov	r3, r2
 800a576:	460a      	mov	r2, r1
 800a578:	4601      	mov	r1, r0
 800a57a:	4802      	ldr	r0, [pc, #8]	; (800a584 <vsiprintf+0x10>)
 800a57c:	6800      	ldr	r0, [r0, #0]
 800a57e:	f7ff bfe3 	b.w	800a548 <_vsiprintf_r>
 800a582:	bf00      	nop
 800a584:	2000000c 	.word	0x2000000c

0800a588 <__ssputs_r>:
 800a588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a58c:	688e      	ldr	r6, [r1, #8]
 800a58e:	429e      	cmp	r6, r3
 800a590:	4682      	mov	sl, r0
 800a592:	460c      	mov	r4, r1
 800a594:	4690      	mov	r8, r2
 800a596:	461f      	mov	r7, r3
 800a598:	d838      	bhi.n	800a60c <__ssputs_r+0x84>
 800a59a:	898a      	ldrh	r2, [r1, #12]
 800a59c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a5a0:	d032      	beq.n	800a608 <__ssputs_r+0x80>
 800a5a2:	6825      	ldr	r5, [r4, #0]
 800a5a4:	6909      	ldr	r1, [r1, #16]
 800a5a6:	eba5 0901 	sub.w	r9, r5, r1
 800a5aa:	6965      	ldr	r5, [r4, #20]
 800a5ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a5b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a5b4:	3301      	adds	r3, #1
 800a5b6:	444b      	add	r3, r9
 800a5b8:	106d      	asrs	r5, r5, #1
 800a5ba:	429d      	cmp	r5, r3
 800a5bc:	bf38      	it	cc
 800a5be:	461d      	movcc	r5, r3
 800a5c0:	0553      	lsls	r3, r2, #21
 800a5c2:	d531      	bpl.n	800a628 <__ssputs_r+0xa0>
 800a5c4:	4629      	mov	r1, r5
 800a5c6:	f000 fb47 	bl	800ac58 <_malloc_r>
 800a5ca:	4606      	mov	r6, r0
 800a5cc:	b950      	cbnz	r0, 800a5e4 <__ssputs_r+0x5c>
 800a5ce:	230c      	movs	r3, #12
 800a5d0:	f8ca 3000 	str.w	r3, [sl]
 800a5d4:	89a3      	ldrh	r3, [r4, #12]
 800a5d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5da:	81a3      	strh	r3, [r4, #12]
 800a5dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a5e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5e4:	6921      	ldr	r1, [r4, #16]
 800a5e6:	464a      	mov	r2, r9
 800a5e8:	f000 fabe 	bl	800ab68 <memcpy>
 800a5ec:	89a3      	ldrh	r3, [r4, #12]
 800a5ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a5f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5f6:	81a3      	strh	r3, [r4, #12]
 800a5f8:	6126      	str	r6, [r4, #16]
 800a5fa:	6165      	str	r5, [r4, #20]
 800a5fc:	444e      	add	r6, r9
 800a5fe:	eba5 0509 	sub.w	r5, r5, r9
 800a602:	6026      	str	r6, [r4, #0]
 800a604:	60a5      	str	r5, [r4, #8]
 800a606:	463e      	mov	r6, r7
 800a608:	42be      	cmp	r6, r7
 800a60a:	d900      	bls.n	800a60e <__ssputs_r+0x86>
 800a60c:	463e      	mov	r6, r7
 800a60e:	4632      	mov	r2, r6
 800a610:	6820      	ldr	r0, [r4, #0]
 800a612:	4641      	mov	r1, r8
 800a614:	f000 fab6 	bl	800ab84 <memmove>
 800a618:	68a3      	ldr	r3, [r4, #8]
 800a61a:	6822      	ldr	r2, [r4, #0]
 800a61c:	1b9b      	subs	r3, r3, r6
 800a61e:	4432      	add	r2, r6
 800a620:	60a3      	str	r3, [r4, #8]
 800a622:	6022      	str	r2, [r4, #0]
 800a624:	2000      	movs	r0, #0
 800a626:	e7db      	b.n	800a5e0 <__ssputs_r+0x58>
 800a628:	462a      	mov	r2, r5
 800a62a:	f000 fb6f 	bl	800ad0c <_realloc_r>
 800a62e:	4606      	mov	r6, r0
 800a630:	2800      	cmp	r0, #0
 800a632:	d1e1      	bne.n	800a5f8 <__ssputs_r+0x70>
 800a634:	6921      	ldr	r1, [r4, #16]
 800a636:	4650      	mov	r0, sl
 800a638:	f000 fabe 	bl	800abb8 <_free_r>
 800a63c:	e7c7      	b.n	800a5ce <__ssputs_r+0x46>
	...

0800a640 <_svfiprintf_r>:
 800a640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a644:	4698      	mov	r8, r3
 800a646:	898b      	ldrh	r3, [r1, #12]
 800a648:	061b      	lsls	r3, r3, #24
 800a64a:	b09d      	sub	sp, #116	; 0x74
 800a64c:	4607      	mov	r7, r0
 800a64e:	460d      	mov	r5, r1
 800a650:	4614      	mov	r4, r2
 800a652:	d50e      	bpl.n	800a672 <_svfiprintf_r+0x32>
 800a654:	690b      	ldr	r3, [r1, #16]
 800a656:	b963      	cbnz	r3, 800a672 <_svfiprintf_r+0x32>
 800a658:	2140      	movs	r1, #64	; 0x40
 800a65a:	f000 fafd 	bl	800ac58 <_malloc_r>
 800a65e:	6028      	str	r0, [r5, #0]
 800a660:	6128      	str	r0, [r5, #16]
 800a662:	b920      	cbnz	r0, 800a66e <_svfiprintf_r+0x2e>
 800a664:	230c      	movs	r3, #12
 800a666:	603b      	str	r3, [r7, #0]
 800a668:	f04f 30ff 	mov.w	r0, #4294967295
 800a66c:	e0d1      	b.n	800a812 <_svfiprintf_r+0x1d2>
 800a66e:	2340      	movs	r3, #64	; 0x40
 800a670:	616b      	str	r3, [r5, #20]
 800a672:	2300      	movs	r3, #0
 800a674:	9309      	str	r3, [sp, #36]	; 0x24
 800a676:	2320      	movs	r3, #32
 800a678:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a67c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a680:	2330      	movs	r3, #48	; 0x30
 800a682:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a82c <_svfiprintf_r+0x1ec>
 800a686:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a68a:	f04f 0901 	mov.w	r9, #1
 800a68e:	4623      	mov	r3, r4
 800a690:	469a      	mov	sl, r3
 800a692:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a696:	b10a      	cbz	r2, 800a69c <_svfiprintf_r+0x5c>
 800a698:	2a25      	cmp	r2, #37	; 0x25
 800a69a:	d1f9      	bne.n	800a690 <_svfiprintf_r+0x50>
 800a69c:	ebba 0b04 	subs.w	fp, sl, r4
 800a6a0:	d00b      	beq.n	800a6ba <_svfiprintf_r+0x7a>
 800a6a2:	465b      	mov	r3, fp
 800a6a4:	4622      	mov	r2, r4
 800a6a6:	4629      	mov	r1, r5
 800a6a8:	4638      	mov	r0, r7
 800a6aa:	f7ff ff6d 	bl	800a588 <__ssputs_r>
 800a6ae:	3001      	adds	r0, #1
 800a6b0:	f000 80aa 	beq.w	800a808 <_svfiprintf_r+0x1c8>
 800a6b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6b6:	445a      	add	r2, fp
 800a6b8:	9209      	str	r2, [sp, #36]	; 0x24
 800a6ba:	f89a 3000 	ldrb.w	r3, [sl]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	f000 80a2 	beq.w	800a808 <_svfiprintf_r+0x1c8>
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	f04f 32ff 	mov.w	r2, #4294967295
 800a6ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a6ce:	f10a 0a01 	add.w	sl, sl, #1
 800a6d2:	9304      	str	r3, [sp, #16]
 800a6d4:	9307      	str	r3, [sp, #28]
 800a6d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a6da:	931a      	str	r3, [sp, #104]	; 0x68
 800a6dc:	4654      	mov	r4, sl
 800a6de:	2205      	movs	r2, #5
 800a6e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6e4:	4851      	ldr	r0, [pc, #324]	; (800a82c <_svfiprintf_r+0x1ec>)
 800a6e6:	f7fd fd8b 	bl	8008200 <memchr>
 800a6ea:	9a04      	ldr	r2, [sp, #16]
 800a6ec:	b9d8      	cbnz	r0, 800a726 <_svfiprintf_r+0xe6>
 800a6ee:	06d0      	lsls	r0, r2, #27
 800a6f0:	bf44      	itt	mi
 800a6f2:	2320      	movmi	r3, #32
 800a6f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6f8:	0711      	lsls	r1, r2, #28
 800a6fa:	bf44      	itt	mi
 800a6fc:	232b      	movmi	r3, #43	; 0x2b
 800a6fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a702:	f89a 3000 	ldrb.w	r3, [sl]
 800a706:	2b2a      	cmp	r3, #42	; 0x2a
 800a708:	d015      	beq.n	800a736 <_svfiprintf_r+0xf6>
 800a70a:	9a07      	ldr	r2, [sp, #28]
 800a70c:	4654      	mov	r4, sl
 800a70e:	2000      	movs	r0, #0
 800a710:	f04f 0c0a 	mov.w	ip, #10
 800a714:	4621      	mov	r1, r4
 800a716:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a71a:	3b30      	subs	r3, #48	; 0x30
 800a71c:	2b09      	cmp	r3, #9
 800a71e:	d94e      	bls.n	800a7be <_svfiprintf_r+0x17e>
 800a720:	b1b0      	cbz	r0, 800a750 <_svfiprintf_r+0x110>
 800a722:	9207      	str	r2, [sp, #28]
 800a724:	e014      	b.n	800a750 <_svfiprintf_r+0x110>
 800a726:	eba0 0308 	sub.w	r3, r0, r8
 800a72a:	fa09 f303 	lsl.w	r3, r9, r3
 800a72e:	4313      	orrs	r3, r2
 800a730:	9304      	str	r3, [sp, #16]
 800a732:	46a2      	mov	sl, r4
 800a734:	e7d2      	b.n	800a6dc <_svfiprintf_r+0x9c>
 800a736:	9b03      	ldr	r3, [sp, #12]
 800a738:	1d19      	adds	r1, r3, #4
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	9103      	str	r1, [sp, #12]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	bfbb      	ittet	lt
 800a742:	425b      	neglt	r3, r3
 800a744:	f042 0202 	orrlt.w	r2, r2, #2
 800a748:	9307      	strge	r3, [sp, #28]
 800a74a:	9307      	strlt	r3, [sp, #28]
 800a74c:	bfb8      	it	lt
 800a74e:	9204      	strlt	r2, [sp, #16]
 800a750:	7823      	ldrb	r3, [r4, #0]
 800a752:	2b2e      	cmp	r3, #46	; 0x2e
 800a754:	d10c      	bne.n	800a770 <_svfiprintf_r+0x130>
 800a756:	7863      	ldrb	r3, [r4, #1]
 800a758:	2b2a      	cmp	r3, #42	; 0x2a
 800a75a:	d135      	bne.n	800a7c8 <_svfiprintf_r+0x188>
 800a75c:	9b03      	ldr	r3, [sp, #12]
 800a75e:	1d1a      	adds	r2, r3, #4
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	9203      	str	r2, [sp, #12]
 800a764:	2b00      	cmp	r3, #0
 800a766:	bfb8      	it	lt
 800a768:	f04f 33ff 	movlt.w	r3, #4294967295
 800a76c:	3402      	adds	r4, #2
 800a76e:	9305      	str	r3, [sp, #20]
 800a770:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a83c <_svfiprintf_r+0x1fc>
 800a774:	7821      	ldrb	r1, [r4, #0]
 800a776:	2203      	movs	r2, #3
 800a778:	4650      	mov	r0, sl
 800a77a:	f7fd fd41 	bl	8008200 <memchr>
 800a77e:	b140      	cbz	r0, 800a792 <_svfiprintf_r+0x152>
 800a780:	2340      	movs	r3, #64	; 0x40
 800a782:	eba0 000a 	sub.w	r0, r0, sl
 800a786:	fa03 f000 	lsl.w	r0, r3, r0
 800a78a:	9b04      	ldr	r3, [sp, #16]
 800a78c:	4303      	orrs	r3, r0
 800a78e:	3401      	adds	r4, #1
 800a790:	9304      	str	r3, [sp, #16]
 800a792:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a796:	4826      	ldr	r0, [pc, #152]	; (800a830 <_svfiprintf_r+0x1f0>)
 800a798:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a79c:	2206      	movs	r2, #6
 800a79e:	f7fd fd2f 	bl	8008200 <memchr>
 800a7a2:	2800      	cmp	r0, #0
 800a7a4:	d038      	beq.n	800a818 <_svfiprintf_r+0x1d8>
 800a7a6:	4b23      	ldr	r3, [pc, #140]	; (800a834 <_svfiprintf_r+0x1f4>)
 800a7a8:	bb1b      	cbnz	r3, 800a7f2 <_svfiprintf_r+0x1b2>
 800a7aa:	9b03      	ldr	r3, [sp, #12]
 800a7ac:	3307      	adds	r3, #7
 800a7ae:	f023 0307 	bic.w	r3, r3, #7
 800a7b2:	3308      	adds	r3, #8
 800a7b4:	9303      	str	r3, [sp, #12]
 800a7b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7b8:	4433      	add	r3, r6
 800a7ba:	9309      	str	r3, [sp, #36]	; 0x24
 800a7bc:	e767      	b.n	800a68e <_svfiprintf_r+0x4e>
 800a7be:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7c2:	460c      	mov	r4, r1
 800a7c4:	2001      	movs	r0, #1
 800a7c6:	e7a5      	b.n	800a714 <_svfiprintf_r+0xd4>
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	3401      	adds	r4, #1
 800a7cc:	9305      	str	r3, [sp, #20]
 800a7ce:	4619      	mov	r1, r3
 800a7d0:	f04f 0c0a 	mov.w	ip, #10
 800a7d4:	4620      	mov	r0, r4
 800a7d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7da:	3a30      	subs	r2, #48	; 0x30
 800a7dc:	2a09      	cmp	r2, #9
 800a7de:	d903      	bls.n	800a7e8 <_svfiprintf_r+0x1a8>
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d0c5      	beq.n	800a770 <_svfiprintf_r+0x130>
 800a7e4:	9105      	str	r1, [sp, #20]
 800a7e6:	e7c3      	b.n	800a770 <_svfiprintf_r+0x130>
 800a7e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7ec:	4604      	mov	r4, r0
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	e7f0      	b.n	800a7d4 <_svfiprintf_r+0x194>
 800a7f2:	ab03      	add	r3, sp, #12
 800a7f4:	9300      	str	r3, [sp, #0]
 800a7f6:	462a      	mov	r2, r5
 800a7f8:	4b0f      	ldr	r3, [pc, #60]	; (800a838 <_svfiprintf_r+0x1f8>)
 800a7fa:	a904      	add	r1, sp, #16
 800a7fc:	4638      	mov	r0, r7
 800a7fe:	f3af 8000 	nop.w
 800a802:	1c42      	adds	r2, r0, #1
 800a804:	4606      	mov	r6, r0
 800a806:	d1d6      	bne.n	800a7b6 <_svfiprintf_r+0x176>
 800a808:	89ab      	ldrh	r3, [r5, #12]
 800a80a:	065b      	lsls	r3, r3, #25
 800a80c:	f53f af2c 	bmi.w	800a668 <_svfiprintf_r+0x28>
 800a810:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a812:	b01d      	add	sp, #116	; 0x74
 800a814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a818:	ab03      	add	r3, sp, #12
 800a81a:	9300      	str	r3, [sp, #0]
 800a81c:	462a      	mov	r2, r5
 800a81e:	4b06      	ldr	r3, [pc, #24]	; (800a838 <_svfiprintf_r+0x1f8>)
 800a820:	a904      	add	r1, sp, #16
 800a822:	4638      	mov	r0, r7
 800a824:	f000 f87a 	bl	800a91c <_printf_i>
 800a828:	e7eb      	b.n	800a802 <_svfiprintf_r+0x1c2>
 800a82a:	bf00      	nop
 800a82c:	0800ae3c 	.word	0x0800ae3c
 800a830:	0800ae46 	.word	0x0800ae46
 800a834:	00000000 	.word	0x00000000
 800a838:	0800a589 	.word	0x0800a589
 800a83c:	0800ae42 	.word	0x0800ae42

0800a840 <_printf_common>:
 800a840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a844:	4616      	mov	r6, r2
 800a846:	4699      	mov	r9, r3
 800a848:	688a      	ldr	r2, [r1, #8]
 800a84a:	690b      	ldr	r3, [r1, #16]
 800a84c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a850:	4293      	cmp	r3, r2
 800a852:	bfb8      	it	lt
 800a854:	4613      	movlt	r3, r2
 800a856:	6033      	str	r3, [r6, #0]
 800a858:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a85c:	4607      	mov	r7, r0
 800a85e:	460c      	mov	r4, r1
 800a860:	b10a      	cbz	r2, 800a866 <_printf_common+0x26>
 800a862:	3301      	adds	r3, #1
 800a864:	6033      	str	r3, [r6, #0]
 800a866:	6823      	ldr	r3, [r4, #0]
 800a868:	0699      	lsls	r1, r3, #26
 800a86a:	bf42      	ittt	mi
 800a86c:	6833      	ldrmi	r3, [r6, #0]
 800a86e:	3302      	addmi	r3, #2
 800a870:	6033      	strmi	r3, [r6, #0]
 800a872:	6825      	ldr	r5, [r4, #0]
 800a874:	f015 0506 	ands.w	r5, r5, #6
 800a878:	d106      	bne.n	800a888 <_printf_common+0x48>
 800a87a:	f104 0a19 	add.w	sl, r4, #25
 800a87e:	68e3      	ldr	r3, [r4, #12]
 800a880:	6832      	ldr	r2, [r6, #0]
 800a882:	1a9b      	subs	r3, r3, r2
 800a884:	42ab      	cmp	r3, r5
 800a886:	dc26      	bgt.n	800a8d6 <_printf_common+0x96>
 800a888:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a88c:	1e13      	subs	r3, r2, #0
 800a88e:	6822      	ldr	r2, [r4, #0]
 800a890:	bf18      	it	ne
 800a892:	2301      	movne	r3, #1
 800a894:	0692      	lsls	r2, r2, #26
 800a896:	d42b      	bmi.n	800a8f0 <_printf_common+0xb0>
 800a898:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a89c:	4649      	mov	r1, r9
 800a89e:	4638      	mov	r0, r7
 800a8a0:	47c0      	blx	r8
 800a8a2:	3001      	adds	r0, #1
 800a8a4:	d01e      	beq.n	800a8e4 <_printf_common+0xa4>
 800a8a6:	6823      	ldr	r3, [r4, #0]
 800a8a8:	68e5      	ldr	r5, [r4, #12]
 800a8aa:	6832      	ldr	r2, [r6, #0]
 800a8ac:	f003 0306 	and.w	r3, r3, #6
 800a8b0:	2b04      	cmp	r3, #4
 800a8b2:	bf08      	it	eq
 800a8b4:	1aad      	subeq	r5, r5, r2
 800a8b6:	68a3      	ldr	r3, [r4, #8]
 800a8b8:	6922      	ldr	r2, [r4, #16]
 800a8ba:	bf0c      	ite	eq
 800a8bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a8c0:	2500      	movne	r5, #0
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	bfc4      	itt	gt
 800a8c6:	1a9b      	subgt	r3, r3, r2
 800a8c8:	18ed      	addgt	r5, r5, r3
 800a8ca:	2600      	movs	r6, #0
 800a8cc:	341a      	adds	r4, #26
 800a8ce:	42b5      	cmp	r5, r6
 800a8d0:	d11a      	bne.n	800a908 <_printf_common+0xc8>
 800a8d2:	2000      	movs	r0, #0
 800a8d4:	e008      	b.n	800a8e8 <_printf_common+0xa8>
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	4652      	mov	r2, sl
 800a8da:	4649      	mov	r1, r9
 800a8dc:	4638      	mov	r0, r7
 800a8de:	47c0      	blx	r8
 800a8e0:	3001      	adds	r0, #1
 800a8e2:	d103      	bne.n	800a8ec <_printf_common+0xac>
 800a8e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a8e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8ec:	3501      	adds	r5, #1
 800a8ee:	e7c6      	b.n	800a87e <_printf_common+0x3e>
 800a8f0:	18e1      	adds	r1, r4, r3
 800a8f2:	1c5a      	adds	r2, r3, #1
 800a8f4:	2030      	movs	r0, #48	; 0x30
 800a8f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a8fa:	4422      	add	r2, r4
 800a8fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a900:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a904:	3302      	adds	r3, #2
 800a906:	e7c7      	b.n	800a898 <_printf_common+0x58>
 800a908:	2301      	movs	r3, #1
 800a90a:	4622      	mov	r2, r4
 800a90c:	4649      	mov	r1, r9
 800a90e:	4638      	mov	r0, r7
 800a910:	47c0      	blx	r8
 800a912:	3001      	adds	r0, #1
 800a914:	d0e6      	beq.n	800a8e4 <_printf_common+0xa4>
 800a916:	3601      	adds	r6, #1
 800a918:	e7d9      	b.n	800a8ce <_printf_common+0x8e>
	...

0800a91c <_printf_i>:
 800a91c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a920:	460c      	mov	r4, r1
 800a922:	4691      	mov	r9, r2
 800a924:	7e27      	ldrb	r7, [r4, #24]
 800a926:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a928:	2f78      	cmp	r7, #120	; 0x78
 800a92a:	4680      	mov	r8, r0
 800a92c:	469a      	mov	sl, r3
 800a92e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a932:	d807      	bhi.n	800a944 <_printf_i+0x28>
 800a934:	2f62      	cmp	r7, #98	; 0x62
 800a936:	d80a      	bhi.n	800a94e <_printf_i+0x32>
 800a938:	2f00      	cmp	r7, #0
 800a93a:	f000 80d8 	beq.w	800aaee <_printf_i+0x1d2>
 800a93e:	2f58      	cmp	r7, #88	; 0x58
 800a940:	f000 80a3 	beq.w	800aa8a <_printf_i+0x16e>
 800a944:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a948:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a94c:	e03a      	b.n	800a9c4 <_printf_i+0xa8>
 800a94e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a952:	2b15      	cmp	r3, #21
 800a954:	d8f6      	bhi.n	800a944 <_printf_i+0x28>
 800a956:	a001      	add	r0, pc, #4	; (adr r0, 800a95c <_printf_i+0x40>)
 800a958:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a95c:	0800a9b5 	.word	0x0800a9b5
 800a960:	0800a9c9 	.word	0x0800a9c9
 800a964:	0800a945 	.word	0x0800a945
 800a968:	0800a945 	.word	0x0800a945
 800a96c:	0800a945 	.word	0x0800a945
 800a970:	0800a945 	.word	0x0800a945
 800a974:	0800a9c9 	.word	0x0800a9c9
 800a978:	0800a945 	.word	0x0800a945
 800a97c:	0800a945 	.word	0x0800a945
 800a980:	0800a945 	.word	0x0800a945
 800a984:	0800a945 	.word	0x0800a945
 800a988:	0800aad5 	.word	0x0800aad5
 800a98c:	0800a9f9 	.word	0x0800a9f9
 800a990:	0800aab7 	.word	0x0800aab7
 800a994:	0800a945 	.word	0x0800a945
 800a998:	0800a945 	.word	0x0800a945
 800a99c:	0800aaf7 	.word	0x0800aaf7
 800a9a0:	0800a945 	.word	0x0800a945
 800a9a4:	0800a9f9 	.word	0x0800a9f9
 800a9a8:	0800a945 	.word	0x0800a945
 800a9ac:	0800a945 	.word	0x0800a945
 800a9b0:	0800aabf 	.word	0x0800aabf
 800a9b4:	680b      	ldr	r3, [r1, #0]
 800a9b6:	1d1a      	adds	r2, r3, #4
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	600a      	str	r2, [r1, #0]
 800a9bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a9c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	e0a3      	b.n	800ab10 <_printf_i+0x1f4>
 800a9c8:	6825      	ldr	r5, [r4, #0]
 800a9ca:	6808      	ldr	r0, [r1, #0]
 800a9cc:	062e      	lsls	r6, r5, #24
 800a9ce:	f100 0304 	add.w	r3, r0, #4
 800a9d2:	d50a      	bpl.n	800a9ea <_printf_i+0xce>
 800a9d4:	6805      	ldr	r5, [r0, #0]
 800a9d6:	600b      	str	r3, [r1, #0]
 800a9d8:	2d00      	cmp	r5, #0
 800a9da:	da03      	bge.n	800a9e4 <_printf_i+0xc8>
 800a9dc:	232d      	movs	r3, #45	; 0x2d
 800a9de:	426d      	negs	r5, r5
 800a9e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a9e4:	485e      	ldr	r0, [pc, #376]	; (800ab60 <_printf_i+0x244>)
 800a9e6:	230a      	movs	r3, #10
 800a9e8:	e019      	b.n	800aa1e <_printf_i+0x102>
 800a9ea:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a9ee:	6805      	ldr	r5, [r0, #0]
 800a9f0:	600b      	str	r3, [r1, #0]
 800a9f2:	bf18      	it	ne
 800a9f4:	b22d      	sxthne	r5, r5
 800a9f6:	e7ef      	b.n	800a9d8 <_printf_i+0xbc>
 800a9f8:	680b      	ldr	r3, [r1, #0]
 800a9fa:	6825      	ldr	r5, [r4, #0]
 800a9fc:	1d18      	adds	r0, r3, #4
 800a9fe:	6008      	str	r0, [r1, #0]
 800aa00:	0628      	lsls	r0, r5, #24
 800aa02:	d501      	bpl.n	800aa08 <_printf_i+0xec>
 800aa04:	681d      	ldr	r5, [r3, #0]
 800aa06:	e002      	b.n	800aa0e <_printf_i+0xf2>
 800aa08:	0669      	lsls	r1, r5, #25
 800aa0a:	d5fb      	bpl.n	800aa04 <_printf_i+0xe8>
 800aa0c:	881d      	ldrh	r5, [r3, #0]
 800aa0e:	4854      	ldr	r0, [pc, #336]	; (800ab60 <_printf_i+0x244>)
 800aa10:	2f6f      	cmp	r7, #111	; 0x6f
 800aa12:	bf0c      	ite	eq
 800aa14:	2308      	moveq	r3, #8
 800aa16:	230a      	movne	r3, #10
 800aa18:	2100      	movs	r1, #0
 800aa1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aa1e:	6866      	ldr	r6, [r4, #4]
 800aa20:	60a6      	str	r6, [r4, #8]
 800aa22:	2e00      	cmp	r6, #0
 800aa24:	bfa2      	ittt	ge
 800aa26:	6821      	ldrge	r1, [r4, #0]
 800aa28:	f021 0104 	bicge.w	r1, r1, #4
 800aa2c:	6021      	strge	r1, [r4, #0]
 800aa2e:	b90d      	cbnz	r5, 800aa34 <_printf_i+0x118>
 800aa30:	2e00      	cmp	r6, #0
 800aa32:	d04d      	beq.n	800aad0 <_printf_i+0x1b4>
 800aa34:	4616      	mov	r6, r2
 800aa36:	fbb5 f1f3 	udiv	r1, r5, r3
 800aa3a:	fb03 5711 	mls	r7, r3, r1, r5
 800aa3e:	5dc7      	ldrb	r7, [r0, r7]
 800aa40:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aa44:	462f      	mov	r7, r5
 800aa46:	42bb      	cmp	r3, r7
 800aa48:	460d      	mov	r5, r1
 800aa4a:	d9f4      	bls.n	800aa36 <_printf_i+0x11a>
 800aa4c:	2b08      	cmp	r3, #8
 800aa4e:	d10b      	bne.n	800aa68 <_printf_i+0x14c>
 800aa50:	6823      	ldr	r3, [r4, #0]
 800aa52:	07df      	lsls	r7, r3, #31
 800aa54:	d508      	bpl.n	800aa68 <_printf_i+0x14c>
 800aa56:	6923      	ldr	r3, [r4, #16]
 800aa58:	6861      	ldr	r1, [r4, #4]
 800aa5a:	4299      	cmp	r1, r3
 800aa5c:	bfde      	ittt	le
 800aa5e:	2330      	movle	r3, #48	; 0x30
 800aa60:	f806 3c01 	strble.w	r3, [r6, #-1]
 800aa64:	f106 36ff 	addle.w	r6, r6, #4294967295
 800aa68:	1b92      	subs	r2, r2, r6
 800aa6a:	6122      	str	r2, [r4, #16]
 800aa6c:	f8cd a000 	str.w	sl, [sp]
 800aa70:	464b      	mov	r3, r9
 800aa72:	aa03      	add	r2, sp, #12
 800aa74:	4621      	mov	r1, r4
 800aa76:	4640      	mov	r0, r8
 800aa78:	f7ff fee2 	bl	800a840 <_printf_common>
 800aa7c:	3001      	adds	r0, #1
 800aa7e:	d14c      	bne.n	800ab1a <_printf_i+0x1fe>
 800aa80:	f04f 30ff 	mov.w	r0, #4294967295
 800aa84:	b004      	add	sp, #16
 800aa86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa8a:	4835      	ldr	r0, [pc, #212]	; (800ab60 <_printf_i+0x244>)
 800aa8c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800aa90:	6823      	ldr	r3, [r4, #0]
 800aa92:	680e      	ldr	r6, [r1, #0]
 800aa94:	061f      	lsls	r7, r3, #24
 800aa96:	f856 5b04 	ldr.w	r5, [r6], #4
 800aa9a:	600e      	str	r6, [r1, #0]
 800aa9c:	d514      	bpl.n	800aac8 <_printf_i+0x1ac>
 800aa9e:	07d9      	lsls	r1, r3, #31
 800aaa0:	bf44      	itt	mi
 800aaa2:	f043 0320 	orrmi.w	r3, r3, #32
 800aaa6:	6023      	strmi	r3, [r4, #0]
 800aaa8:	b91d      	cbnz	r5, 800aab2 <_printf_i+0x196>
 800aaaa:	6823      	ldr	r3, [r4, #0]
 800aaac:	f023 0320 	bic.w	r3, r3, #32
 800aab0:	6023      	str	r3, [r4, #0]
 800aab2:	2310      	movs	r3, #16
 800aab4:	e7b0      	b.n	800aa18 <_printf_i+0xfc>
 800aab6:	6823      	ldr	r3, [r4, #0]
 800aab8:	f043 0320 	orr.w	r3, r3, #32
 800aabc:	6023      	str	r3, [r4, #0]
 800aabe:	2378      	movs	r3, #120	; 0x78
 800aac0:	4828      	ldr	r0, [pc, #160]	; (800ab64 <_printf_i+0x248>)
 800aac2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aac6:	e7e3      	b.n	800aa90 <_printf_i+0x174>
 800aac8:	065e      	lsls	r6, r3, #25
 800aaca:	bf48      	it	mi
 800aacc:	b2ad      	uxthmi	r5, r5
 800aace:	e7e6      	b.n	800aa9e <_printf_i+0x182>
 800aad0:	4616      	mov	r6, r2
 800aad2:	e7bb      	b.n	800aa4c <_printf_i+0x130>
 800aad4:	680b      	ldr	r3, [r1, #0]
 800aad6:	6826      	ldr	r6, [r4, #0]
 800aad8:	6960      	ldr	r0, [r4, #20]
 800aada:	1d1d      	adds	r5, r3, #4
 800aadc:	600d      	str	r5, [r1, #0]
 800aade:	0635      	lsls	r5, r6, #24
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	d501      	bpl.n	800aae8 <_printf_i+0x1cc>
 800aae4:	6018      	str	r0, [r3, #0]
 800aae6:	e002      	b.n	800aaee <_printf_i+0x1d2>
 800aae8:	0671      	lsls	r1, r6, #25
 800aaea:	d5fb      	bpl.n	800aae4 <_printf_i+0x1c8>
 800aaec:	8018      	strh	r0, [r3, #0]
 800aaee:	2300      	movs	r3, #0
 800aaf0:	6123      	str	r3, [r4, #16]
 800aaf2:	4616      	mov	r6, r2
 800aaf4:	e7ba      	b.n	800aa6c <_printf_i+0x150>
 800aaf6:	680b      	ldr	r3, [r1, #0]
 800aaf8:	1d1a      	adds	r2, r3, #4
 800aafa:	600a      	str	r2, [r1, #0]
 800aafc:	681e      	ldr	r6, [r3, #0]
 800aafe:	6862      	ldr	r2, [r4, #4]
 800ab00:	2100      	movs	r1, #0
 800ab02:	4630      	mov	r0, r6
 800ab04:	f7fd fb7c 	bl	8008200 <memchr>
 800ab08:	b108      	cbz	r0, 800ab0e <_printf_i+0x1f2>
 800ab0a:	1b80      	subs	r0, r0, r6
 800ab0c:	6060      	str	r0, [r4, #4]
 800ab0e:	6863      	ldr	r3, [r4, #4]
 800ab10:	6123      	str	r3, [r4, #16]
 800ab12:	2300      	movs	r3, #0
 800ab14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab18:	e7a8      	b.n	800aa6c <_printf_i+0x150>
 800ab1a:	6923      	ldr	r3, [r4, #16]
 800ab1c:	4632      	mov	r2, r6
 800ab1e:	4649      	mov	r1, r9
 800ab20:	4640      	mov	r0, r8
 800ab22:	47d0      	blx	sl
 800ab24:	3001      	adds	r0, #1
 800ab26:	d0ab      	beq.n	800aa80 <_printf_i+0x164>
 800ab28:	6823      	ldr	r3, [r4, #0]
 800ab2a:	079b      	lsls	r3, r3, #30
 800ab2c:	d413      	bmi.n	800ab56 <_printf_i+0x23a>
 800ab2e:	68e0      	ldr	r0, [r4, #12]
 800ab30:	9b03      	ldr	r3, [sp, #12]
 800ab32:	4298      	cmp	r0, r3
 800ab34:	bfb8      	it	lt
 800ab36:	4618      	movlt	r0, r3
 800ab38:	e7a4      	b.n	800aa84 <_printf_i+0x168>
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	4632      	mov	r2, r6
 800ab3e:	4649      	mov	r1, r9
 800ab40:	4640      	mov	r0, r8
 800ab42:	47d0      	blx	sl
 800ab44:	3001      	adds	r0, #1
 800ab46:	d09b      	beq.n	800aa80 <_printf_i+0x164>
 800ab48:	3501      	adds	r5, #1
 800ab4a:	68e3      	ldr	r3, [r4, #12]
 800ab4c:	9903      	ldr	r1, [sp, #12]
 800ab4e:	1a5b      	subs	r3, r3, r1
 800ab50:	42ab      	cmp	r3, r5
 800ab52:	dcf2      	bgt.n	800ab3a <_printf_i+0x21e>
 800ab54:	e7eb      	b.n	800ab2e <_printf_i+0x212>
 800ab56:	2500      	movs	r5, #0
 800ab58:	f104 0619 	add.w	r6, r4, #25
 800ab5c:	e7f5      	b.n	800ab4a <_printf_i+0x22e>
 800ab5e:	bf00      	nop
 800ab60:	0800ae4d 	.word	0x0800ae4d
 800ab64:	0800ae5e 	.word	0x0800ae5e

0800ab68 <memcpy>:
 800ab68:	440a      	add	r2, r1
 800ab6a:	4291      	cmp	r1, r2
 800ab6c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ab70:	d100      	bne.n	800ab74 <memcpy+0xc>
 800ab72:	4770      	bx	lr
 800ab74:	b510      	push	{r4, lr}
 800ab76:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab7e:	4291      	cmp	r1, r2
 800ab80:	d1f9      	bne.n	800ab76 <memcpy+0xe>
 800ab82:	bd10      	pop	{r4, pc}

0800ab84 <memmove>:
 800ab84:	4288      	cmp	r0, r1
 800ab86:	b510      	push	{r4, lr}
 800ab88:	eb01 0402 	add.w	r4, r1, r2
 800ab8c:	d902      	bls.n	800ab94 <memmove+0x10>
 800ab8e:	4284      	cmp	r4, r0
 800ab90:	4623      	mov	r3, r4
 800ab92:	d807      	bhi.n	800aba4 <memmove+0x20>
 800ab94:	1e43      	subs	r3, r0, #1
 800ab96:	42a1      	cmp	r1, r4
 800ab98:	d008      	beq.n	800abac <memmove+0x28>
 800ab9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ab9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aba2:	e7f8      	b.n	800ab96 <memmove+0x12>
 800aba4:	4402      	add	r2, r0
 800aba6:	4601      	mov	r1, r0
 800aba8:	428a      	cmp	r2, r1
 800abaa:	d100      	bne.n	800abae <memmove+0x2a>
 800abac:	bd10      	pop	{r4, pc}
 800abae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800abb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800abb6:	e7f7      	b.n	800aba8 <memmove+0x24>

0800abb8 <_free_r>:
 800abb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800abba:	2900      	cmp	r1, #0
 800abbc:	d048      	beq.n	800ac50 <_free_r+0x98>
 800abbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abc2:	9001      	str	r0, [sp, #4]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	f1a1 0404 	sub.w	r4, r1, #4
 800abca:	bfb8      	it	lt
 800abcc:	18e4      	addlt	r4, r4, r3
 800abce:	f000 f8d3 	bl	800ad78 <__malloc_lock>
 800abd2:	4a20      	ldr	r2, [pc, #128]	; (800ac54 <_free_r+0x9c>)
 800abd4:	9801      	ldr	r0, [sp, #4]
 800abd6:	6813      	ldr	r3, [r2, #0]
 800abd8:	4615      	mov	r5, r2
 800abda:	b933      	cbnz	r3, 800abea <_free_r+0x32>
 800abdc:	6063      	str	r3, [r4, #4]
 800abde:	6014      	str	r4, [r2, #0]
 800abe0:	b003      	add	sp, #12
 800abe2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800abe6:	f000 b8cd 	b.w	800ad84 <__malloc_unlock>
 800abea:	42a3      	cmp	r3, r4
 800abec:	d90b      	bls.n	800ac06 <_free_r+0x4e>
 800abee:	6821      	ldr	r1, [r4, #0]
 800abf0:	1862      	adds	r2, r4, r1
 800abf2:	4293      	cmp	r3, r2
 800abf4:	bf04      	itt	eq
 800abf6:	681a      	ldreq	r2, [r3, #0]
 800abf8:	685b      	ldreq	r3, [r3, #4]
 800abfa:	6063      	str	r3, [r4, #4]
 800abfc:	bf04      	itt	eq
 800abfe:	1852      	addeq	r2, r2, r1
 800ac00:	6022      	streq	r2, [r4, #0]
 800ac02:	602c      	str	r4, [r5, #0]
 800ac04:	e7ec      	b.n	800abe0 <_free_r+0x28>
 800ac06:	461a      	mov	r2, r3
 800ac08:	685b      	ldr	r3, [r3, #4]
 800ac0a:	b10b      	cbz	r3, 800ac10 <_free_r+0x58>
 800ac0c:	42a3      	cmp	r3, r4
 800ac0e:	d9fa      	bls.n	800ac06 <_free_r+0x4e>
 800ac10:	6811      	ldr	r1, [r2, #0]
 800ac12:	1855      	adds	r5, r2, r1
 800ac14:	42a5      	cmp	r5, r4
 800ac16:	d10b      	bne.n	800ac30 <_free_r+0x78>
 800ac18:	6824      	ldr	r4, [r4, #0]
 800ac1a:	4421      	add	r1, r4
 800ac1c:	1854      	adds	r4, r2, r1
 800ac1e:	42a3      	cmp	r3, r4
 800ac20:	6011      	str	r1, [r2, #0]
 800ac22:	d1dd      	bne.n	800abe0 <_free_r+0x28>
 800ac24:	681c      	ldr	r4, [r3, #0]
 800ac26:	685b      	ldr	r3, [r3, #4]
 800ac28:	6053      	str	r3, [r2, #4]
 800ac2a:	4421      	add	r1, r4
 800ac2c:	6011      	str	r1, [r2, #0]
 800ac2e:	e7d7      	b.n	800abe0 <_free_r+0x28>
 800ac30:	d902      	bls.n	800ac38 <_free_r+0x80>
 800ac32:	230c      	movs	r3, #12
 800ac34:	6003      	str	r3, [r0, #0]
 800ac36:	e7d3      	b.n	800abe0 <_free_r+0x28>
 800ac38:	6825      	ldr	r5, [r4, #0]
 800ac3a:	1961      	adds	r1, r4, r5
 800ac3c:	428b      	cmp	r3, r1
 800ac3e:	bf04      	itt	eq
 800ac40:	6819      	ldreq	r1, [r3, #0]
 800ac42:	685b      	ldreq	r3, [r3, #4]
 800ac44:	6063      	str	r3, [r4, #4]
 800ac46:	bf04      	itt	eq
 800ac48:	1949      	addeq	r1, r1, r5
 800ac4a:	6021      	streq	r1, [r4, #0]
 800ac4c:	6054      	str	r4, [r2, #4]
 800ac4e:	e7c7      	b.n	800abe0 <_free_r+0x28>
 800ac50:	b003      	add	sp, #12
 800ac52:	bd30      	pop	{r4, r5, pc}
 800ac54:	20000090 	.word	0x20000090

0800ac58 <_malloc_r>:
 800ac58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac5a:	1ccd      	adds	r5, r1, #3
 800ac5c:	f025 0503 	bic.w	r5, r5, #3
 800ac60:	3508      	adds	r5, #8
 800ac62:	2d0c      	cmp	r5, #12
 800ac64:	bf38      	it	cc
 800ac66:	250c      	movcc	r5, #12
 800ac68:	2d00      	cmp	r5, #0
 800ac6a:	4606      	mov	r6, r0
 800ac6c:	db01      	blt.n	800ac72 <_malloc_r+0x1a>
 800ac6e:	42a9      	cmp	r1, r5
 800ac70:	d903      	bls.n	800ac7a <_malloc_r+0x22>
 800ac72:	230c      	movs	r3, #12
 800ac74:	6033      	str	r3, [r6, #0]
 800ac76:	2000      	movs	r0, #0
 800ac78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac7a:	f000 f87d 	bl	800ad78 <__malloc_lock>
 800ac7e:	4921      	ldr	r1, [pc, #132]	; (800ad04 <_malloc_r+0xac>)
 800ac80:	680a      	ldr	r2, [r1, #0]
 800ac82:	4614      	mov	r4, r2
 800ac84:	b99c      	cbnz	r4, 800acae <_malloc_r+0x56>
 800ac86:	4f20      	ldr	r7, [pc, #128]	; (800ad08 <_malloc_r+0xb0>)
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	b923      	cbnz	r3, 800ac96 <_malloc_r+0x3e>
 800ac8c:	4621      	mov	r1, r4
 800ac8e:	4630      	mov	r0, r6
 800ac90:	f000 f862 	bl	800ad58 <_sbrk_r>
 800ac94:	6038      	str	r0, [r7, #0]
 800ac96:	4629      	mov	r1, r5
 800ac98:	4630      	mov	r0, r6
 800ac9a:	f000 f85d 	bl	800ad58 <_sbrk_r>
 800ac9e:	1c43      	adds	r3, r0, #1
 800aca0:	d123      	bne.n	800acea <_malloc_r+0x92>
 800aca2:	230c      	movs	r3, #12
 800aca4:	6033      	str	r3, [r6, #0]
 800aca6:	4630      	mov	r0, r6
 800aca8:	f000 f86c 	bl	800ad84 <__malloc_unlock>
 800acac:	e7e3      	b.n	800ac76 <_malloc_r+0x1e>
 800acae:	6823      	ldr	r3, [r4, #0]
 800acb0:	1b5b      	subs	r3, r3, r5
 800acb2:	d417      	bmi.n	800ace4 <_malloc_r+0x8c>
 800acb4:	2b0b      	cmp	r3, #11
 800acb6:	d903      	bls.n	800acc0 <_malloc_r+0x68>
 800acb8:	6023      	str	r3, [r4, #0]
 800acba:	441c      	add	r4, r3
 800acbc:	6025      	str	r5, [r4, #0]
 800acbe:	e004      	b.n	800acca <_malloc_r+0x72>
 800acc0:	6863      	ldr	r3, [r4, #4]
 800acc2:	42a2      	cmp	r2, r4
 800acc4:	bf0c      	ite	eq
 800acc6:	600b      	streq	r3, [r1, #0]
 800acc8:	6053      	strne	r3, [r2, #4]
 800acca:	4630      	mov	r0, r6
 800accc:	f000 f85a 	bl	800ad84 <__malloc_unlock>
 800acd0:	f104 000b 	add.w	r0, r4, #11
 800acd4:	1d23      	adds	r3, r4, #4
 800acd6:	f020 0007 	bic.w	r0, r0, #7
 800acda:	1ac2      	subs	r2, r0, r3
 800acdc:	d0cc      	beq.n	800ac78 <_malloc_r+0x20>
 800acde:	1a1b      	subs	r3, r3, r0
 800ace0:	50a3      	str	r3, [r4, r2]
 800ace2:	e7c9      	b.n	800ac78 <_malloc_r+0x20>
 800ace4:	4622      	mov	r2, r4
 800ace6:	6864      	ldr	r4, [r4, #4]
 800ace8:	e7cc      	b.n	800ac84 <_malloc_r+0x2c>
 800acea:	1cc4      	adds	r4, r0, #3
 800acec:	f024 0403 	bic.w	r4, r4, #3
 800acf0:	42a0      	cmp	r0, r4
 800acf2:	d0e3      	beq.n	800acbc <_malloc_r+0x64>
 800acf4:	1a21      	subs	r1, r4, r0
 800acf6:	4630      	mov	r0, r6
 800acf8:	f000 f82e 	bl	800ad58 <_sbrk_r>
 800acfc:	3001      	adds	r0, #1
 800acfe:	d1dd      	bne.n	800acbc <_malloc_r+0x64>
 800ad00:	e7cf      	b.n	800aca2 <_malloc_r+0x4a>
 800ad02:	bf00      	nop
 800ad04:	20000090 	.word	0x20000090
 800ad08:	20000094 	.word	0x20000094

0800ad0c <_realloc_r>:
 800ad0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad0e:	4607      	mov	r7, r0
 800ad10:	4614      	mov	r4, r2
 800ad12:	460e      	mov	r6, r1
 800ad14:	b921      	cbnz	r1, 800ad20 <_realloc_r+0x14>
 800ad16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ad1a:	4611      	mov	r1, r2
 800ad1c:	f7ff bf9c 	b.w	800ac58 <_malloc_r>
 800ad20:	b922      	cbnz	r2, 800ad2c <_realloc_r+0x20>
 800ad22:	f7ff ff49 	bl	800abb8 <_free_r>
 800ad26:	4625      	mov	r5, r4
 800ad28:	4628      	mov	r0, r5
 800ad2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad2c:	f000 f830 	bl	800ad90 <_malloc_usable_size_r>
 800ad30:	42a0      	cmp	r0, r4
 800ad32:	d20f      	bcs.n	800ad54 <_realloc_r+0x48>
 800ad34:	4621      	mov	r1, r4
 800ad36:	4638      	mov	r0, r7
 800ad38:	f7ff ff8e 	bl	800ac58 <_malloc_r>
 800ad3c:	4605      	mov	r5, r0
 800ad3e:	2800      	cmp	r0, #0
 800ad40:	d0f2      	beq.n	800ad28 <_realloc_r+0x1c>
 800ad42:	4631      	mov	r1, r6
 800ad44:	4622      	mov	r2, r4
 800ad46:	f7ff ff0f 	bl	800ab68 <memcpy>
 800ad4a:	4631      	mov	r1, r6
 800ad4c:	4638      	mov	r0, r7
 800ad4e:	f7ff ff33 	bl	800abb8 <_free_r>
 800ad52:	e7e9      	b.n	800ad28 <_realloc_r+0x1c>
 800ad54:	4635      	mov	r5, r6
 800ad56:	e7e7      	b.n	800ad28 <_realloc_r+0x1c>

0800ad58 <_sbrk_r>:
 800ad58:	b538      	push	{r3, r4, r5, lr}
 800ad5a:	4d06      	ldr	r5, [pc, #24]	; (800ad74 <_sbrk_r+0x1c>)
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	4604      	mov	r4, r0
 800ad60:	4608      	mov	r0, r1
 800ad62:	602b      	str	r3, [r5, #0]
 800ad64:	f7fe f812 	bl	8008d8c <_sbrk>
 800ad68:	1c43      	adds	r3, r0, #1
 800ad6a:	d102      	bne.n	800ad72 <_sbrk_r+0x1a>
 800ad6c:	682b      	ldr	r3, [r5, #0]
 800ad6e:	b103      	cbz	r3, 800ad72 <_sbrk_r+0x1a>
 800ad70:	6023      	str	r3, [r4, #0]
 800ad72:	bd38      	pop	{r3, r4, r5, pc}
 800ad74:	200000e0 	.word	0x200000e0

0800ad78 <__malloc_lock>:
 800ad78:	4801      	ldr	r0, [pc, #4]	; (800ad80 <__malloc_lock+0x8>)
 800ad7a:	f000 b811 	b.w	800ada0 <__retarget_lock_acquire_recursive>
 800ad7e:	bf00      	nop
 800ad80:	200000e8 	.word	0x200000e8

0800ad84 <__malloc_unlock>:
 800ad84:	4801      	ldr	r0, [pc, #4]	; (800ad8c <__malloc_unlock+0x8>)
 800ad86:	f000 b80c 	b.w	800ada2 <__retarget_lock_release_recursive>
 800ad8a:	bf00      	nop
 800ad8c:	200000e8 	.word	0x200000e8

0800ad90 <_malloc_usable_size_r>:
 800ad90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad94:	1f18      	subs	r0, r3, #4
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	bfbc      	itt	lt
 800ad9a:	580b      	ldrlt	r3, [r1, r0]
 800ad9c:	18c0      	addlt	r0, r0, r3
 800ad9e:	4770      	bx	lr

0800ada0 <__retarget_lock_acquire_recursive>:
 800ada0:	4770      	bx	lr

0800ada2 <__retarget_lock_release_recursive>:
 800ada2:	4770      	bx	lr

0800ada4 <_init>:
 800ada4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ada6:	bf00      	nop
 800ada8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adaa:	bc08      	pop	{r3}
 800adac:	469e      	mov	lr, r3
 800adae:	4770      	bx	lr

0800adb0 <_fini>:
 800adb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adb2:	bf00      	nop
 800adb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adb6:	bc08      	pop	{r3}
 800adb8:	469e      	mov	lr, r3
 800adba:	4770      	bx	lr
