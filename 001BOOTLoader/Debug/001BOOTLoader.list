
001BOOTLoader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004140  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d8  080042f0  080042f0  000142f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048c8  080048c8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080048c8  080048c8  000148c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048d0  080048d0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048d0  080048d0  000148d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048d4  080048d4  000148d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080048d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          000001b4  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000022c  2000022c  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d926  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020a7  00000000  00000000  0002d9ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000910  00000000  00000000  0002fa78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000858  00000000  00000000  00030388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023b99  00000000  00000000  00030be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b1e7  00000000  00000000  00054779  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3b04  00000000  00000000  0005f960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00133464  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002770  00000000  00000000  001334b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080042d8 	.word	0x080042d8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	080042d8 	.word	0x080042d8

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <bootloader_uart_read_data>:

uint8_t bl_rx_buffer[BL_RX_LEN];


void  bootloader_uart_read_data(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
    uint8_t rcv_len=0;
 800059e:	2300      	movs	r3, #0
 80005a0:	71fb      	strb	r3, [r7, #7]

	while(1)
	{
		memset(bl_rx_buffer, 0, BL_RX_LEN);
 80005a2:	22c8      	movs	r2, #200	; 0xc8
 80005a4:	2100      	movs	r1, #0
 80005a6:	4835      	ldr	r0, [pc, #212]	; (800067c <bootloader_uart_read_data+0xe4>)
 80005a8:	f003 fa60 	bl	8003a6c <memset>
		// Here we will read and decode the commands coming from host
		// First read only one byte from the host , which is the "length" field of the command packet
		HAL_UART_Receive(C_UART,bl_rx_buffer,1,HAL_MAX_DELAY);
 80005ac:	f04f 33ff 	mov.w	r3, #4294967295
 80005b0:	2201      	movs	r2, #1
 80005b2:	4932      	ldr	r1, [pc, #200]	; (800067c <bootloader_uart_read_data+0xe4>)
 80005b4:	4832      	ldr	r0, [pc, #200]	; (8000680 <bootloader_uart_read_data+0xe8>)
 80005b6:	f002 ff56 	bl	8003466 <HAL_UART_Receive>
		rcv_len= bl_rx_buffer[0];
 80005ba:	4b30      	ldr	r3, [pc, #192]	; (800067c <bootloader_uart_read_data+0xe4>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	71fb      	strb	r3, [r7, #7]
		HAL_UART_Receive(C_UART,&bl_rx_buffer[1],rcv_len,HAL_MAX_DELAY);
 80005c0:	79fb      	ldrb	r3, [r7, #7]
 80005c2:	b29a      	uxth	r2, r3
 80005c4:	f04f 33ff 	mov.w	r3, #4294967295
 80005c8:	492e      	ldr	r1, [pc, #184]	; (8000684 <bootloader_uart_read_data+0xec>)
 80005ca:	482d      	ldr	r0, [pc, #180]	; (8000680 <bootloader_uart_read_data+0xe8>)
 80005cc:	f002 ff4b 	bl	8003466 <HAL_UART_Receive>
		switch(bl_rx_buffer[1])
 80005d0:	4b2a      	ldr	r3, [pc, #168]	; (800067c <bootloader_uart_read_data+0xe4>)
 80005d2:	785b      	ldrb	r3, [r3, #1]
 80005d4:	3b51      	subs	r3, #81	; 0x51
 80005d6:	2b0b      	cmp	r3, #11
 80005d8:	d84a      	bhi.n	8000670 <bootloader_uart_read_data+0xd8>
 80005da:	a201      	add	r2, pc, #4	; (adr r2, 80005e0 <bootloader_uart_read_data+0x48>)
 80005dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005e0:	08000611 	.word	0x08000611
 80005e4:	08000619 	.word	0x08000619
 80005e8:	08000621 	.word	0x08000621
 80005ec:	08000629 	.word	0x08000629
 80005f0:	08000631 	.word	0x08000631
 80005f4:	08000639 	.word	0x08000639
 80005f8:	08000641 	.word	0x08000641
 80005fc:	08000649 	.word	0x08000649
 8000600:	08000651 	.word	0x08000651
 8000604:	08000659 	.word	0x08000659
 8000608:	08000661 	.word	0x08000661
 800060c:	08000669 	.word	0x08000669
		{
            case BL_GET_VER:
                bootloader_handle_getver_cmd(bl_rx_buffer);
 8000610:	481a      	ldr	r0, [pc, #104]	; (800067c <bootloader_uart_read_data+0xe4>)
 8000612:	f000 f867 	bl	80006e4 <bootloader_handle_getver_cmd>
                break;
 8000616:	e02f      	b.n	8000678 <bootloader_uart_read_data+0xe0>
            case BL_GET_HELP:
                bootloader_handle_gethelp_cmd(bl_rx_buffer);
 8000618:	4818      	ldr	r0, [pc, #96]	; (800067c <bootloader_uart_read_data+0xe4>)
 800061a:	f000 f8af 	bl	800077c <bootloader_handle_gethelp_cmd>
                break;
 800061e:	e02b      	b.n	8000678 <bootloader_uart_read_data+0xe0>
            case BL_GET_CID:
                bootloader_handle_getcid_cmd(bl_rx_buffer);
 8000620:	4816      	ldr	r0, [pc, #88]	; (800067c <bootloader_uart_read_data+0xe4>)
 8000622:	f000 f8e5 	bl	80007f0 <bootloader_handle_getcid_cmd>
                break;
 8000626:	e027      	b.n	8000678 <bootloader_uart_read_data+0xe0>
            case BL_GET_RDP_STATUS:
                bootloader_handle_getrdp_cmd(bl_rx_buffer);
 8000628:	4814      	ldr	r0, [pc, #80]	; (800067c <bootloader_uart_read_data+0xe4>)
 800062a:	f000 f92f 	bl	800088c <bootloader_handle_getrdp_cmd>
                break;
 800062e:	e023      	b.n	8000678 <bootloader_uart_read_data+0xe0>
            case BL_GO_TO_ADDR:
                bootloader_handle_go_cmd(bl_rx_buffer);
 8000630:	4812      	ldr	r0, [pc, #72]	; (800067c <bootloader_uart_read_data+0xe4>)
 8000632:	f000 f979 	bl	8000928 <bootloader_handle_go_cmd>
                break;
 8000636:	e01f      	b.n	8000678 <bootloader_uart_read_data+0xe0>
            case BL_FLASH_ERASE:
                bootloader_handle_flash_erase_cmd(bl_rx_buffer);
 8000638:	4810      	ldr	r0, [pc, #64]	; (800067c <bootloader_uart_read_data+0xe4>)
 800063a:	f000 f9dd 	bl	80009f8 <bootloader_handle_flash_erase_cmd>
                break;
 800063e:	e01b      	b.n	8000678 <bootloader_uart_read_data+0xe0>
            case BL_MEM_WRITE:
                bootloader_handle_mem_write_cmd(bl_rx_buffer);
 8000640:	480e      	ldr	r0, [pc, #56]	; (800067c <bootloader_uart_read_data+0xe4>)
 8000642:	f000 fa43 	bl	8000acc <bootloader_handle_mem_write_cmd>
                break;
 8000646:	e017      	b.n	8000678 <bootloader_uart_read_data+0xe0>
            case BL_EN_RW_PROTECT:
                bootloader_handle_en_rw_protect(bl_rx_buffer);
 8000648:	480c      	ldr	r0, [pc, #48]	; (800067c <bootloader_uart_read_data+0xe4>)
 800064a:	f000 fab9 	bl	8000bc0 <bootloader_handle_en_rw_protect>
                break;
 800064e:	e013      	b.n	8000678 <bootloader_uart_read_data+0xe0>
            case BL_MEM_READ:
                bootloader_handle_mem_read(bl_rx_buffer);
 8000650:	480a      	ldr	r0, [pc, #40]	; (800067c <bootloader_uart_read_data+0xe4>)
 8000652:	f000 fb51 	bl	8000cf8 <bootloader_handle_mem_read>
                break;
 8000656:	e00f      	b.n	8000678 <bootloader_uart_read_data+0xe0>
            case BL_READ_SECTOR_P_STATUS:
                bootloader_handle_read_sector_protection_status(bl_rx_buffer);
 8000658:	4808      	ldr	r0, [pc, #32]	; (800067c <bootloader_uart_read_data+0xe4>)
 800065a:	f000 fb57 	bl	8000d0c <bootloader_handle_read_sector_protection_status>
                break;
 800065e:	e00b      	b.n	8000678 <bootloader_uart_read_data+0xe0>
            case BL_OTP_READ:
                bootloader_handle_read_otp(bl_rx_buffer);
 8000660:	4806      	ldr	r0, [pc, #24]	; (800067c <bootloader_uart_read_data+0xe4>)
 8000662:	f000 fb99 	bl	8000d98 <bootloader_handle_read_otp>
                break;
 8000666:	e007      	b.n	8000678 <bootloader_uart_read_data+0xe0>
						case BL_DIS_R_W_PROTECT:
                bootloader_handle_dis_rw_protect(bl_rx_buffer);
 8000668:	4804      	ldr	r0, [pc, #16]	; (800067c <bootloader_uart_read_data+0xe4>)
 800066a:	f000 faf9 	bl	8000c60 <bootloader_handle_dis_rw_protect>
                break;
 800066e:	e003      	b.n	8000678 <bootloader_uart_read_data+0xe0>
             default:
                printmsg("BL_DEBUG_MSG: Invalid command code received from host \r\n");
 8000670:	4805      	ldr	r0, [pc, #20]	; (8000688 <bootloader_uart_read_data+0xf0>)
 8000672:	f001 f8f9 	bl	8001868 <printmsg>
                break;
 8000676:	bf00      	nop
		memset(bl_rx_buffer, 0, BL_RX_LEN);
 8000678:	e793      	b.n	80005a2 <bootloader_uart_read_data+0xa>
 800067a:	bf00      	nop
 800067c:	200000a0 	.word	0x200000a0
 8000680:	200001b4 	.word	0x200001b4
 8000684:	200000a1 	.word	0x200000a1
 8000688:	080042f0 	.word	0x080042f0

0800068c <bootloader_jump_to_user_app>:
/* Code to jump to user application
 * Here we are assuming FLASH_SECTOR2_BASE
 * is where the user application is stored
 */
void bootloader_jump_to_user_app(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0

   // Just a function pointer to hold the address of the reset handler of the user app.
    void (*app_reset_handler)(void);

    printmsg("BL_DEBUG_MSG: bootloader_jump_to_user_app\r\n");
 8000692:	480f      	ldr	r0, [pc, #60]	; (80006d0 <bootloader_jump_to_user_app+0x44>)
 8000694:	f001 f8e8 	bl	8001868 <printmsg>


    // 1. Configure the MSP by reading the value from the base address of the sector 2
    uint32_t msp_value = *(volatile uint32_t *)FLASH_SECTOR2_BASE;
 8000698:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <bootloader_jump_to_user_app+0x48>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	60fb      	str	r3, [r7, #12]
    printmsg("BL_DEBUG_MSG: MSP value : %#x\r\n",msp_value);
 800069e:	68f9      	ldr	r1, [r7, #12]
 80006a0:	480d      	ldr	r0, [pc, #52]	; (80006d8 <bootloader_jump_to_user_app+0x4c>)
 80006a2:	f001 f8e1 	bl	8001868 <printmsg>
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	f383 8808 	msr	MSP, r3
}
 80006b0:	bf00      	nop
    __set_MSP(msp_value);

    /* 2. Now fetch the reset handler address of the USER Application
     * from the location FLASH_SECTOR2_BASE + 4
     */
    uint32_t resethandler_address = *(volatile uint32_t *) (FLASH_SECTOR2_BASE + 4);
 80006b2:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <bootloader_jump_to_user_app+0x50>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	60bb      	str	r3, [r7, #8]

    app_reset_handler = (void*) resethandler_address;
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	607b      	str	r3, [r7, #4]

    printmsg("BL_DEBUG_MSG: USER Application Reset Handler Address : %#x\r\n", app_reset_handler);
 80006bc:	6879      	ldr	r1, [r7, #4]
 80006be:	4808      	ldr	r0, [pc, #32]	; (80006e0 <bootloader_jump_to_user_app+0x54>)
 80006c0:	f001 f8d2 	bl	8001868 <printmsg>

    //3. Jump to reset handler of the user application
    app_reset_handler();
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4798      	blx	r3

}
 80006c8:	bf00      	nop
 80006ca:	3710      	adds	r7, #16
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	0800432c 	.word	0x0800432c
 80006d4:	08008000 	.word	0x08008000
 80006d8:	08004358 	.word	0x08004358
 80006dc:	08008004 	.word	0x08008004
 80006e0:	08004378 	.word	0x08004378

080006e4 <bootloader_handle_getver_cmd>:

/************** Implementation of Boot-loader Command Handle functions *********/

/* Helper function to handle BL_GET_VER command */
void bootloader_handle_getver_cmd(uint8_t *pBuffer)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b086      	sub	sp, #24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	uint8_t bl_version;

	// 1) Verify the checksum
	printmsg("BL_DEBUG_MSG: bootloader_handle_getver_cmd\r\n");
 80006ec:	481f      	ldr	r0, [pc, #124]	; (800076c <bootloader_handle_getver_cmd+0x88>)
 80006ee:	f001 f8bb 	bl	8001868 <printmsg>

	// Total length of the command packet
	uint32_t command_packet_len = pBuffer[0] + 1 ;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	3301      	adds	r3, #1
 80006f8:	617b      	str	r3, [r7, #20]

	// Extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (pBuffer + command_packet_len - 4) ) ;
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	3b04      	subs	r3, #4
 80006fe:	687a      	ldr	r2, [r7, #4]
 8000700:	4413      	add	r3, r2
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&pBuffer[0], command_packet_len - 4, host_crc))
 8000706:	697b      	ldr	r3, [r7, #20]
 8000708:	3b04      	subs	r3, #4
 800070a:	693a      	ldr	r2, [r7, #16]
 800070c:	4619      	mov	r1, r3
 800070e:	6878      	ldr	r0, [r7, #4]
 8000710:	f000 fb78 	bl	8000e04 <bootloader_verify_crc>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d11e      	bne.n	8000758 <bootloader_handle_getver_cmd+0x74>
	{
		printmsg("BL_DEBUG_MSG: Checksum success !!\r\n");
 800071a:	4815      	ldr	r0, [pc, #84]	; (8000770 <bootloader_handle_getver_cmd+0x8c>)
 800071c:	f001 f8a4 	bl	8001868 <printmsg>
		// Checksum is correct..
		uint8_t follow_len = 1;
 8000720:	2301      	movs	r3, #1
 8000722:	73fb      	strb	r3, [r7, #15]
		bootloader_send_ack(pBuffer[0], follow_len);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	7bfa      	ldrb	r2, [r7, #15]
 800072a:	4611      	mov	r1, r2
 800072c:	4618      	mov	r0, r3
 800072e:	f000 fb3d 	bl	8000dac <bootloader_send_ack>
		bl_version = get_bootloader_version();
 8000732:	f000 fbaf 	bl	8000e94 <get_bootloader_version>
 8000736:	4603      	mov	r3, r0
 8000738:	73bb      	strb	r3, [r7, #14]
		printmsg("BL_DEBUG_MSG: BL_VER : %d %#x\r\n", bl_version, bl_version);
 800073a:	7bbb      	ldrb	r3, [r7, #14]
 800073c:	4619      	mov	r1, r3
 800073e:	7bbb      	ldrb	r3, [r7, #14]
 8000740:	461a      	mov	r2, r3
 8000742:	480c      	ldr	r0, [pc, #48]	; (8000774 <bootloader_handle_getver_cmd+0x90>)
 8000744:	f001 f890 	bl	8001868 <printmsg>
		bootloader_uart_write_data(&bl_version, follow_len);
 8000748:	7bfa      	ldrb	r2, [r7, #15]
 800074a:	f107 030e 	add.w	r3, r7, #14
 800074e:	4611      	mov	r1, r2
 8000750:	4618      	mov	r0, r3
 8000752:	f000 fb8b 	bl	8000e6c <bootloader_uart_write_data>
		// Checksum is wrong send nack
		bootloader_send_nack();
	}


}
 8000756:	e004      	b.n	8000762 <bootloader_handle_getver_cmd+0x7e>
		printmsg("BL_DEBUG_MSG: Checksum fail !!\r\n");
 8000758:	4807      	ldr	r0, [pc, #28]	; (8000778 <bootloader_handle_getver_cmd+0x94>)
 800075a:	f001 f885 	bl	8001868 <printmsg>
		bootloader_send_nack();
 800075e:	f000 fb3f 	bl	8000de0 <bootloader_send_nack>
}
 8000762:	bf00      	nop
 8000764:	3718      	adds	r7, #24
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	080043b8 	.word	0x080043b8
 8000770:	080043e8 	.word	0x080043e8
 8000774:	0800440c 	.word	0x0800440c
 8000778:	0800442c 	.word	0x0800442c

0800077c <bootloader_handle_gethelp_cmd>:

/* Helper function to handle BL_GET_HELP command
 * Bootloader sends out All supported Command codes
 */
void bootloader_handle_gethelp_cmd(uint8_t *pBuffer)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
    printmsg("BL_DEBUG_MSG: bootloader_handle_gethelp_cmd\r\n");
 8000784:	4816      	ldr	r0, [pc, #88]	; (80007e0 <bootloader_handle_gethelp_cmd+0x64>)
 8000786:	f001 f86f 	bl	8001868 <printmsg>

	// Total length of the command packet
	uint32_t command_packet_len = pBuffer[0] + 1;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	3301      	adds	r3, #1
 8000790:	60fb      	str	r3, [r7, #12]

	// Extract the CRC32 sent by the Host
	uint32_t host_crc = *( (uint32_t *)(pBuffer + command_packet_len - 4) );
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	3b04      	subs	r3, #4
 8000796:	687a      	ldr	r2, [r7, #4]
 8000798:	4413      	add	r3, r2
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	60bb      	str	r3, [r7, #8]

	if (! bootloader_verify_crc(&pBuffer[0], command_packet_len - 4, host_crc) )
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	3b04      	subs	r3, #4
 80007a2:	68ba      	ldr	r2, [r7, #8]
 80007a4:	4619      	mov	r1, r3
 80007a6:	6878      	ldr	r0, [r7, #4]
 80007a8:	f000 fb2c 	bl	8000e04 <bootloader_verify_crc>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d10d      	bne.n	80007ce <bootloader_handle_gethelp_cmd+0x52>
	{
        printmsg("BL_DEBUG_MSG: Checksum success !!\r\n");
 80007b2:	480c      	ldr	r0, [pc, #48]	; (80007e4 <bootloader_handle_gethelp_cmd+0x68>)
 80007b4:	f001 f858 	bl	8001868 <printmsg>
        bootloader_send_ack(pBuffer[0], sizeof(supported_commands));
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	2108      	movs	r1, #8
 80007be:	4618      	mov	r0, r3
 80007c0:	f000 faf4 	bl	8000dac <bootloader_send_ack>
        bootloader_uart_write_data(supported_commands, sizeof(supported_commands));
 80007c4:	2108      	movs	r1, #8
 80007c6:	4808      	ldr	r0, [pc, #32]	; (80007e8 <bootloader_handle_gethelp_cmd+0x6c>)
 80007c8:	f000 fb50 	bl	8000e6c <bootloader_uart_write_data>
	{
        printmsg("BL_DEBUG_MSG: Checksum fail !!\r\n");
        bootloader_send_nack();
	}

}
 80007cc:	e004      	b.n	80007d8 <bootloader_handle_gethelp_cmd+0x5c>
        printmsg("BL_DEBUG_MSG: Checksum fail !!\r\n");
 80007ce:	4807      	ldr	r0, [pc, #28]	; (80007ec <bootloader_handle_gethelp_cmd+0x70>)
 80007d0:	f001 f84a 	bl	8001868 <printmsg>
        bootloader_send_nack();
 80007d4:	f000 fb04 	bl	8000de0 <bootloader_send_nack>
}
 80007d8:	bf00      	nop
 80007da:	3710      	adds	r7, #16
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	08004450 	.word	0x08004450
 80007e4:	080043e8 	.word	0x080043e8
 80007e8:	20000000 	.word	0x20000000
 80007ec:	0800442c 	.word	0x0800442c

080007f0 <bootloader_handle_getcid_cmd>:

/* Helper function to handle BL_GET_CID command */
void bootloader_handle_getcid_cmd(uint8_t *pBuffer)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b086      	sub	sp, #24
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	uint16_t bl_cid_num = 0;
 80007f8:	2300      	movs	r3, #0
 80007fa:	81bb      	strh	r3, [r7, #12]
	printmsg("BL_DEBUG_MSG: bootloader_handle_getcid_cmd\r\n");
 80007fc:	481f      	ldr	r0, [pc, #124]	; (800087c <bootloader_handle_getcid_cmd+0x8c>)
 80007fe:	f001 f833 	bl	8001868 <printmsg>

    // Total length of the command packet
	uint32_t command_packet_len = pBuffer[0] + 1 ;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	3301      	adds	r3, #1
 8000808:	617b      	str	r3, [r7, #20]

	// Extract the CRC32 sent by the Host
	uint32_t host_crc = *( (uint32_t *) (pBuffer + command_packet_len - 4));
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	3b04      	subs	r3, #4
 800080e:	687a      	ldr	r2, [r7, #4]
 8000810:	4413      	add	r3, r2
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&pBuffer[0], command_packet_len - 4, host_crc) )
 8000816:	697b      	ldr	r3, [r7, #20]
 8000818:	3b04      	subs	r3, #4
 800081a:	693a      	ldr	r2, [r7, #16]
 800081c:	4619      	mov	r1, r3
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f000 faf0 	bl	8000e04 <bootloader_verify_crc>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d11e      	bne.n	8000868 <bootloader_handle_getcid_cmd+0x78>
	{
        printmsg("BL_DEBUG_MSG: Checksum success !!\r\n");
 800082a:	4815      	ldr	r0, [pc, #84]	; (8000880 <bootloader_handle_getcid_cmd+0x90>)
 800082c:	f001 f81c 	bl	8001868 <printmsg>
        uint8_t follow_len = 2;
 8000830:	2302      	movs	r3, #2
 8000832:	73fb      	strb	r3, [r7, #15]
        bootloader_send_ack(pBuffer[0], follow_len);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	7bfa      	ldrb	r2, [r7, #15]
 800083a:	4611      	mov	r1, r2
 800083c:	4618      	mov	r0, r3
 800083e:	f000 fab5 	bl	8000dac <bootloader_send_ack>
        bl_cid_num = get_mcu_chip_id();
 8000842:	f000 fb2f 	bl	8000ea4 <get_mcu_chip_id>
 8000846:	4603      	mov	r3, r0
 8000848:	81bb      	strh	r3, [r7, #12]
        printmsg("BL_DEBUG_MSG: MCU ID = %d %#x !!\r\n", bl_cid_num, bl_cid_num);
 800084a:	89bb      	ldrh	r3, [r7, #12]
 800084c:	4619      	mov	r1, r3
 800084e:	89bb      	ldrh	r3, [r7, #12]
 8000850:	461a      	mov	r2, r3
 8000852:	480c      	ldr	r0, [pc, #48]	; (8000884 <bootloader_handle_getcid_cmd+0x94>)
 8000854:	f001 f808 	bl	8001868 <printmsg>
        bootloader_uart_write_data((uint8_t *)&bl_cid_num, follow_len);
 8000858:	7bfa      	ldrb	r2, [r7, #15]
 800085a:	f107 030c 	add.w	r3, r7, #12
 800085e:	4611      	mov	r1, r2
 8000860:	4618      	mov	r0, r3
 8000862:	f000 fb03 	bl	8000e6c <bootloader_uart_write_data>
        printmsg("BL_DEBUG_MSG: Checksum fail !!\r\n");
        bootloader_send_nack();
	}


}
 8000866:	e004      	b.n	8000872 <bootloader_handle_getcid_cmd+0x82>
        printmsg("BL_DEBUG_MSG: Checksum fail !!\r\n");
 8000868:	4807      	ldr	r0, [pc, #28]	; (8000888 <bootloader_handle_getcid_cmd+0x98>)
 800086a:	f000 fffd 	bl	8001868 <printmsg>
        bootloader_send_nack();
 800086e:	f000 fab7 	bl	8000de0 <bootloader_send_nack>
}
 8000872:	bf00      	nop
 8000874:	3718      	adds	r7, #24
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	08004480 	.word	0x08004480
 8000880:	080043e8 	.word	0x080043e8
 8000884:	080044b0 	.word	0x080044b0
 8000888:	0800442c 	.word	0x0800442c

0800088c <bootloader_handle_getrdp_cmd>:

/* Helper function to handle BL_GET_RDP_STATUS command */
void bootloader_handle_getrdp_cmd(uint8_t *pBuffer)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
    uint8_t rdp_level = 0x00;
 8000894:	2300      	movs	r3, #0
 8000896:	73bb      	strb	r3, [r7, #14]
    printmsg("BL_DEBUG_MSG: bootloader_handle_getrdp_cmd\r\n");
 8000898:	481f      	ldr	r0, [pc, #124]	; (8000918 <bootloader_handle_getrdp_cmd+0x8c>)
 800089a:	f000 ffe5 	bl	8001868 <printmsg>

    // Total length of the command packet
	uint32_t command_packet_len = pBuffer[0] + 1 ;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	3301      	adds	r3, #1
 80008a4:	617b      	str	r3, [r7, #20]

	// Extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (pBuffer + command_packet_len - 4) ) ;
 80008a6:	697b      	ldr	r3, [r7, #20]
 80008a8:	3b04      	subs	r3, #4
 80008aa:	687a      	ldr	r2, [r7, #4]
 80008ac:	4413      	add	r3, r2
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&pBuffer[0], command_packet_len - 4, host_crc))
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	3b04      	subs	r3, #4
 80008b6:	693a      	ldr	r2, [r7, #16]
 80008b8:	4619      	mov	r1, r3
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f000 faa2 	bl	8000e04 <bootloader_verify_crc>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d11e      	bne.n	8000904 <bootloader_handle_getrdp_cmd+0x78>
	{
        printmsg("BL_DEBUG_MSG: Checksum success !!\r\n");
 80008c6:	4815      	ldr	r0, [pc, #84]	; (800091c <bootloader_handle_getrdp_cmd+0x90>)
 80008c8:	f000 ffce 	bl	8001868 <printmsg>
        uint8_t follow_len = 1;
 80008cc:	2301      	movs	r3, #1
 80008ce:	73fb      	strb	r3, [r7, #15]
        bootloader_send_ack(pBuffer[0], follow_len);
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	7bfa      	ldrb	r2, [r7, #15]
 80008d6:	4611      	mov	r1, r2
 80008d8:	4618      	mov	r0, r3
 80008da:	f000 fa67 	bl	8000dac <bootloader_send_ack>
        rdp_level = get_flash_rdp_level();
 80008de:	f000 faf3 	bl	8000ec8 <get_flash_rdp_level>
 80008e2:	4603      	mov	r3, r0
 80008e4:	73bb      	strb	r3, [r7, #14]
        printmsg("BL_DEBUG_MSG: RDP level: %d %#x\r\n", rdp_level, rdp_level);
 80008e6:	7bbb      	ldrb	r3, [r7, #14]
 80008e8:	4619      	mov	r1, r3
 80008ea:	7bbb      	ldrb	r3, [r7, #14]
 80008ec:	461a      	mov	r2, r3
 80008ee:	480c      	ldr	r0, [pc, #48]	; (8000920 <bootloader_handle_getrdp_cmd+0x94>)
 80008f0:	f000 ffba 	bl	8001868 <printmsg>
        bootloader_uart_write_data(&rdp_level, follow_len);
 80008f4:	7bfa      	ldrb	r2, [r7, #15]
 80008f6:	f107 030e 	add.w	r3, r7, #14
 80008fa:	4611      	mov	r1, r2
 80008fc:	4618      	mov	r0, r3
 80008fe:	f000 fab5 	bl	8000e6c <bootloader_uart_write_data>
        printmsg("BL_DEBUG_MSG: Checksum fail !!\r\n");
        bootloader_send_nack();
	}


}
 8000902:	e004      	b.n	800090e <bootloader_handle_getrdp_cmd+0x82>
        printmsg("BL_DEBUG_MSG: Checksum fail !!\r\n");
 8000904:	4807      	ldr	r0, [pc, #28]	; (8000924 <bootloader_handle_getrdp_cmd+0x98>)
 8000906:	f000 ffaf 	bl	8001868 <printmsg>
        bootloader_send_nack();
 800090a:	f000 fa69 	bl	8000de0 <bootloader_send_nack>
}
 800090e:	bf00      	nop
 8000910:	3718      	adds	r7, #24
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	080044d4 	.word	0x080044d4
 800091c:	080043e8 	.word	0x080043e8
 8000920:	08004504 	.word	0x08004504
 8000924:	0800442c 	.word	0x0800442c

08000928 <bootloader_handle_go_cmd>:

/* Helper function to handle BL_GO_TO_ADDR command */
void bootloader_handle_go_cmd(uint8_t *pBuffer)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b088      	sub	sp, #32
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
    uint32_t go_address = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	61fb      	str	r3, [r7, #28]
    uint8_t addr_valid = ADDR_VALID;
 8000934:	2300      	movs	r3, #0
 8000936:	73fb      	strb	r3, [r7, #15]
    uint8_t addr_invalid = ADDR_INVALID;
 8000938:	2301      	movs	r3, #1
 800093a:	73bb      	strb	r3, [r7, #14]

    printmsg("BL_DEBUG_MSG: bootloader_handle_go_cmd\r\n");
 800093c:	4828      	ldr	r0, [pc, #160]	; (80009e0 <bootloader_handle_go_cmd+0xb8>)
 800093e:	f000 ff93 	bl	8001868 <printmsg>

    // Total length of the command packet
	uint32_t command_packet_len = pBuffer[0] + 1 ;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	3301      	adds	r3, #1
 8000948:	61bb      	str	r3, [r7, #24]

	// Extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (pBuffer + command_packet_len - 4) ) ;
 800094a:	69bb      	ldr	r3, [r7, #24]
 800094c:	3b04      	subs	r3, #4
 800094e:	687a      	ldr	r2, [r7, #4]
 8000950:	4413      	add	r3, r2
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	617b      	str	r3, [r7, #20]

	if (! bootloader_verify_crc(&pBuffer[0], command_packet_len - 4, host_crc))
 8000956:	69bb      	ldr	r3, [r7, #24]
 8000958:	3b04      	subs	r3, #4
 800095a:	697a      	ldr	r2, [r7, #20]
 800095c:	4619      	mov	r1, r3
 800095e:	6878      	ldr	r0, [r7, #4]
 8000960:	f000 fa50 	bl	8000e04 <bootloader_verify_crc>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d131      	bne.n	80009ce <bootloader_handle_go_cmd+0xa6>
	{
        printmsg("BL_DEBUG_MSG: checksum success !!\r\n");
 800096a:	481e      	ldr	r0, [pc, #120]	; (80009e4 <bootloader_handle_go_cmd+0xbc>)
 800096c:	f000 ff7c 	bl	8001868 <printmsg>

        bootloader_send_ack(pBuffer[0], 1);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	2101      	movs	r1, #1
 8000976:	4618      	mov	r0, r3
 8000978:	f000 fa18 	bl	8000dac <bootloader_send_ack>

        // Extract the go address
        go_address = *((uint32_t *)&pBuffer[2] );
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000982:	61fb      	str	r3, [r7, #28]
        printmsg("BL_DEBUG_MSG: GO Address: %#x\r\n", go_address);
 8000984:	69f9      	ldr	r1, [r7, #28]
 8000986:	4818      	ldr	r0, [pc, #96]	; (80009e8 <bootloader_handle_go_cmd+0xc0>)
 8000988:	f000 ff6e 	bl	8001868 <printmsg>

        if( verify_address(go_address) == ADDR_VALID )
 800098c:	69f8      	ldr	r0, [r7, #28]
 800098e:	f000 faab 	bl	8000ee8 <verify_address>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d110      	bne.n	80009ba <bootloader_handle_go_cmd+0x92>
        {
            // Tell host that address is fine
            bootloader_uart_write_data(&addr_valid, 1);
 8000998:	f107 030f 	add.w	r3, r7, #15
 800099c:	2101      	movs	r1, #1
 800099e:	4618      	mov	r0, r3
 80009a0:	f000 fa64 	bl	8000e6c <bootloader_uart_write_data>
            Its not the duty of Bootloader. so just trust and jump */

            /* Not doing the below line will result in hardfault exception for ARM cortex M */
            // Watch : https://www.youtube.com/watch?v=VX_12SjnNhY

            go_address += 1; // Make T bit = 1
 80009a4:	69fb      	ldr	r3, [r7, #28]
 80009a6:	3301      	adds	r3, #1
 80009a8:	61fb      	str	r3, [r7, #28]

            void (*lets_jump)(void) = (void *)go_address;
 80009aa:	69fb      	ldr	r3, [r7, #28]
 80009ac:	613b      	str	r3, [r7, #16]

            printmsg("BL_DEBUG_MSG: Jumping to go address!\r\n");
 80009ae:	480f      	ldr	r0, [pc, #60]	; (80009ec <bootloader_handle_go_cmd+0xc4>)
 80009b0:	f000 ff5a 	bl	8001868 <printmsg>

            lets_jump();
 80009b4:	693b      	ldr	r3, [r7, #16]
 80009b6:	4798      	blx	r3
        printmsg("BL_DEBUG_MSG: Checksum fail !!\r\n");
        bootloader_send_nack();
	}


}
 80009b8:	e00e      	b.n	80009d8 <bootloader_handle_go_cmd+0xb0>
            printmsg("BL_DEBUG_MSG: GO Address invalid !\r\n");
 80009ba:	480d      	ldr	r0, [pc, #52]	; (80009f0 <bootloader_handle_go_cmd+0xc8>)
 80009bc:	f000 ff54 	bl	8001868 <printmsg>
            bootloader_uart_write_data(&addr_invalid, 1);
 80009c0:	f107 030e 	add.w	r3, r7, #14
 80009c4:	2101      	movs	r1, #1
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 fa50 	bl	8000e6c <bootloader_uart_write_data>
}
 80009cc:	e004      	b.n	80009d8 <bootloader_handle_go_cmd+0xb0>
        printmsg("BL_DEBUG_MSG: Checksum fail !!\r\n");
 80009ce:	4809      	ldr	r0, [pc, #36]	; (80009f4 <bootloader_handle_go_cmd+0xcc>)
 80009d0:	f000 ff4a 	bl	8001868 <printmsg>
        bootloader_send_nack();
 80009d4:	f000 fa04 	bl	8000de0 <bootloader_send_nack>
}
 80009d8:	bf00      	nop
 80009da:	3720      	adds	r7, #32
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	08004528 	.word	0x08004528
 80009e4:	08004554 	.word	0x08004554
 80009e8:	08004578 	.word	0x08004578
 80009ec:	08004598 	.word	0x08004598
 80009f0:	080045c0 	.word	0x080045c0
 80009f4:	0800442c 	.word	0x0800442c

080009f8 <bootloader_handle_flash_erase_cmd>:

/* Helper function to handle BL_FLASH_ERASE command */
void bootloader_handle_flash_erase_cmd(uint8_t *pBuffer)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
    uint8_t erase_status = 0x00;
 8000a00:	2300      	movs	r3, #0
 8000a02:	73fb      	strb	r3, [r7, #15]
    printmsg("BL_DEBUG_MSG: bootloader_handle_flash_erase_cmd\r\n");
 8000a04:	482b      	ldr	r0, [pc, #172]	; (8000ab4 <bootloader_handle_flash_erase_cmd+0xbc>)
 8000a06:	f000 ff2f 	bl	8001868 <printmsg>

    // Total length of the command packet
	uint32_t command_packet_len = pBuffer[0] + 1 ;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	617b      	str	r3, [r7, #20]

	// Extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (pBuffer + command_packet_len - 4) ) ;
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	3b04      	subs	r3, #4
 8000a16:	687a      	ldr	r2, [r7, #4]
 8000a18:	4413      	add	r3, r2
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&pBuffer[0],command_packet_len - 4, host_crc))
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	3b04      	subs	r3, #4
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	4619      	mov	r1, r3
 8000a26:	6878      	ldr	r0, [r7, #4]
 8000a28:	f000 f9ec 	bl	8000e04 <bootloader_verify_crc>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d137      	bne.n	8000aa2 <bootloader_handle_flash_erase_cmd+0xaa>
	{
        printmsg("BL_DEBUG_MSG: Checksum success !!\r\n");
 8000a32:	4821      	ldr	r0, [pc, #132]	; (8000ab8 <bootloader_handle_flash_erase_cmd+0xc0>)
 8000a34:	f000 ff18 	bl	8001868 <printmsg>
        bootloader_send_ack(pBuffer[0], 1);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f000 f9b4 	bl	8000dac <bootloader_send_ack>
        printmsg("BL_DEBUG_MSG: Initial_sector : %d  no_ofsectors: %d\r\n", pBuffer[2], pBuffer[3]);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	3302      	adds	r3, #2
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	3303      	adds	r3, #3
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	461a      	mov	r2, r3
 8000a54:	4819      	ldr	r0, [pc, #100]	; (8000abc <bootloader_handle_flash_erase_cmd+0xc4>)
 8000a56:	f000 ff07 	bl	8001868 <printmsg>

        HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a60:	4817      	ldr	r0, [pc, #92]	; (8000ac0 <bootloader_handle_flash_erase_cmd+0xc8>)
 8000a62:	f001 ff93 	bl	800298c <HAL_GPIO_WritePin>
        erase_status = execute_flash_erase(pBuffer[2], pBuffer[3]);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	3302      	adds	r3, #2
 8000a6a:	781a      	ldrb	r2, [r3, #0]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	3303      	adds	r3, #3
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	4619      	mov	r1, r3
 8000a74:	4610      	mov	r0, r2
 8000a76:	f000 fa7f 	bl	8000f78 <execute_flash_erase>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	73fb      	strb	r3, [r7, #15]
        HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a84:	480e      	ldr	r0, [pc, #56]	; (8000ac0 <bootloader_handle_flash_erase_cmd+0xc8>)
 8000a86:	f001 ff81 	bl	800298c <HAL_GPIO_WritePin>

        printmsg("BL_DEBUG_MSG: Flash erase status: %#x\r\n", erase_status);
 8000a8a:	7bfb      	ldrb	r3, [r7, #15]
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	480d      	ldr	r0, [pc, #52]	; (8000ac4 <bootloader_handle_flash_erase_cmd+0xcc>)
 8000a90:	f000 feea 	bl	8001868 <printmsg>

        bootloader_uart_write_data(&erase_status, 1);
 8000a94:	f107 030f 	add.w	r3, r7, #15
 8000a98:	2101      	movs	r1, #1
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f000 f9e6 	bl	8000e6c <bootloader_uart_write_data>
	}else
	{
        printmsg("BL_DEBUG_MSG: Checksum fail !!\r\n");
        bootloader_send_nack();
	}
}
 8000aa0:	e004      	b.n	8000aac <bootloader_handle_flash_erase_cmd+0xb4>
        printmsg("BL_DEBUG_MSG: Checksum fail !!\r\n");
 8000aa2:	4809      	ldr	r0, [pc, #36]	; (8000ac8 <bootloader_handle_flash_erase_cmd+0xd0>)
 8000aa4:	f000 fee0 	bl	8001868 <printmsg>
        bootloader_send_nack();
 8000aa8:	f000 f99a 	bl	8000de0 <bootloader_send_nack>
}
 8000aac:	bf00      	nop
 8000aae:	3718      	adds	r7, #24
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	080045e8 	.word	0x080045e8
 8000ab8:	080043e8 	.word	0x080043e8
 8000abc:	0800461c 	.word	0x0800461c
 8000ac0:	40021800 	.word	0x40021800
 8000ac4:	08004654 	.word	0x08004654
 8000ac8:	0800442c 	.word	0x0800442c

08000acc <bootloader_handle_mem_write_cmd>:

/* Helper function to handle BL_MEM_WRITE command */
void bootloader_handle_mem_write_cmd(uint8_t *pBuffer)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b088      	sub	sp, #32
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
	uint8_t write_status = 0x00;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	73fb      	strb	r3, [r7, #15]
	uint8_t payload_len = pBuffer[6];
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	799b      	ldrb	r3, [r3, #6]
 8000adc:	77fb      	strb	r3, [r7, #31]

	uint32_t mem_address = *((uint32_t *) (&pBuffer[2]) );
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000ae4:	61bb      	str	r3, [r7, #24]
    printmsg("BL_DEBUG_MSG: bootloader_handle_mem_write_cmd\r\n");
 8000ae6:	482f      	ldr	r0, [pc, #188]	; (8000ba4 <bootloader_handle_mem_write_cmd+0xd8>)
 8000ae8:	f000 febe 	bl	8001868 <printmsg>

    // Total length of the command packet
	uint32_t command_packet_len = pBuffer[0] + 1;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	3301      	adds	r3, #1
 8000af2:	617b      	str	r3, [r7, #20]

	// Extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (pBuffer + command_packet_len - 4) ) ;
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	3b04      	subs	r3, #4
 8000af8:	687a      	ldr	r2, [r7, #4]
 8000afa:	4413      	add	r3, r2
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	613b      	str	r3, [r7, #16]


	if (! bootloader_verify_crc(&pBuffer[0], command_packet_len - 4, host_crc))
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	3b04      	subs	r3, #4
 8000b04:	693a      	ldr	r2, [r7, #16]
 8000b06:	4619      	mov	r1, r3
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	f000 f97b 	bl	8000e04 <bootloader_verify_crc>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d13d      	bne.n	8000b90 <bootloader_handle_mem_write_cmd+0xc4>
	{
        printmsg("BL_DEBUG_MSG: Checksum success !!\r\n");
 8000b14:	4824      	ldr	r0, [pc, #144]	; (8000ba8 <bootloader_handle_mem_write_cmd+0xdc>)
 8000b16:	f000 fea7 	bl	8001868 <printmsg>

        bootloader_send_ack(pBuffer[0], 1);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	2101      	movs	r1, #1
 8000b20:	4618      	mov	r0, r3
 8000b22:	f000 f943 	bl	8000dac <bootloader_send_ack>

        printmsg("BL_DEBUG_MSG: Memory write Address : %\r\n",mem_address);
 8000b26:	69b9      	ldr	r1, [r7, #24]
 8000b28:	4820      	ldr	r0, [pc, #128]	; (8000bac <bootloader_handle_mem_write_cmd+0xe0>)
 8000b2a:	f000 fe9d 	bl	8001868 <printmsg>

		if( verify_address(mem_address) == ADDR_VALID )
 8000b2e:	69b8      	ldr	r0, [r7, #24]
 8000b30:	f000 f9da 	bl	8000ee8 <verify_address>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d11e      	bne.n	8000b78 <bootloader_handle_mem_write_cmd+0xac>
		{

            printmsg("BL_DEBUG_MSG: Valid Memory write Address\r\n");
 8000b3a:	481d      	ldr	r0, [pc, #116]	; (8000bb0 <bootloader_handle_mem_write_cmd+0xe4>)
 8000b3c:	f000 fe94 	bl	8001868 <printmsg>

            // Glow the led to indicate Bootloader is currently writing to memory
            HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 8000b40:	2201      	movs	r2, #1
 8000b42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b46:	481b      	ldr	r0, [pc, #108]	; (8000bb4 <bootloader_handle_mem_write_cmd+0xe8>)
 8000b48:	f001 ff20 	bl	800298c <HAL_GPIO_WritePin>

            // Execute Memory write
            write_status = execute_mem_write(&pBuffer[7], mem_address, payload_len);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	3307      	adds	r3, #7
 8000b50:	7ffa      	ldrb	r2, [r7, #31]
 8000b52:	69b9      	ldr	r1, [r7, #24]
 8000b54:	4618      	mov	r0, r3
 8000b56:	f000 fa56 	bl	8001006 <execute_mem_write>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	73fb      	strb	r3, [r7, #15]

            // Turn off the led to indicate memory write is over
            HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b64:	4813      	ldr	r0, [pc, #76]	; (8000bb4 <bootloader_handle_mem_write_cmd+0xe8>)
 8000b66:	f001 ff11 	bl	800298c <HAL_GPIO_WritePin>

            // Inform host about the status
            bootloader_uart_write_data(&write_status, 1);
 8000b6a:	f107 030f 	add.w	r3, r7, #15
 8000b6e:	2101      	movs	r1, #1
 8000b70:	4618      	mov	r0, r3
 8000b72:	f000 f97b 	bl	8000e6c <bootloader_uart_write_data>
	{
        printmsg("BL_DEBUG_MSG: Checksum fail !!\r\n");
        bootloader_send_nack();
	}

}
 8000b76:	e010      	b.n	8000b9a <bootloader_handle_mem_write_cmd+0xce>
            printmsg("BL_DEBUG_MSG: Invalid Memory write Address\r\n");
 8000b78:	480f      	ldr	r0, [pc, #60]	; (8000bb8 <bootloader_handle_mem_write_cmd+0xec>)
 8000b7a:	f000 fe75 	bl	8001868 <printmsg>
            write_status = ADDR_INVALID;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	73fb      	strb	r3, [r7, #15]
            bootloader_uart_write_data(&write_status, 1);
 8000b82:	f107 030f 	add.w	r3, r7, #15
 8000b86:	2101      	movs	r1, #1
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f000 f96f 	bl	8000e6c <bootloader_uart_write_data>
}
 8000b8e:	e004      	b.n	8000b9a <bootloader_handle_mem_write_cmd+0xce>
        printmsg("BL_DEBUG_MSG: Checksum fail !!\r\n");
 8000b90:	480a      	ldr	r0, [pc, #40]	; (8000bbc <bootloader_handle_mem_write_cmd+0xf0>)
 8000b92:	f000 fe69 	bl	8001868 <printmsg>
        bootloader_send_nack();
 8000b96:	f000 f923 	bl	8000de0 <bootloader_send_nack>
}
 8000b9a:	bf00      	nop
 8000b9c:	3720      	adds	r7, #32
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	0800467c 	.word	0x0800467c
 8000ba8:	080043e8 	.word	0x080043e8
 8000bac:	080046ac 	.word	0x080046ac
 8000bb0:	080046d8 	.word	0x080046d8
 8000bb4:	40021800 	.word	0x40021800
 8000bb8:	08004704 	.word	0x08004704
 8000bbc:	0800442c 	.word	0x0800442c

08000bc0 <bootloader_handle_en_rw_protect>:

/* Helper function to handle BL_EN_RW_PROTECT  command */
void bootloader_handle_en_rw_protect(uint8_t *pBuffer)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x00;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	73fb      	strb	r3, [r7, #15]
    printmsg("BL_DEBUG_MSG: bootloader_handle_endis_rw_protect\r\n");
 8000bcc:	4820      	ldr	r0, [pc, #128]	; (8000c50 <bootloader_handle_en_rw_protect+0x90>)
 8000bce:	f000 fe4b 	bl	8001868 <printmsg>

    // Total length of the command packet
	uint32_t command_packet_len = pBuffer[0] + 1 ;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	617b      	str	r3, [r7, #20]

	// Extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (pBuffer + command_packet_len - 4) ) ;
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	3b04      	subs	r3, #4
 8000bde:	687a      	ldr	r2, [r7, #4]
 8000be0:	4413      	add	r3, r2
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&pBuffer[0], command_packet_len - 4, host_crc))
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	3b04      	subs	r3, #4
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	4619      	mov	r1, r3
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f000 f908 	bl	8000e04 <bootloader_verify_crc>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d120      	bne.n	8000c3c <bootloader_handle_en_rw_protect+0x7c>
	{
        printmsg("BL_DEBUG_MSG: Checksum success !!\r\n");
 8000bfa:	4816      	ldr	r0, [pc, #88]	; (8000c54 <bootloader_handle_en_rw_protect+0x94>)
 8000bfc:	f000 fe34 	bl	8001868 <printmsg>
        bootloader_send_ack(pBuffer[0], 1);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	2101      	movs	r1, #1
 8000c06:	4618      	mov	r0, r3
 8000c08:	f000 f8d0 	bl	8000dac <bootloader_send_ack>

        status = configure_flash_sector_rw_protection(*(uint16_t*)&pBuffer[2], pBuffer[4], 0);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	3302      	adds	r3, #2
 8000c10:	8818      	ldrh	r0, [r3, #0]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	3304      	adds	r3, #4
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2200      	movs	r2, #0
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	f000 fa1e 	bl	800105c <configure_flash_sector_rw_protection>
 8000c20:	4603      	mov	r3, r0
 8000c22:	73fb      	strb	r3, [r7, #15]

        printmsg("BL_DEBUG_MSG: Flash erase status: %#x\r\n",status);
 8000c24:	7bfb      	ldrb	r3, [r7, #15]
 8000c26:	4619      	mov	r1, r3
 8000c28:	480b      	ldr	r0, [pc, #44]	; (8000c58 <bootloader_handle_en_rw_protect+0x98>)
 8000c2a:	f000 fe1d 	bl	8001868 <printmsg>

        bootloader_uart_write_data(&status, 1);
 8000c2e:	f107 030f 	add.w	r3, r7, #15
 8000c32:	2101      	movs	r1, #1
 8000c34:	4618      	mov	r0, r3
 8000c36:	f000 f919 	bl	8000e6c <bootloader_uart_write_data>
        printmsg("BL_DEBUG_MSG: Checksum fail !!\r\n");
        bootloader_send_nack();
	}


}
 8000c3a:	e004      	b.n	8000c46 <bootloader_handle_en_rw_protect+0x86>
        printmsg("BL_DEBUG_MSG: Checksum fail !!\r\n");
 8000c3c:	4807      	ldr	r0, [pc, #28]	; (8000c5c <bootloader_handle_en_rw_protect+0x9c>)
 8000c3e:	f000 fe13 	bl	8001868 <printmsg>
        bootloader_send_nack();
 8000c42:	f000 f8cd 	bl	8000de0 <bootloader_send_nack>
}
 8000c46:	bf00      	nop
 8000c48:	3718      	adds	r7, #24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	08004734 	.word	0x08004734
 8000c54:	080043e8 	.word	0x080043e8
 8000c58:	08004654 	.word	0x08004654
 8000c5c:	0800442c 	.word	0x0800442c

08000c60 <bootloader_handle_dis_rw_protect>:


/*Helper function to handle BL_EN_RW_PROTECT  command */
void bootloader_handle_dis_rw_protect(uint8_t *pBuffer)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x00;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	73fb      	strb	r3, [r7, #15]
    printmsg("BL_DEBUG_MSG: bootloader_handle_dis_rw_protect\r\n");
 8000c6c:	481d      	ldr	r0, [pc, #116]	; (8000ce4 <bootloader_handle_dis_rw_protect+0x84>)
 8000c6e:	f000 fdfb 	bl	8001868 <printmsg>

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0] + 1;
 8000c72:	4b1d      	ldr	r3, [pc, #116]	; (8000ce8 <bootloader_handle_dis_rw_protect+0x88>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	3301      	adds	r3, #1
 8000c78:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (pBuffer + command_packet_len - 4) ) ;
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	3b04      	subs	r3, #4
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	4413      	add	r3, r2
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&pBuffer[0], command_packet_len - 4, host_crc))
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	3b04      	subs	r3, #4
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f000 f8b8 	bl	8000e04 <bootloader_verify_crc>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d11b      	bne.n	8000cd2 <bootloader_handle_dis_rw_protect+0x72>
	{
        printmsg("BL_DEBUG_MSG: Checksum success !!\r\n");
 8000c9a:	4814      	ldr	r0, [pc, #80]	; (8000cec <bootloader_handle_dis_rw_protect+0x8c>)
 8000c9c:	f000 fde4 	bl	8001868 <printmsg>
        bootloader_send_ack(pBuffer[0], 1);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f000 f880 	bl	8000dac <bootloader_send_ack>

        status = configure_flash_sector_rw_protection(0, 0, 1);
 8000cac:	2201      	movs	r2, #1
 8000cae:	2100      	movs	r1, #0
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	f000 f9d3 	bl	800105c <configure_flash_sector_rw_protection>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	73fb      	strb	r3, [r7, #15]

        printmsg("BL_DEBUG_MSG: Flash erase status: %#x\r\n",status);
 8000cba:	7bfb      	ldrb	r3, [r7, #15]
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	480c      	ldr	r0, [pc, #48]	; (8000cf0 <bootloader_handle_dis_rw_protect+0x90>)
 8000cc0:	f000 fdd2 	bl	8001868 <printmsg>

        bootloader_uart_write_data(&status, 1);
 8000cc4:	f107 030f 	add.w	r3, r7, #15
 8000cc8:	2101      	movs	r1, #1
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f000 f8ce 	bl	8000e6c <bootloader_uart_write_data>
        printmsg("BL_DEBUG_MSG: Checksum fail !!\r\n");
        bootloader_send_nack();
	}


}
 8000cd0:	e004      	b.n	8000cdc <bootloader_handle_dis_rw_protect+0x7c>
        printmsg("BL_DEBUG_MSG: Checksum fail !!\r\n");
 8000cd2:	4808      	ldr	r0, [pc, #32]	; (8000cf4 <bootloader_handle_dis_rw_protect+0x94>)
 8000cd4:	f000 fdc8 	bl	8001868 <printmsg>
        bootloader_send_nack();
 8000cd8:	f000 f882 	bl	8000de0 <bootloader_send_nack>
}
 8000cdc:	bf00      	nop
 8000cde:	3718      	adds	r7, #24
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	08004768 	.word	0x08004768
 8000ce8:	200000a0 	.word	0x200000a0
 8000cec:	080043e8 	.word	0x080043e8
 8000cf0:	08004654 	.word	0x08004654
 8000cf4:	0800442c 	.word	0x0800442c

08000cf8 <bootloader_handle_mem_read>:

/*Helper function to handle BL_MEM_READ command */
void bootloader_handle_mem_read (uint8_t *pBuffer)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]


}
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <bootloader_handle_read_sector_protection_status>:

/*Helper function to handle _BL_READ_SECTOR_P_STATUS command */
void bootloader_handle_read_sector_protection_status(uint8_t *pBuffer)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
	 uint16_t status;
	printmsg("BL_DEBUG_MSG: bootloader_handle_read_sector_protection_status\r\n");
 8000d14:	481c      	ldr	r0, [pc, #112]	; (8000d88 <bootloader_handle_read_sector_protection_status+0x7c>)
 8000d16:	f000 fda7 	bl	8001868 <printmsg>

    // Total length of the command packet
	uint32_t command_packet_len = pBuffer[0] + 1;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	617b      	str	r3, [r7, #20]

	// Extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (pBuffer + command_packet_len - 4) ) ;
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	3b04      	subs	r3, #4
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	4413      	add	r3, r2
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&pBuffer[0], command_packet_len - 4, host_crc))
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	3b04      	subs	r3, #4
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	4619      	mov	r1, r3
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f000 f864 	bl	8000e04 <bootloader_verify_crc>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d118      	bne.n	8000d74 <bootloader_handle_read_sector_protection_status+0x68>
	{
        printmsg("BL_DEBUG_MSG: Checksum success !!\r\n");
 8000d42:	4812      	ldr	r0, [pc, #72]	; (8000d8c <bootloader_handle_read_sector_protection_status+0x80>)
 8000d44:	f000 fd90 	bl	8001868 <printmsg>
        bootloader_send_ack(pBuffer[0], 2);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2102      	movs	r1, #2
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f000 f82c 	bl	8000dac <bootloader_send_ack>
        status = read_OB_rw_protection_status();
 8000d54:	f000 fa22 	bl	800119c <read_OB_rw_protection_status>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	81fb      	strh	r3, [r7, #14]
        printmsg("BL_DEBUG_MSG: nWRP status: %#x\r\n", status);
 8000d5c:	89fb      	ldrh	r3, [r7, #14]
 8000d5e:	4619      	mov	r1, r3
 8000d60:	480b      	ldr	r0, [pc, #44]	; (8000d90 <bootloader_handle_read_sector_protection_status+0x84>)
 8000d62:	f000 fd81 	bl	8001868 <printmsg>
        bootloader_uart_write_data((uint8_t*)&status, 2);
 8000d66:	f107 030e 	add.w	r3, r7, #14
 8000d6a:	2102      	movs	r1, #2
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f000 f87d 	bl	8000e6c <bootloader_uart_write_data>
	{
        printmsg("BL_DEBUG_MSG: Checksum fail !!\r\n");
        bootloader_send_nack();
	}

}
 8000d72:	e004      	b.n	8000d7e <bootloader_handle_read_sector_protection_status+0x72>
        printmsg("BL_DEBUG_MSG: Checksum fail !!\r\n");
 8000d74:	4807      	ldr	r0, [pc, #28]	; (8000d94 <bootloader_handle_read_sector_protection_status+0x88>)
 8000d76:	f000 fd77 	bl	8001868 <printmsg>
        bootloader_send_nack();
 8000d7a:	f000 f831 	bl	8000de0 <bootloader_send_nack>
}
 8000d7e:	bf00      	nop
 8000d80:	3718      	adds	r7, #24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	0800479c 	.word	0x0800479c
 8000d8c:	080043e8 	.word	0x080043e8
 8000d90:	080047dc 	.word	0x080047dc
 8000d94:	0800442c 	.word	0x0800442c

08000d98 <bootloader_handle_read_otp>:

/*Helper function to handle BL_OTP_READ command */
void bootloader_handle_read_otp(uint8_t *pBuffer)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]


}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <bootloader_send_ack>:

/* This function sends ACK if CRC matches along with "len to follow"*/
void bootloader_send_ack(uint8_t command_code, uint8_t follow_len)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	460a      	mov	r2, r1
 8000db6:	71fb      	strb	r3, [r7, #7]
 8000db8:	4613      	mov	r3, r2
 8000dba:	71bb      	strb	r3, [r7, #6]
	 // Here we send 2 byte.. first byte is ack and the second byte is len value
	uint8_t ack_buf[2];
	ack_buf[0] = BL_ACK;
 8000dbc:	23a5      	movs	r3, #165	; 0xa5
 8000dbe:	733b      	strb	r3, [r7, #12]
	ack_buf[1] = follow_len;
 8000dc0:	79bb      	ldrb	r3, [r7, #6]
 8000dc2:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(C_UART, ack_buf, 2, HAL_MAX_DELAY);
 8000dc4:	f107 010c 	add.w	r1, r7, #12
 8000dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dcc:	2202      	movs	r2, #2
 8000dce:	4803      	ldr	r0, [pc, #12]	; (8000ddc <bootloader_send_ack+0x30>)
 8000dd0:	f002 fab7 	bl	8003342 <HAL_UART_Transmit>

}
 8000dd4:	bf00      	nop
 8000dd6:	3710      	adds	r7, #16
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	200001b4 	.word	0x200001b4

08000de0 <bootloader_send_nack>:

/* This function sends NACK */
void bootloader_send_nack(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
	uint8_t nack = BL_NACK;
 8000de6:	237f      	movs	r3, #127	; 0x7f
 8000de8:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(C_UART, &nack, 1, HAL_MAX_DELAY);
 8000dea:	1df9      	adds	r1, r7, #7
 8000dec:	f04f 33ff 	mov.w	r3, #4294967295
 8000df0:	2201      	movs	r2, #1
 8000df2:	4803      	ldr	r0, [pc, #12]	; (8000e00 <bootloader_send_nack+0x20>)
 8000df4:	f002 faa5 	bl	8003342 <HAL_UART_Transmit>
}
 8000df8:	bf00      	nop
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	200001b4 	.word	0x200001b4

08000e04 <bootloader_verify_crc>:

// This verifies the CRC of the given buffer in pData .
uint8_t bootloader_verify_crc (uint8_t *pData, uint32_t len, uint32_t crc_host)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b088      	sub	sp, #32
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
	uint32_t uwCRCValue = 0xFF;
 8000e10:	23ff      	movs	r3, #255	; 0xff
 8000e12:	61fb      	str	r3, [r7, #28]

	for (uint32_t i=0 ; i < len ; i++)
 8000e14:	2300      	movs	r3, #0
 8000e16:	61bb      	str	r3, [r7, #24]
 8000e18:	e00f      	b.n	8000e3a <bootloader_verify_crc+0x36>
	{
		uint32_t i_data = pData[i];
 8000e1a:	68fa      	ldr	r2, [r7, #12]
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	4413      	add	r3, r2
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	617b      	str	r3, [r7, #20]
		uwCRCValue = HAL_CRC_Accumulate(&hcrc, &i_data, 1);
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	2201      	movs	r2, #1
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	480e      	ldr	r0, [pc, #56]	; (8000e68 <bootloader_verify_crc+0x64>)
 8000e2e:	f001 f81c 	bl	8001e6a <HAL_CRC_Accumulate>
 8000e32:	61f8      	str	r0, [r7, #28]
	for (uint32_t i=0 ; i < len ; i++)
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	3301      	adds	r3, #1
 8000e38:	61bb      	str	r3, [r7, #24]
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d3eb      	bcc.n	8000e1a <bootloader_verify_crc+0x16>
	}

	 /* Reset CRC Calculation Unit */
	__HAL_CRC_DR_RESET(&hcrc);
 8000e42:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <bootloader_verify_crc+0x64>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	689a      	ldr	r2, [r3, #8]
 8000e48:	4b07      	ldr	r3, [pc, #28]	; (8000e68 <bootloader_verify_crc+0x64>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f042 0201 	orr.w	r2, r2, #1
 8000e50:	609a      	str	r2, [r3, #8]

	if( uwCRCValue == crc_host)
 8000e52:	69fa      	ldr	r2, [r7, #28]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	429a      	cmp	r2, r3
 8000e58:	d101      	bne.n	8000e5e <bootloader_verify_crc+0x5a>
	{
		return VERIFY_CRC_SUCCESS;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	e000      	b.n	8000e60 <bootloader_verify_crc+0x5c>
	}

	return VERIFY_CRC_FAIL;
 8000e5e:	2301      	movs	r3, #1
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3720      	adds	r7, #32
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	200001ac 	.word	0x200001ac

08000e6c <bootloader_uart_write_data>:

/* This function writes data in to C_UART */
void bootloader_uart_write_data(uint8_t *pBuffer, uint32_t len)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
	/* Can replace the below ST's USART driver API call with your MCUs driver API call */
	HAL_UART_Transmit(C_UART, pBuffer, len, HAL_MAX_DELAY);
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	b29a      	uxth	r2, r3
 8000e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7e:	6879      	ldr	r1, [r7, #4]
 8000e80:	4803      	ldr	r0, [pc, #12]	; (8000e90 <bootloader_uart_write_data+0x24>)
 8000e82:	f002 fa5e 	bl	8003342 <HAL_UART_Transmit>

}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	200001b4 	.word	0x200001b4

08000e94 <get_bootloader_version>:


// Just returns the macro value .
uint8_t get_bootloader_version(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
	return (uint8_t)BL_VERSION;
 8000e98:	2310      	movs	r3, #16
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <get_mcu_chip_id>:

// Read the chip identifier or device Identifier
uint16_t get_mcu_chip_id(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
	and the die revision. It is part of the DBG_MCU component and is mapped on the
	external PPB bus (see Section 33.16 on page 1304). This code is accessible using the
	JTAG debug pCat.2ort (4 to 5 pins) or the SW debug port (two pins) or by the user software.
	It is even accessible while the MCU is under system reset. */
	uint16_t cid;
	cid = (uint16_t)(DBGMCU->IDCODE) & 0x0FFF;
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <get_mcu_chip_id+0x20>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000eb4:	80fb      	strh	r3, [r7, #6]
	return  cid;
 8000eb6:	88fb      	ldrh	r3, [r7, #6]

}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	e0042000 	.word	0xe0042000

08000ec8 <get_flash_rdp_level>:

/* This function reads the RDP ( Read protection option byte) value
 * For more info refer "Table 16. Description of the option bytes" in stm32f4xx RM
 */
uint8_t get_flash_rdp_level(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b088      	sub	sp, #32
 8000ecc:	af00      	add	r7, sp, #0

	uint8_t rdp_status = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	77fb      	strb	r3, [r7, #31]
#if 1
	FLASH_OBProgramInitTypeDef  ob_handle;
	HAL_FLASHEx_OBGetConfig(&ob_handle);
 8000ed2:	463b      	mov	r3, r7
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f001 fa57 	bl	8002388 <HAL_FLASHEx_OBGetConfig>
	rdp_status = (uint8_t)ob_handle.RDPLevel;
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	77fb      	strb	r3, [r7, #31]
#else
	 volatile uint32_t *pOB_addr = (uint32_t*) 0x1FFFC000;
	 rdp_status = (uint8_t)(*pOB_addr >> 8) ;
#endif

	return rdp_status;
 8000ede:	7ffb      	ldrb	r3, [r7, #31]

}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3720      	adds	r7, #32
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <verify_address>:

// Verify the address sent by the host .
uint8_t verify_address(uint32_t go_address)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
	// Can we jump to sram3 memory ? yes
	// Can we jump to backup sram memory ? yes
	// Can we jump to peripheral memory ? its possible , but dont allow. so no
	// Can we jump to external memory ? its possible , but dont allow. so no

	if ( go_address >= FLASH_BASE && go_address <= FLASH_END)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000ef6:	d305      	bcc.n	8000f04 <verify_address+0x1c>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 8000efe:	d201      	bcs.n	8000f04 <verify_address+0x1c>
	{
		return ADDR_VALID;
 8000f00:	2300      	movs	r3, #0
 8000f02:	e028      	b.n	8000f56 <verify_address+0x6e>
	}
	if ( go_address >= SRAM1_BASE && go_address <= SRAM1_END)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000f0a:	d305      	bcc.n	8000f18 <verify_address+0x30>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4a15      	ldr	r2, [pc, #84]	; (8000f64 <verify_address+0x7c>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d201      	bcs.n	8000f18 <verify_address+0x30>
	{
		return ADDR_VALID;
 8000f14:	2300      	movs	r3, #0
 8000f16:	e01e      	b.n	8000f56 <verify_address+0x6e>
	}
	else if ( go_address >= SRAM2_BASE && go_address <= SRAM2_END)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4a12      	ldr	r2, [pc, #72]	; (8000f64 <verify_address+0x7c>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d305      	bcc.n	8000f2c <verify_address+0x44>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4a11      	ldr	r2, [pc, #68]	; (8000f68 <verify_address+0x80>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d801      	bhi.n	8000f2c <verify_address+0x44>
	{
		return ADDR_VALID;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	e014      	b.n	8000f56 <verify_address+0x6e>
	}
	else if ( go_address >= SRAM3_BASE && go_address <= SRAM3_END)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4a0e      	ldr	r2, [pc, #56]	; (8000f68 <verify_address+0x80>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d905      	bls.n	8000f40 <verify_address+0x58>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4a0d      	ldr	r2, [pc, #52]	; (8000f6c <verify_address+0x84>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d801      	bhi.n	8000f40 <verify_address+0x58>
	{
		return ADDR_VALID;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	e00a      	b.n	8000f56 <verify_address+0x6e>
	}
	else if ( go_address >= BKPSRAM_BASE && go_address <= BKPSRAM_END)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4a0b      	ldr	r2, [pc, #44]	; (8000f70 <verify_address+0x88>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d305      	bcc.n	8000f54 <verify_address+0x6c>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4a0a      	ldr	r2, [pc, #40]	; (8000f74 <verify_address+0x8c>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d201      	bcs.n	8000f54 <verify_address+0x6c>
	{
		return ADDR_VALID;
 8000f50:	2300      	movs	r3, #0
 8000f52:	e000      	b.n	8000f56 <verify_address+0x6e>
	}
	else
	{
		return ADDR_INVALID;
 8000f54:	2301      	movs	r3, #1
	}

}
 8000f56:	4618      	mov	r0, r3
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	2001c000 	.word	0x2001c000
 8000f68:	2001ffff 	.word	0x2001ffff
 8000f6c:	2002ffff 	.word	0x2002ffff
 8000f70:	40024000 	.word	0x40024000
 8000f74:	40025000 	.word	0x40025000

08000f78 <execute_flash_erase>:

 uint8_t execute_flash_erase(uint8_t sector_number , uint8_t number_of_sector)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08a      	sub	sp, #40	; 0x28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	460a      	mov	r2, r1
 8000f82:	71fb      	strb	r3, [r7, #7]
 8000f84:	4613      	mov	r3, r2
 8000f86:	71bb      	strb	r3, [r7, #6]
	FLASH_EraseInitTypeDef flashErase_handle;
	uint32_t sectorError;
	HAL_StatusTypeDef status;


	if( number_of_sector >= 12 )
 8000f88:	79bb      	ldrb	r3, [r7, #6]
 8000f8a:	2b0b      	cmp	r3, #11
 8000f8c:	d901      	bls.n	8000f92 <execute_flash_erase+0x1a>
		return INVALID_SECTOR;
 8000f8e:	2304      	movs	r3, #4
 8000f90:	e035      	b.n	8000ffe <execute_flash_erase+0x86>

	if( (sector_number == 0xFF ) || (sector_number < 12) )
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	2bff      	cmp	r3, #255	; 0xff
 8000f96:	d002      	beq.n	8000f9e <execute_flash_erase+0x26>
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	2b0b      	cmp	r3, #11
 8000f9c:	d82e      	bhi.n	8000ffc <execute_flash_erase+0x84>
	{
		if(sector_number == (uint8_t) 0xFF)
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	2bff      	cmp	r3, #255	; 0xff
 8000fa2:	d102      	bne.n	8000faa <execute_flash_erase+0x32>
		{
			flashErase_handle.TypeErase = FLASH_TYPEERASE_MASSERASE;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	613b      	str	r3, [r7, #16]
 8000fa8:	e012      	b.n	8000fd0 <execute_flash_erase+0x58>
		}else
		{
		    /* Here we are just calculating how many sectors needs to erased */
			uint8_t remanining_sector = 12 - sector_number;
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	f1c3 030c 	rsb	r3, r3, #12
 8000fb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if( number_of_sector > remanining_sector)
 8000fb4:	79ba      	ldrb	r2, [r7, #6]
 8000fb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	d902      	bls.n	8000fc4 <execute_flash_erase+0x4c>
            {
            	number_of_sector = remanining_sector;
 8000fbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fc2:	71bb      	strb	r3, [r7, #6]
            }
			flashErase_handle.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	613b      	str	r3, [r7, #16]
			flashErase_handle.Sector = sector_number; // This is the initial sector
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	61bb      	str	r3, [r7, #24]
			flashErase_handle.NbSectors = number_of_sector;
 8000fcc:	79bb      	ldrb	r3, [r7, #6]
 8000fce:	61fb      	str	r3, [r7, #28]
		}
		flashErase_handle.Banks = FLASH_BANK_1;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	617b      	str	r3, [r7, #20]

		/* Get access to touch the flash registers */
		HAL_FLASH_Unlock();
 8000fd4:	f000 ffc8 	bl	8001f68 <HAL_FLASH_Unlock>
		flashErase_handle.VoltageRange = FLASH_VOLTAGE_RANGE_3;  // Our mcu will work on this voltage range
 8000fd8:	2302      	movs	r3, #2
 8000fda:	623b      	str	r3, [r7, #32]
		status = (uint8_t) HAL_FLASHEx_Erase(&flashErase_handle, &sectorError);
 8000fdc:	f107 020c 	add.w	r2, r7, #12
 8000fe0:	f107 0310 	add.w	r3, r7, #16
 8000fe4:	4611      	mov	r1, r2
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f001 f95c 	bl	80022a4 <HAL_FLASHEx_Erase>
 8000fec:	4603      	mov	r3, r0
 8000fee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		HAL_FLASH_Lock();
 8000ff2:	f000 ffdb 	bl	8001fac <HAL_FLASH_Lock>

		return status;
 8000ff6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ffa:	e000      	b.n	8000ffe <execute_flash_erase+0x86>
	}

	return INVALID_SECTOR;
 8000ffc:	2304      	movs	r3, #4
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3728      	adds	r7, #40	; 0x28
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <execute_mem_write>:

/* This function writes the contents of pBuffer to  "mem_address" byte by byte */
// Note1 : Currently this function supports writing to Flash only .
// Note2 : This functions does not check whether "mem_address" is a valid address of the flash range.
uint8_t execute_mem_write(uint8_t *pBuffer, uint32_t mem_address, uint32_t len)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b086      	sub	sp, #24
 800100a:	af00      	add	r7, sp, #0
 800100c:	60f8      	str	r0, [r7, #12]
 800100e:	60b9      	str	r1, [r7, #8]
 8001010:	607a      	str	r2, [r7, #4]
	uint8_t status = HAL_OK;
 8001012:	2300      	movs	r3, #0
 8001014:	75fb      	strb	r3, [r7, #23]

	// We have to unlock flash module to get control of registers
	HAL_FLASH_Unlock();
 8001016:	f000 ffa7 	bl	8001f68 <HAL_FLASH_Unlock>

	for(uint32_t i = 0; i<len; i++)
 800101a:	2300      	movs	r3, #0
 800101c:	613b      	str	r3, [r7, #16]
 800101e:	e011      	b.n	8001044 <execute_mem_write+0x3e>
	{
		// Here we program the flash byte by byte
		status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, mem_address + i, pBuffer[i] );
 8001020:	68ba      	ldr	r2, [r7, #8]
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	18d1      	adds	r1, r2, r3
 8001026:	68fa      	ldr	r2, [r7, #12]
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	4413      	add	r3, r2
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	b2da      	uxtb	r2, r3
 8001030:	f04f 0300 	mov.w	r3, #0
 8001034:	2000      	movs	r0, #0
 8001036:	f000 ff43 	bl	8001ec0 <HAL_FLASH_Program>
 800103a:	4603      	mov	r3, r0
 800103c:	75fb      	strb	r3, [r7, #23]
	for(uint32_t i = 0; i<len; i++)
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	3301      	adds	r3, #1
 8001042:	613b      	str	r3, [r7, #16]
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	429a      	cmp	r2, r3
 800104a:	d3e9      	bcc.n	8001020 <execute_mem_write+0x1a>
	}

	HAL_FLASH_Lock();
 800104c:	f000 ffae 	bl	8001fac <HAL_FLASH_Lock>

	return status;
 8001050:	7dfb      	ldrb	r3, [r7, #23]
}
 8001052:	4618      	mov	r0, r3
 8001054:	3718      	adds	r7, #24
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
	...

0800105c <configure_flash_sector_rw_protection>:
2. Write the desired option value in the FLASH_OPTCR register.
3. Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
4. Wait for the BSY bit to be cleared.
*/
uint8_t configure_flash_sector_rw_protection(uint16_t sector_details, uint8_t protection_mode, uint8_t disable)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	80fb      	strh	r3, [r7, #6]
 8001066:	460b      	mov	r3, r1
 8001068:	717b      	strb	r3, [r7, #5]
 800106a:	4613      	mov	r3, r2
 800106c:	713b      	strb	r3, [r7, #4]
	// Protection_mode =1 , means write protect of the user flash sectors
	// Protection_mode =2, means read/write protect of the user flash sectors
	// According to RM of stm32f429xx TABLE 16, We have to modify the address 0x1FFF C008 bit 15(SPRMOD)

	//Flash option control register (OPTCR)
	volatile uint32_t *pOPTCR = (uint32_t*) 0x40023C14;
 800106e:	4b48      	ldr	r3, [pc, #288]	; (8001190 <configure_flash_sector_rw_protection+0x134>)
 8001070:	60fb      	str	r3, [r7, #12]


	if(disable)
 8001072:	793b      	ldrb	r3, [r7, #4]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d027      	beq.n	80010c8 <configure_flash_sector_rw_protection+0x6c>
	{
		// Disable all r/w protection on sectors

		// Option byte configuration unlock
		HAL_FLASH_OB_Unlock();
 8001078:	f000 ffa8 	bl	8001fcc <HAL_FLASH_OB_Unlock>

		// Wait till no active operation on flash
		while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 800107c:	bf00      	nop
 800107e:	4b45      	ldr	r3, [pc, #276]	; (8001194 <configure_flash_sector_rw_protection+0x138>)
 8001080:	68db      	ldr	r3, [r3, #12]
 8001082:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d1f9      	bne.n	800107e <configure_flash_sector_rw_protection+0x22>

		// Clear the 31st bit (default state)
		// Please refer : Flash option control register (FLASH_OPTCR) in RM
		*pOPTCR &= ~(1 << 31);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	601a      	str	r2, [r3, #0]

		// Clear the protection : make all 16 bits belonging to sectors as 1
		*pOPTCR |= (0x0FFF << 16);
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f043 637f 	orr.w	r3, r3, #267386880	; 0xff00000
 800109e:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	6013      	str	r3, [r2, #0]

		// Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
		*pOPTCR |= ( 1 << 1);
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f043 0202 	orr.w	r2, r3, #2
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	601a      	str	r2, [r3, #0]

		// Wait till no active operation on flash
		while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 80010b2:	bf00      	nop
 80010b4:	4b37      	ldr	r3, [pc, #220]	; (8001194 <configure_flash_sector_rw_protection+0x138>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d1f9      	bne.n	80010b4 <configure_flash_sector_rw_protection+0x58>

		HAL_FLASH_OB_Lock();
 80010c0:	f000 ffa0 	bl	8002004 <HAL_FLASH_OB_Lock>

		return 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	e05f      	b.n	8001188 <configure_flash_sector_rw_protection+0x12c>

	}

	if(protection_mode == (uint8_t) 1)
 80010c8:	797b      	ldrb	r3, [r7, #5]
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d128      	bne.n	8001120 <configure_flash_sector_rw_protection+0xc4>
	{
		// We are putting write protection on the sectors encoded in sector_details argument

		// Option byte configuration unlock
		HAL_FLASH_OB_Unlock();
 80010ce:	f000 ff7d 	bl	8001fcc <HAL_FLASH_OB_Unlock>

		// Wait till no active operation on flash
		while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 80010d2:	bf00      	nop
 80010d4:	4b2f      	ldr	r3, [pc, #188]	; (8001194 <configure_flash_sector_rw_protection+0x138>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d1f9      	bne.n	80010d4 <configure_flash_sector_rw_protection+0x78>

		// Here we are setting just write protection for the sectors
		// Clear the 31st bit
		// Please refer : Flash option control register (FLASH_OPTCR) in RM
		*pOPTCR &= ~(1 << 31);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	601a      	str	r2, [r3, #0]

		// Put write protection on sectors
		// First 12 bits of sector_details must be setting on 16th position of FLASH_OPTCR
		*pOPTCR &= ~ ((sector_details & 0x0FFF) << 16);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	88fb      	ldrh	r3, [r7, #6]
 80010f2:	0419      	lsls	r1, r3, #16
 80010f4:	4b28      	ldr	r3, [pc, #160]	; (8001198 <configure_flash_sector_rw_protection+0x13c>)
 80010f6:	400b      	ands	r3, r1
 80010f8:	43db      	mvns	r3, r3
 80010fa:	401a      	ands	r2, r3
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	601a      	str	r2, [r3, #0]

		// Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
		*pOPTCR |= ( 1 << 1);
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f043 0202 	orr.w	r2, r3, #2
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	601a      	str	r2, [r3, #0]

		// Wait till no active operation on flash
		while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 800110c:	bf00      	nop
 800110e:	4b21      	ldr	r3, [pc, #132]	; (8001194 <configure_flash_sector_rw_protection+0x138>)
 8001110:	68db      	ldr	r3, [r3, #12]
 8001112:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d1f9      	bne.n	800110e <configure_flash_sector_rw_protection+0xb2>

		HAL_FLASH_OB_Lock();
 800111a:	f000 ff73 	bl	8002004 <HAL_FLASH_OB_Lock>
 800111e:	e032      	b.n	8001186 <configure_flash_sector_rw_protection+0x12a>
	}

	else if (protection_mode == (uint8_t) 2)
 8001120:	797b      	ldrb	r3, [r7, #5]
 8001122:	2b02      	cmp	r3, #2
 8001124:	d12f      	bne.n	8001186 <configure_flash_sector_rw_protection+0x12a>
	{
		// Option byte configuration unlock
		HAL_FLASH_OB_Unlock();
 8001126:	f000 ff51 	bl	8001fcc <HAL_FLASH_OB_Unlock>

		// Wait till no active operation on flash
		while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 800112a:	bf00      	nop
 800112c:	4b19      	ldr	r3, [pc, #100]	; (8001194 <configure_flash_sector_rw_protection+0x138>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d1f9      	bne.n	800112c <configure_flash_sector_rw_protection+0xd0>

		// Here we are setting read and write protection for the sectors
		// Set the 31st bit
		// Please refer : Flash option control register (FLASH_OPTCR) in RM
		*pOPTCR |= (1 << 31);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	601a      	str	r2, [r3, #0]

		// Put read and write protection on sectors
		// First 12 bits of sector_details must be setting on 16th position of FLASH_OPTCR
		*pOPTCR &= ~(0x0FFF << 16);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f023 637f 	bic.w	r3, r3, #267386880	; 0xff00000
 800114c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8001150:	68fa      	ldr	r2, [r7, #12]
 8001152:	6013      	str	r3, [r2, #0]
		*pOPTCR |= ((sector_details & 0x0FFF) << 16);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	88fb      	ldrh	r3, [r7, #6]
 800115a:	041b      	lsls	r3, r3, #16
 800115c:	4619      	mov	r1, r3
 800115e:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <configure_flash_sector_rw_protection+0x13c>)
 8001160:	400b      	ands	r3, r1
 8001162:	431a      	orrs	r2, r3
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	601a      	str	r2, [r3, #0]

		// Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
		*pOPTCR |= ( 1 << 1);
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f043 0202 	orr.w	r2, r3, #2
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	601a      	str	r2, [r3, #0]

		// Wait till no active operation on flash
		while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 8001174:	bf00      	nop
 8001176:	4b07      	ldr	r3, [pc, #28]	; (8001194 <configure_flash_sector_rw_protection+0x138>)
 8001178:	68db      	ldr	r3, [r3, #12]
 800117a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d1f9      	bne.n	8001176 <configure_flash_sector_rw_protection+0x11a>

		HAL_FLASH_OB_Lock();
 8001182:	f000 ff3f 	bl	8002004 <HAL_FLASH_OB_Lock>
	}

	return 0;
 8001186:	2300      	movs	r3, #0
}
 8001188:	4618      	mov	r0, r3
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40023c14 	.word	0x40023c14
 8001194:	40023c00 	.word	0x40023c00
 8001198:	0fff0000 	.word	0x0fff0000

0800119c <read_OB_rw_protection_status>:

uint16_t read_OB_rw_protection_status(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b088      	sub	sp, #32
 80011a0:	af00      	add	r7, sp, #0
	// This structure is given by ST Flash driver to hold the OB(Option Byte) contents .
	FLASH_OBProgramInitTypeDef OBInit;

	// First unlock the OB(Option Byte) memory access
	HAL_FLASH_OB_Unlock();
 80011a2:	f000 ff13 	bl	8001fcc <HAL_FLASH_OB_Unlock>
	// Get the OB configuration details
	HAL_FLASHEx_OBGetConfig(&OBInit);
 80011a6:	1d3b      	adds	r3, r7, #4
 80011a8:	4618      	mov	r0, r3
 80011aa:	f001 f8ed 	bl	8002388 <HAL_FLASHEx_OBGetConfig>
	// Lock back .
	HAL_FLASH_Lock();
 80011ae:	f000 fefd 	bl	8001fac <HAL_FLASH_Lock>

	// We are just interested in r/w protection status of the sectors.
	return (uint16_t)OBInit.WRPSector;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	b29b      	uxth	r3, r3

}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3720      	adds	r7, #32
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011c4:	f000 fcde 	bl	8001b84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011c8:	f000 f822 	bl	8001210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011cc:	f000 f8f2 	bl	80013b4 <MX_GPIO_Init>
  MX_CRC_Init();
 80011d0:	f000 f888 	bl	80012e4 <MX_CRC_Init>
  MX_USART1_UART_Init();
 80011d4:	f000 f89a 	bl	800130c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80011d8:	f000 f8c2 	bl	8001360 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* Lets check whether button is pressed or not, if not pressed jump to user application */
  if ( HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET )
 80011dc:	2101      	movs	r1, #1
 80011de:	4809      	ldr	r0, [pc, #36]	; (8001204 <main+0x44>)
 80011e0:	f001 fbbc 	bl	800295c <HAL_GPIO_ReadPin>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d105      	bne.n	80011f6 <main+0x36>
  {
	  printmsg("BL_DEBUG_MSG: Button is pressed .. going to BL mode\r\n");
 80011ea:	4807      	ldr	r0, [pc, #28]	; (8001208 <main+0x48>)
 80011ec:	f000 fb3c 	bl	8001868 <printmsg>

	  //we should continue in Bootloader mode
	  bootloader_uart_read_data();
 80011f0:	f7ff f9d2 	bl	8000598 <bootloader_uart_read_data>
 80011f4:	e004      	b.n	8001200 <main+0x40>

  }
  else
  {
	  printmsg("BL_DEBUG_MSG: Button is not pressed .. executing USER Application\r\n");
 80011f6:	4805      	ldr	r0, [pc, #20]	; (800120c <main+0x4c>)
 80011f8:	f000 fb36 	bl	8001868 <printmsg>
	  //jump to user application
	  bootloader_jump_to_user_app();
 80011fc:	f7ff fa46 	bl	800068c <bootloader_jump_to_user_app>


  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8001200:	e7fe      	b.n	8001200 <main+0x40>
 8001202:	bf00      	nop
 8001204:	40020000 	.word	0x40020000
 8001208:	08004800 	.word	0x08004800
 800120c:	08004838 	.word	0x08004838

08001210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b094      	sub	sp, #80	; 0x50
 8001214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001216:	f107 0320 	add.w	r3, r7, #32
 800121a:	2230      	movs	r2, #48	; 0x30
 800121c:	2100      	movs	r1, #0
 800121e:	4618      	mov	r0, r3
 8001220:	f002 fc24 	bl	8003a6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001224:	f107 030c 	add.w	r3, r7, #12
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001234:	2300      	movs	r3, #0
 8001236:	60bb      	str	r3, [r7, #8]
 8001238:	4b28      	ldr	r3, [pc, #160]	; (80012dc <SystemClock_Config+0xcc>)
 800123a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123c:	4a27      	ldr	r2, [pc, #156]	; (80012dc <SystemClock_Config+0xcc>)
 800123e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001242:	6413      	str	r3, [r2, #64]	; 0x40
 8001244:	4b25      	ldr	r3, [pc, #148]	; (80012dc <SystemClock_Config+0xcc>)
 8001246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800124c:	60bb      	str	r3, [r7, #8]
 800124e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001250:	2300      	movs	r3, #0
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	4b22      	ldr	r3, [pc, #136]	; (80012e0 <SystemClock_Config+0xd0>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800125c:	4a20      	ldr	r2, [pc, #128]	; (80012e0 <SystemClock_Config+0xd0>)
 800125e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001262:	6013      	str	r3, [r2, #0]
 8001264:	4b1e      	ldr	r3, [pc, #120]	; (80012e0 <SystemClock_Config+0xd0>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800126c:	607b      	str	r3, [r7, #4]
 800126e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001270:	2302      	movs	r3, #2
 8001272:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001274:	2301      	movs	r3, #1
 8001276:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001278:	2310      	movs	r3, #16
 800127a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800127c:	2302      	movs	r3, #2
 800127e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001280:	2300      	movs	r3, #0
 8001282:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001284:	2308      	movs	r3, #8
 8001286:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001288:	2354      	movs	r3, #84	; 0x54
 800128a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800128c:	2302      	movs	r3, #2
 800128e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001290:	2307      	movs	r3, #7
 8001292:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001294:	f107 0320 	add.w	r3, r7, #32
 8001298:	4618      	mov	r0, r3
 800129a:	f001 fb91 	bl	80029c0 <HAL_RCC_OscConfig>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80012a4:	f000 fb02 	bl	80018ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a8:	230f      	movs	r3, #15
 80012aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ac:	2302      	movs	r3, #2
 80012ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012be:	f107 030c 	add.w	r3, r7, #12
 80012c2:	2102      	movs	r1, #2
 80012c4:	4618      	mov	r0, r3
 80012c6:	f001 fdf3 	bl	8002eb0 <HAL_RCC_ClockConfig>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80012d0:	f000 faec 	bl	80018ac <Error_Handler>
  }
}
 80012d4:	bf00      	nop
 80012d6:	3750      	adds	r7, #80	; 0x50
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40023800 	.word	0x40023800
 80012e0:	40007000 	.word	0x40007000

080012e4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <MX_CRC_Init+0x20>)
 80012ea:	4a07      	ldr	r2, [pc, #28]	; (8001308 <MX_CRC_Init+0x24>)
 80012ec:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80012ee:	4805      	ldr	r0, [pc, #20]	; (8001304 <MX_CRC_Init+0x20>)
 80012f0:	f000 fd9f 	bl	8001e32 <HAL_CRC_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80012fa:	f000 fad7 	bl	80018ac <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	200001ac 	.word	0x200001ac
 8001308:	40023000 	.word	0x40023000

0800130c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001310:	4b11      	ldr	r3, [pc, #68]	; (8001358 <MX_USART1_UART_Init+0x4c>)
 8001312:	4a12      	ldr	r2, [pc, #72]	; (800135c <MX_USART1_UART_Init+0x50>)
 8001314:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001316:	4b10      	ldr	r3, [pc, #64]	; (8001358 <MX_USART1_UART_Init+0x4c>)
 8001318:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800131c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800131e:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <MX_USART1_UART_Init+0x4c>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <MX_USART1_UART_Init+0x4c>)
 8001326:	2200      	movs	r2, #0
 8001328:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800132a:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <MX_USART1_UART_Init+0x4c>)
 800132c:	2200      	movs	r2, #0
 800132e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001330:	4b09      	ldr	r3, [pc, #36]	; (8001358 <MX_USART1_UART_Init+0x4c>)
 8001332:	220c      	movs	r2, #12
 8001334:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001336:	4b08      	ldr	r3, [pc, #32]	; (8001358 <MX_USART1_UART_Init+0x4c>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800133c:	4b06      	ldr	r3, [pc, #24]	; (8001358 <MX_USART1_UART_Init+0x4c>)
 800133e:	2200      	movs	r2, #0
 8001340:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001342:	4805      	ldr	r0, [pc, #20]	; (8001358 <MX_USART1_UART_Init+0x4c>)
 8001344:	f001 ffb0 	bl	80032a8 <HAL_UART_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800134e:	f000 faad 	bl	80018ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	200001b4 	.word	0x200001b4
 800135c:	40011000 	.word	0x40011000

08001360 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001364:	4b11      	ldr	r3, [pc, #68]	; (80013ac <MX_USART3_UART_Init+0x4c>)
 8001366:	4a12      	ldr	r2, [pc, #72]	; (80013b0 <MX_USART3_UART_Init+0x50>)
 8001368:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800136a:	4b10      	ldr	r3, [pc, #64]	; (80013ac <MX_USART3_UART_Init+0x4c>)
 800136c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001370:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001372:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <MX_USART3_UART_Init+0x4c>)
 8001374:	2200      	movs	r2, #0
 8001376:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001378:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <MX_USART3_UART_Init+0x4c>)
 800137a:	2200      	movs	r2, #0
 800137c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800137e:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <MX_USART3_UART_Init+0x4c>)
 8001380:	2200      	movs	r2, #0
 8001382:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001384:	4b09      	ldr	r3, [pc, #36]	; (80013ac <MX_USART3_UART_Init+0x4c>)
 8001386:	220c      	movs	r2, #12
 8001388:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800138a:	4b08      	ldr	r3, [pc, #32]	; (80013ac <MX_USART3_UART_Init+0x4c>)
 800138c:	2200      	movs	r2, #0
 800138e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <MX_USART3_UART_Init+0x4c>)
 8001392:	2200      	movs	r2, #0
 8001394:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001396:	4805      	ldr	r0, [pc, #20]	; (80013ac <MX_USART3_UART_Init+0x4c>)
 8001398:	f001 ff86 	bl	80032a8 <HAL_UART_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80013a2:	f000 fa83 	bl	80018ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000168 	.word	0x20000168
 80013b0:	40004800 	.word	0x40004800

080013b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08e      	sub	sp, #56	; 0x38
 80013b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
 80013c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	623b      	str	r3, [r7, #32]
 80013ce:	4bb2      	ldr	r3, [pc, #712]	; (8001698 <MX_GPIO_Init+0x2e4>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	4ab1      	ldr	r2, [pc, #708]	; (8001698 <MX_GPIO_Init+0x2e4>)
 80013d4:	f043 0304 	orr.w	r3, r3, #4
 80013d8:	6313      	str	r3, [r2, #48]	; 0x30
 80013da:	4baf      	ldr	r3, [pc, #700]	; (8001698 <MX_GPIO_Init+0x2e4>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	f003 0304 	and.w	r3, r3, #4
 80013e2:	623b      	str	r3, [r7, #32]
 80013e4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	61fb      	str	r3, [r7, #28]
 80013ea:	4bab      	ldr	r3, [pc, #684]	; (8001698 <MX_GPIO_Init+0x2e4>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	4aaa      	ldr	r2, [pc, #680]	; (8001698 <MX_GPIO_Init+0x2e4>)
 80013f0:	f043 0320 	orr.w	r3, r3, #32
 80013f4:	6313      	str	r3, [r2, #48]	; 0x30
 80013f6:	4ba8      	ldr	r3, [pc, #672]	; (8001698 <MX_GPIO_Init+0x2e4>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	f003 0320 	and.w	r3, r3, #32
 80013fe:	61fb      	str	r3, [r7, #28]
 8001400:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	61bb      	str	r3, [r7, #24]
 8001406:	4ba4      	ldr	r3, [pc, #656]	; (8001698 <MX_GPIO_Init+0x2e4>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4aa3      	ldr	r2, [pc, #652]	; (8001698 <MX_GPIO_Init+0x2e4>)
 800140c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4ba1      	ldr	r3, [pc, #644]	; (8001698 <MX_GPIO_Init+0x2e4>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800141a:	61bb      	str	r3, [r7, #24]
 800141c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	617b      	str	r3, [r7, #20]
 8001422:	4b9d      	ldr	r3, [pc, #628]	; (8001698 <MX_GPIO_Init+0x2e4>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	4a9c      	ldr	r2, [pc, #624]	; (8001698 <MX_GPIO_Init+0x2e4>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	6313      	str	r3, [r2, #48]	; 0x30
 800142e:	4b9a      	ldr	r3, [pc, #616]	; (8001698 <MX_GPIO_Init+0x2e4>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	617b      	str	r3, [r7, #20]
 8001438:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	613b      	str	r3, [r7, #16]
 800143e:	4b96      	ldr	r3, [pc, #600]	; (8001698 <MX_GPIO_Init+0x2e4>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	4a95      	ldr	r2, [pc, #596]	; (8001698 <MX_GPIO_Init+0x2e4>)
 8001444:	f043 0302 	orr.w	r3, r3, #2
 8001448:	6313      	str	r3, [r2, #48]	; 0x30
 800144a:	4b93      	ldr	r3, [pc, #588]	; (8001698 <MX_GPIO_Init+0x2e4>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	613b      	str	r3, [r7, #16]
 8001454:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	4b8f      	ldr	r3, [pc, #572]	; (8001698 <MX_GPIO_Init+0x2e4>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	4a8e      	ldr	r2, [pc, #568]	; (8001698 <MX_GPIO_Init+0x2e4>)
 8001460:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001464:	6313      	str	r3, [r2, #48]	; 0x30
 8001466:	4b8c      	ldr	r3, [pc, #560]	; (8001698 <MX_GPIO_Init+0x2e4>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	60bb      	str	r3, [r7, #8]
 8001476:	4b88      	ldr	r3, [pc, #544]	; (8001698 <MX_GPIO_Init+0x2e4>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	4a87      	ldr	r2, [pc, #540]	; (8001698 <MX_GPIO_Init+0x2e4>)
 800147c:	f043 0310 	orr.w	r3, r3, #16
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	4b85      	ldr	r3, [pc, #532]	; (8001698 <MX_GPIO_Init+0x2e4>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	f003 0310 	and.w	r3, r3, #16
 800148a:	60bb      	str	r3, [r7, #8]
 800148c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	607b      	str	r3, [r7, #4]
 8001492:	4b81      	ldr	r3, [pc, #516]	; (8001698 <MX_GPIO_Init+0x2e4>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	4a80      	ldr	r2, [pc, #512]	; (8001698 <MX_GPIO_Init+0x2e4>)
 8001498:	f043 0308 	orr.w	r3, r3, #8
 800149c:	6313      	str	r3, [r2, #48]	; 0x30
 800149e:	4b7e      	ldr	r3, [pc, #504]	; (8001698 <MX_GPIO_Init+0x2e4>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	f003 0308 	and.w	r3, r3, #8
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80014aa:	2200      	movs	r2, #0
 80014ac:	2116      	movs	r1, #22
 80014ae:	487b      	ldr	r0, [pc, #492]	; (800169c <MX_GPIO_Init+0x2e8>)
 80014b0:	f001 fa6c 	bl	800298c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80014b4:	2200      	movs	r2, #0
 80014b6:	2180      	movs	r1, #128	; 0x80
 80014b8:	4879      	ldr	r0, [pc, #484]	; (80016a0 <MX_GPIO_Init+0x2ec>)
 80014ba:	f001 fa67 	bl	800298c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80014be:	2200      	movs	r2, #0
 80014c0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80014c4:	4877      	ldr	r0, [pc, #476]	; (80016a4 <MX_GPIO_Init+0x2f0>)
 80014c6:	f001 fa61 	bl	800298c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80014ca:	2200      	movs	r2, #0
 80014cc:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80014d0:	4875      	ldr	r0, [pc, #468]	; (80016a8 <MX_GPIO_Init+0x2f4>)
 80014d2:	f001 fa5b 	bl	800298c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80014d6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80014da:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014dc:	2302      	movs	r3, #2
 80014de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e4:	2303      	movs	r3, #3
 80014e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014e8:	230c      	movs	r3, #12
 80014ea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f0:	4619      	mov	r1, r3
 80014f2:	486e      	ldr	r0, [pc, #440]	; (80016ac <MX_GPIO_Init+0x2f8>)
 80014f4:	f001 f886 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80014f8:	f44f 7360 	mov.w	r3, #896	; 0x380
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fe:	2302      	movs	r3, #2
 8001500:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001506:	2300      	movs	r3, #0
 8001508:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800150a:	2305      	movs	r3, #5
 800150c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800150e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001512:	4619      	mov	r1, r3
 8001514:	4865      	ldr	r0, [pc, #404]	; (80016ac <MX_GPIO_Init+0x2f8>)
 8001516:	f001 f875 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 800151a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800151e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001520:	2302      	movs	r3, #2
 8001522:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001528:	2300      	movs	r3, #0
 800152a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800152c:	230e      	movs	r3, #14
 800152e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001530:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001534:	4619      	mov	r1, r3
 8001536:	485d      	ldr	r0, [pc, #372]	; (80016ac <MX_GPIO_Init+0x2f8>)
 8001538:	f001 f864 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 800153c:	2301      	movs	r3, #1
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001540:	2302      	movs	r3, #2
 8001542:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001548:	2303      	movs	r3, #3
 800154a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800154c:	230c      	movs	r3, #12
 800154e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001550:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001554:	4619      	mov	r1, r3
 8001556:	4851      	ldr	r0, [pc, #324]	; (800169c <MX_GPIO_Init+0x2e8>)
 8001558:	f001 f854 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 800155c:	2316      	movs	r3, #22
 800155e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001560:	2301      	movs	r3, #1
 8001562:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001568:	2300      	movs	r3, #0
 800156a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800156c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001570:	4619      	mov	r1, r3
 8001572:	484a      	ldr	r0, [pc, #296]	; (800169c <MX_GPIO_Init+0x2e8>)
 8001574:	f001 f846 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8001578:	f248 0307 	movw	r3, #32775	; 0x8007
 800157c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800157e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001582:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001588:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800158c:	4619      	mov	r1, r3
 800158e:	4844      	ldr	r0, [pc, #272]	; (80016a0 <MX_GPIO_Init+0x2ec>)
 8001590:	f001 f838 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001594:	f641 0358 	movw	r3, #6232	; 0x1858
 8001598:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159a:	2302      	movs	r3, #2
 800159c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a2:	2300      	movs	r3, #0
 80015a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015a6:	230e      	movs	r3, #14
 80015a8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ae:	4619      	mov	r1, r3
 80015b0:	483b      	ldr	r0, [pc, #236]	; (80016a0 <MX_GPIO_Init+0x2ec>)
 80015b2:	f001 f827 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80015b6:	2380      	movs	r3, #128	; 0x80
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ba:	2301      	movs	r3, #1
 80015bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c2:	2300      	movs	r3, #0
 80015c4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80015c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ca:	4619      	mov	r1, r3
 80015cc:	4834      	ldr	r0, [pc, #208]	; (80016a0 <MX_GPIO_Init+0x2ec>)
 80015ce:	f001 f819 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80015d2:	2320      	movs	r3, #32
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80015d6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80015da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80015e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e4:	4619      	mov	r1, r3
 80015e6:	482d      	ldr	r0, [pc, #180]	; (800169c <MX_GPIO_Init+0x2e8>)
 80015e8:	f001 f80c 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80015ec:	2303      	movs	r3, #3
 80015ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f0:	2302      	movs	r3, #2
 80015f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f8:	2300      	movs	r3, #0
 80015fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80015fc:	2309      	movs	r3, #9
 80015fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001600:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001604:	4619      	mov	r1, r3
 8001606:	482a      	ldr	r0, [pc, #168]	; (80016b0 <MX_GPIO_Init+0x2fc>)
 8001608:	f000 fffc 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800160c:	2304      	movs	r3, #4
 800160e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001610:	2300      	movs	r3, #0
 8001612:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001618:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800161c:	4619      	mov	r1, r3
 800161e:	4824      	ldr	r0, [pc, #144]	; (80016b0 <MX_GPIO_Init+0x2fc>)
 8001620:	f000 fff0 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001624:	f248 1333 	movw	r3, #33075	; 0x8133
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162a:	2302      	movs	r3, #2
 800162c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001632:	2303      	movs	r3, #3
 8001634:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001636:	230c      	movs	r3, #12
 8001638:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800163a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800163e:	4619      	mov	r1, r3
 8001640:	4819      	ldr	r0, [pc, #100]	; (80016a8 <MX_GPIO_Init+0x2f4>)
 8001642:	f000 ffdf 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001646:	f64f 7383 	movw	r3, #65411	; 0xff83
 800164a:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164c:	2302      	movs	r3, #2
 800164e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001654:	2303      	movs	r3, #3
 8001656:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001658:	230c      	movs	r3, #12
 800165a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800165c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001660:	4619      	mov	r1, r3
 8001662:	4814      	ldr	r0, [pc, #80]	; (80016b4 <MX_GPIO_Init+0x300>)
 8001664:	f000 ffce 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001668:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800166c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166e:	2302      	movs	r3, #2
 8001670:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001676:	2300      	movs	r3, #0
 8001678:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800167a:	230e      	movs	r3, #14
 800167c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800167e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001682:	4619      	mov	r1, r3
 8001684:	480a      	ldr	r0, [pc, #40]	; (80016b0 <MX_GPIO_Init+0x2fc>)
 8001686:	f000 ffbd 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800168a:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800168e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001690:	2302      	movs	r3, #2
 8001692:	62bb      	str	r3, [r7, #40]	; 0x28
 8001694:	e010      	b.n	80016b8 <MX_GPIO_Init+0x304>
 8001696:	bf00      	nop
 8001698:	40023800 	.word	0x40023800
 800169c:	40020800 	.word	0x40020800
 80016a0:	40020000 	.word	0x40020000
 80016a4:	40020c00 	.word	0x40020c00
 80016a8:	40021800 	.word	0x40021800
 80016ac:	40021400 	.word	0x40021400
 80016b0:	40020400 	.word	0x40020400
 80016b4:	40021000 	.word	0x40021000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016bc:	2300      	movs	r3, #0
 80016be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80016c0:	230c      	movs	r3, #12
 80016c2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c8:	4619      	mov	r1, r3
 80016ca:	4862      	ldr	r0, [pc, #392]	; (8001854 <MX_GPIO_Init+0x4a0>)
 80016cc:	f000 ff9a 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80016d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016d6:	2300      	movs	r3, #0
 80016d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80016de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016e2:	4619      	mov	r1, r3
 80016e4:	485b      	ldr	r0, [pc, #364]	; (8001854 <MX_GPIO_Init+0x4a0>)
 80016e6:	f000 ff8d 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80016ea:	f24c 7303 	movw	r3, #50947	; 0xc703
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f0:	2302      	movs	r3, #2
 80016f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f8:	2303      	movs	r3, #3
 80016fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016fc:	230c      	movs	r3, #12
 80016fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001700:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001704:	4619      	mov	r1, r3
 8001706:	4854      	ldr	r0, [pc, #336]	; (8001858 <MX_GPIO_Init+0x4a4>)
 8001708:	f000 ff7c 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 800170c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001710:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001712:	2300      	movs	r3, #0
 8001714:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 800171a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800171e:	4619      	mov	r1, r3
 8001720:	484d      	ldr	r0, [pc, #308]	; (8001858 <MX_GPIO_Init+0x4a4>)
 8001722:	f000 ff6f 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001726:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800172a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172c:	2301      	movs	r3, #1
 800172e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001734:	2300      	movs	r3, #0
 8001736:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001738:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800173c:	4619      	mov	r1, r3
 800173e:	4846      	ldr	r0, [pc, #280]	; (8001858 <MX_GPIO_Init+0x4a4>)
 8001740:	f000 ff60 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001744:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001748:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174a:	2302      	movs	r3, #2
 800174c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001752:	2300      	movs	r3, #0
 8001754:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001756:	230e      	movs	r3, #14
 8001758:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800175a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800175e:	4619      	mov	r1, r3
 8001760:	483e      	ldr	r0, [pc, #248]	; (800185c <MX_GPIO_Init+0x4a8>)
 8001762:	f000 ff4f 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin;
 8001766:	23c0      	movs	r3, #192	; 0xc0
 8001768:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176a:	2302      	movs	r3, #2
 800176c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001772:	2300      	movs	r3, #0
 8001774:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001776:	230e      	movs	r3, #14
 8001778:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800177a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800177e:	4619      	mov	r1, r3
 8001780:	4837      	ldr	r0, [pc, #220]	; (8001860 <MX_GPIO_Init+0x4ac>)
 8001782:	f000 ff3f 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001786:	f44f 7300 	mov.w	r3, #512	; 0x200
 800178a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800178c:	2312      	movs	r3, #18
 800178e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001794:	2300      	movs	r3, #0
 8001796:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001798:	2304      	movs	r3, #4
 800179a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 800179c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a0:	4619      	mov	r1, r3
 80017a2:	482f      	ldr	r0, [pc, #188]	; (8001860 <MX_GPIO_Init+0x4ac>)
 80017a4:	f000 ff2e 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80017a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017ae:	2312      	movs	r3, #18
 80017b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b6:	2300      	movs	r3, #0
 80017b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80017ba:	2304      	movs	r3, #4
 80017bc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80017be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c2:	4619      	mov	r1, r3
 80017c4:	4827      	ldr	r0, [pc, #156]	; (8001864 <MX_GPIO_Init+0x4b0>)
 80017c6:	f000 ff1d 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80017ca:	2348      	movs	r3, #72	; 0x48
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ce:	2302      	movs	r3, #2
 80017d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d6:	2300      	movs	r3, #0
 80017d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80017da:	230e      	movs	r3, #14
 80017dc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e2:	4619      	mov	r1, r3
 80017e4:	481c      	ldr	r0, [pc, #112]	; (8001858 <MX_GPIO_Init+0x4a4>)
 80017e6:	f000 ff0d 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80017ea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f0:	2302      	movs	r3, #2
 80017f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f8:	2300      	movs	r3, #0
 80017fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80017fc:	2309      	movs	r3, #9
 80017fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001800:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001804:	4619      	mov	r1, r3
 8001806:	4815      	ldr	r0, [pc, #84]	; (800185c <MX_GPIO_Init+0x4a8>)
 8001808:	f000 fefc 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 800180c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001810:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001812:	2301      	movs	r3, #1
 8001814:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181a:	2300      	movs	r3, #0
 800181c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800181e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001822:	4619      	mov	r1, r3
 8001824:	480d      	ldr	r0, [pc, #52]	; (800185c <MX_GPIO_Init+0x4a8>)
 8001826:	f000 feed 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 800182a:	2360      	movs	r3, #96	; 0x60
 800182c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182e:	2302      	movs	r3, #2
 8001830:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001836:	2303      	movs	r3, #3
 8001838:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800183a:	230c      	movs	r3, #12
 800183c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001842:	4619      	mov	r1, r3
 8001844:	4803      	ldr	r0, [pc, #12]	; (8001854 <MX_GPIO_Init+0x4a0>)
 8001846:	f000 fedd 	bl	8002604 <HAL_GPIO_Init>

}
 800184a:	bf00      	nop
 800184c:	3738      	adds	r7, #56	; 0x38
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40020400 	.word	0x40020400
 8001858:	40020c00 	.word	0x40020c00
 800185c:	40021800 	.word	0x40021800
 8001860:	40020800 	.word	0x40020800
 8001864:	40020000 	.word	0x40020000

08001868 <printmsg>:
/* USER CODE BEGIN 4 */


/* Prints formatted string to console over UART */
void printmsg(char *format, ...)
{
 8001868:	b40f      	push	{r0, r1, r2, r3}
 800186a:	b580      	push	{r7, lr}
 800186c:	b09a      	sub	sp, #104	; 0x68
 800186e:	af00      	add	r7, sp, #0
#ifdef BL_DEBUG_MSG_EN
	char str[100];
	/* Extract the argument list using VA API */
	va_list args;
	va_start(args, format);
 8001870:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001874:	603b      	str	r3, [r7, #0]
	vsprintf(str, format, args);
 8001876:	1d3b      	adds	r3, r7, #4
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800187c:	4618      	mov	r0, r3
 800187e:	f002 f913 	bl	8003aa8 <vsiprintf>
	HAL_UART_Transmit(D_UART, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8001882:	1d3b      	adds	r3, r7, #4
 8001884:	4618      	mov	r0, r3
 8001886:	f7fe fcb3 	bl	80001f0 <strlen>
 800188a:	4603      	mov	r3, r0
 800188c:	b29a      	uxth	r2, r3
 800188e:	1d39      	adds	r1, r7, #4
 8001890:	f04f 33ff 	mov.w	r3, #4294967295
 8001894:	4804      	ldr	r0, [pc, #16]	; (80018a8 <printmsg+0x40>)
 8001896:	f001 fd54 	bl	8003342 <HAL_UART_Transmit>
	va_end(args);
#endif
}
 800189a:	bf00      	nop
 800189c:	3768      	adds	r7, #104	; 0x68
 800189e:	46bd      	mov	sp, r7
 80018a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80018a4:	b004      	add	sp, #16
 80018a6:	4770      	bx	lr
 80018a8:	20000168 	.word	0x20000168

080018ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80018b0:	b672      	cpsid	i
}
 80018b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018b4:	e7fe      	b.n	80018b4 <Error_Handler+0x8>
	...

080018b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	607b      	str	r3, [r7, #4]
 80018c2:	4b10      	ldr	r3, [pc, #64]	; (8001904 <HAL_MspInit+0x4c>)
 80018c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c6:	4a0f      	ldr	r2, [pc, #60]	; (8001904 <HAL_MspInit+0x4c>)
 80018c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018cc:	6453      	str	r3, [r2, #68]	; 0x44
 80018ce:	4b0d      	ldr	r3, [pc, #52]	; (8001904 <HAL_MspInit+0x4c>)
 80018d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018d6:	607b      	str	r3, [r7, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	603b      	str	r3, [r7, #0]
 80018de:	4b09      	ldr	r3, [pc, #36]	; (8001904 <HAL_MspInit+0x4c>)
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	4a08      	ldr	r2, [pc, #32]	; (8001904 <HAL_MspInit+0x4c>)
 80018e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018e8:	6413      	str	r3, [r2, #64]	; 0x40
 80018ea:	4b06      	ldr	r3, [pc, #24]	; (8001904 <HAL_MspInit+0x4c>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f2:	603b      	str	r3, [r7, #0]
 80018f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018f6:	2007      	movs	r0, #7
 80018f8:	f000 fa68 	bl	8001dcc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018fc:	bf00      	nop
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40023800 	.word	0x40023800

08001908 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a0b      	ldr	r2, [pc, #44]	; (8001944 <HAL_CRC_MspInit+0x3c>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d10d      	bne.n	8001936 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <HAL_CRC_MspInit+0x40>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	4a09      	ldr	r2, [pc, #36]	; (8001948 <HAL_CRC_MspInit+0x40>)
 8001924:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001928:	6313      	str	r3, [r2, #48]	; 0x30
 800192a:	4b07      	ldr	r3, [pc, #28]	; (8001948 <HAL_CRC_MspInit+0x40>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001936:	bf00      	nop
 8001938:	3714      	adds	r7, #20
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	40023000 	.word	0x40023000
 8001948:	40023800 	.word	0x40023800

0800194c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b08c      	sub	sp, #48	; 0x30
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001954:	f107 031c 	add.w	r3, r7, #28
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	609a      	str	r2, [r3, #8]
 8001960:	60da      	str	r2, [r3, #12]
 8001962:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a33      	ldr	r2, [pc, #204]	; (8001a38 <HAL_UART_MspInit+0xec>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d12d      	bne.n	80019ca <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	61bb      	str	r3, [r7, #24]
 8001972:	4b32      	ldr	r3, [pc, #200]	; (8001a3c <HAL_UART_MspInit+0xf0>)
 8001974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001976:	4a31      	ldr	r2, [pc, #196]	; (8001a3c <HAL_UART_MspInit+0xf0>)
 8001978:	f043 0310 	orr.w	r3, r3, #16
 800197c:	6453      	str	r3, [r2, #68]	; 0x44
 800197e:	4b2f      	ldr	r3, [pc, #188]	; (8001a3c <HAL_UART_MspInit+0xf0>)
 8001980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001982:	f003 0310 	and.w	r3, r3, #16
 8001986:	61bb      	str	r3, [r7, #24]
 8001988:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]
 800198e:	4b2b      	ldr	r3, [pc, #172]	; (8001a3c <HAL_UART_MspInit+0xf0>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	4a2a      	ldr	r2, [pc, #168]	; (8001a3c <HAL_UART_MspInit+0xf0>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	6313      	str	r3, [r2, #48]	; 0x30
 800199a:	4b28      	ldr	r3, [pc, #160]	; (8001a3c <HAL_UART_MspInit+0xf0>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	617b      	str	r3, [r7, #20]
 80019a4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80019a6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80019aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ac:	2302      	movs	r3, #2
 80019ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b4:	2303      	movs	r3, #3
 80019b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019b8:	2307      	movs	r3, #7
 80019ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019bc:	f107 031c 	add.w	r3, r7, #28
 80019c0:	4619      	mov	r1, r3
 80019c2:	481f      	ldr	r0, [pc, #124]	; (8001a40 <HAL_UART_MspInit+0xf4>)
 80019c4:	f000 fe1e 	bl	8002604 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80019c8:	e031      	b.n	8001a2e <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART3)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a1d      	ldr	r2, [pc, #116]	; (8001a44 <HAL_UART_MspInit+0xf8>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d12c      	bne.n	8001a2e <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 80019d4:	2300      	movs	r3, #0
 80019d6:	613b      	str	r3, [r7, #16]
 80019d8:	4b18      	ldr	r3, [pc, #96]	; (8001a3c <HAL_UART_MspInit+0xf0>)
 80019da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019dc:	4a17      	ldr	r2, [pc, #92]	; (8001a3c <HAL_UART_MspInit+0xf0>)
 80019de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019e2:	6413      	str	r3, [r2, #64]	; 0x40
 80019e4:	4b15      	ldr	r3, [pc, #84]	; (8001a3c <HAL_UART_MspInit+0xf0>)
 80019e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019ec:	613b      	str	r3, [r7, #16]
 80019ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019f0:	2300      	movs	r3, #0
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <HAL_UART_MspInit+0xf0>)
 80019f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f8:	4a10      	ldr	r2, [pc, #64]	; (8001a3c <HAL_UART_MspInit+0xf0>)
 80019fa:	f043 0304 	orr.w	r3, r3, #4
 80019fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001a00:	4b0e      	ldr	r3, [pc, #56]	; (8001a3c <HAL_UART_MspInit+0xf0>)
 8001a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a04:	f003 0304 	and.w	r3, r3, #4
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a0c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a12:	2302      	movs	r3, #2
 8001a14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a1e:	2307      	movs	r3, #7
 8001a20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a22:	f107 031c 	add.w	r3, r7, #28
 8001a26:	4619      	mov	r1, r3
 8001a28:	4807      	ldr	r0, [pc, #28]	; (8001a48 <HAL_UART_MspInit+0xfc>)
 8001a2a:	f000 fdeb 	bl	8002604 <HAL_GPIO_Init>
}
 8001a2e:	bf00      	nop
 8001a30:	3730      	adds	r7, #48	; 0x30
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40011000 	.word	0x40011000
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	40020000 	.word	0x40020000
 8001a44:	40004800 	.word	0x40004800
 8001a48:	40020800 	.word	0x40020800

08001a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a50:	e7fe      	b.n	8001a50 <NMI_Handler+0x4>

08001a52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a56:	e7fe      	b.n	8001a56 <HardFault_Handler+0x4>

08001a58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a5c:	e7fe      	b.n	8001a5c <MemManage_Handler+0x4>

08001a5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a62:	e7fe      	b.n	8001a62 <BusFault_Handler+0x4>

08001a64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a68:	e7fe      	b.n	8001a68 <UsageFault_Handler+0x4>

08001a6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a7c:	bf00      	nop
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a86:	b480      	push	{r7}
 8001a88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a98:	f000 f8c6 	bl	8001c28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a9c:	bf00      	nop
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001aa8:	4a14      	ldr	r2, [pc, #80]	; (8001afc <_sbrk+0x5c>)
 8001aaa:	4b15      	ldr	r3, [pc, #84]	; (8001b00 <_sbrk+0x60>)
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ab4:	4b13      	ldr	r3, [pc, #76]	; (8001b04 <_sbrk+0x64>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d102      	bne.n	8001ac2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001abc:	4b11      	ldr	r3, [pc, #68]	; (8001b04 <_sbrk+0x64>)
 8001abe:	4a12      	ldr	r2, [pc, #72]	; (8001b08 <_sbrk+0x68>)
 8001ac0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ac2:	4b10      	ldr	r3, [pc, #64]	; (8001b04 <_sbrk+0x64>)
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4413      	add	r3, r2
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d207      	bcs.n	8001ae0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ad0:	f001 ffa2 	bl	8003a18 <__errno>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	220c      	movs	r2, #12
 8001ad8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ada:	f04f 33ff 	mov.w	r3, #4294967295
 8001ade:	e009      	b.n	8001af4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ae0:	4b08      	ldr	r3, [pc, #32]	; (8001b04 <_sbrk+0x64>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ae6:	4b07      	ldr	r3, [pc, #28]	; (8001b04 <_sbrk+0x64>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4413      	add	r3, r2
 8001aee:	4a05      	ldr	r2, [pc, #20]	; (8001b04 <_sbrk+0x64>)
 8001af0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001af2:	68fb      	ldr	r3, [r7, #12]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3718      	adds	r7, #24
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	20030000 	.word	0x20030000
 8001b00:	00000400 	.word	0x00000400
 8001b04:	20000094 	.word	0x20000094
 8001b08:	20000230 	.word	0x20000230

08001b0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b10:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <SystemInit+0x20>)
 8001b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b16:	4a05      	ldr	r2, [pc, #20]	; (8001b2c <SystemInit+0x20>)
 8001b18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b20:	bf00      	nop
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001b30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b68 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b34:	480d      	ldr	r0, [pc, #52]	; (8001b6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b36:	490e      	ldr	r1, [pc, #56]	; (8001b70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b38:	4a0e      	ldr	r2, [pc, #56]	; (8001b74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b3c:	e002      	b.n	8001b44 <LoopCopyDataInit>

08001b3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b42:	3304      	adds	r3, #4

08001b44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b48:	d3f9      	bcc.n	8001b3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b4a:	4a0b      	ldr	r2, [pc, #44]	; (8001b78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b4c:	4c0b      	ldr	r4, [pc, #44]	; (8001b7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b50:	e001      	b.n	8001b56 <LoopFillZerobss>

08001b52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b54:	3204      	adds	r2, #4

08001b56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b58:	d3fb      	bcc.n	8001b52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b5a:	f7ff ffd7 	bl	8001b0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b5e:	f001 ff61 	bl	8003a24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b62:	f7ff fb2d 	bl	80011c0 <main>
  bx  lr    
 8001b66:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001b68:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001b6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b70:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001b74:	080048d8 	.word	0x080048d8
  ldr r2, =_sbss
 8001b78:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001b7c:	2000022c 	.word	0x2000022c

08001b80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b80:	e7fe      	b.n	8001b80 <ADC_IRQHandler>
	...

08001b84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b88:	4b0e      	ldr	r3, [pc, #56]	; (8001bc4 <HAL_Init+0x40>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a0d      	ldr	r2, [pc, #52]	; (8001bc4 <HAL_Init+0x40>)
 8001b8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b94:	4b0b      	ldr	r3, [pc, #44]	; (8001bc4 <HAL_Init+0x40>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a0a      	ldr	r2, [pc, #40]	; (8001bc4 <HAL_Init+0x40>)
 8001b9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ba0:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <HAL_Init+0x40>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a07      	ldr	r2, [pc, #28]	; (8001bc4 <HAL_Init+0x40>)
 8001ba6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001baa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bac:	2003      	movs	r0, #3
 8001bae:	f000 f90d 	bl	8001dcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bb2:	2000      	movs	r0, #0
 8001bb4:	f000 f808 	bl	8001bc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bb8:	f7ff fe7e 	bl	80018b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40023c00 	.word	0x40023c00

08001bc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bd0:	4b12      	ldr	r3, [pc, #72]	; (8001c1c <HAL_InitTick+0x54>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	4b12      	ldr	r3, [pc, #72]	; (8001c20 <HAL_InitTick+0x58>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	4619      	mov	r1, r3
 8001bda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bde:	fbb3 f3f1 	udiv	r3, r3, r1
 8001be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be6:	4618      	mov	r0, r3
 8001be8:	f000 f917 	bl	8001e1a <HAL_SYSTICK_Config>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e00e      	b.n	8001c14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b0f      	cmp	r3, #15
 8001bfa:	d80a      	bhi.n	8001c12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	6879      	ldr	r1, [r7, #4]
 8001c00:	f04f 30ff 	mov.w	r0, #4294967295
 8001c04:	f000 f8ed 	bl	8001de2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c08:	4a06      	ldr	r2, [pc, #24]	; (8001c24 <HAL_InitTick+0x5c>)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	e000      	b.n	8001c14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	20000008 	.word	0x20000008
 8001c20:	20000010 	.word	0x20000010
 8001c24:	2000000c 	.word	0x2000000c

08001c28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c2c:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <HAL_IncTick+0x20>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	461a      	mov	r2, r3
 8001c32:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <HAL_IncTick+0x24>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4413      	add	r3, r2
 8001c38:	4a04      	ldr	r2, [pc, #16]	; (8001c4c <HAL_IncTick+0x24>)
 8001c3a:	6013      	str	r3, [r2, #0]
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	20000010 	.word	0x20000010
 8001c4c:	200001f8 	.word	0x200001f8

08001c50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  return uwTick;
 8001c54:	4b03      	ldr	r3, [pc, #12]	; (8001c64 <HAL_GetTick+0x14>)
 8001c56:	681b      	ldr	r3, [r3, #0]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	200001f8 	.word	0x200001f8

08001c68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c78:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <__NVIC_SetPriorityGrouping+0x44>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c7e:	68ba      	ldr	r2, [r7, #8]
 8001c80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c84:	4013      	ands	r3, r2
 8001c86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c9a:	4a04      	ldr	r2, [pc, #16]	; (8001cac <__NVIC_SetPriorityGrouping+0x44>)
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	60d3      	str	r3, [r2, #12]
}
 8001ca0:	bf00      	nop
 8001ca2:	3714      	adds	r7, #20
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	e000ed00 	.word	0xe000ed00

08001cb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cb4:	4b04      	ldr	r3, [pc, #16]	; (8001cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	0a1b      	lsrs	r3, r3, #8
 8001cba:	f003 0307 	and.w	r3, r3, #7
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	e000ed00 	.word	0xe000ed00

08001ccc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	6039      	str	r1, [r7, #0]
 8001cd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	db0a      	blt.n	8001cf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	b2da      	uxtb	r2, r3
 8001ce4:	490c      	ldr	r1, [pc, #48]	; (8001d18 <__NVIC_SetPriority+0x4c>)
 8001ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cea:	0112      	lsls	r2, r2, #4
 8001cec:	b2d2      	uxtb	r2, r2
 8001cee:	440b      	add	r3, r1
 8001cf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cf4:	e00a      	b.n	8001d0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	b2da      	uxtb	r2, r3
 8001cfa:	4908      	ldr	r1, [pc, #32]	; (8001d1c <__NVIC_SetPriority+0x50>)
 8001cfc:	79fb      	ldrb	r3, [r7, #7]
 8001cfe:	f003 030f 	and.w	r3, r3, #15
 8001d02:	3b04      	subs	r3, #4
 8001d04:	0112      	lsls	r2, r2, #4
 8001d06:	b2d2      	uxtb	r2, r2
 8001d08:	440b      	add	r3, r1
 8001d0a:	761a      	strb	r2, [r3, #24]
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	e000e100 	.word	0xe000e100
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b089      	sub	sp, #36	; 0x24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	f1c3 0307 	rsb	r3, r3, #7
 8001d3a:	2b04      	cmp	r3, #4
 8001d3c:	bf28      	it	cs
 8001d3e:	2304      	movcs	r3, #4
 8001d40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	3304      	adds	r3, #4
 8001d46:	2b06      	cmp	r3, #6
 8001d48:	d902      	bls.n	8001d50 <NVIC_EncodePriority+0x30>
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	3b03      	subs	r3, #3
 8001d4e:	e000      	b.n	8001d52 <NVIC_EncodePriority+0x32>
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d54:	f04f 32ff 	mov.w	r2, #4294967295
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43da      	mvns	r2, r3
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	401a      	ands	r2, r3
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d68:	f04f 31ff 	mov.w	r1, #4294967295
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d72:	43d9      	mvns	r1, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d78:	4313      	orrs	r3, r2
         );
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3724      	adds	r7, #36	; 0x24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
	...

08001d88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	3b01      	subs	r3, #1
 8001d94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d98:	d301      	bcc.n	8001d9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e00f      	b.n	8001dbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d9e:	4a0a      	ldr	r2, [pc, #40]	; (8001dc8 <SysTick_Config+0x40>)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3b01      	subs	r3, #1
 8001da4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001da6:	210f      	movs	r1, #15
 8001da8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dac:	f7ff ff8e 	bl	8001ccc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001db0:	4b05      	ldr	r3, [pc, #20]	; (8001dc8 <SysTick_Config+0x40>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001db6:	4b04      	ldr	r3, [pc, #16]	; (8001dc8 <SysTick_Config+0x40>)
 8001db8:	2207      	movs	r2, #7
 8001dba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	e000e010 	.word	0xe000e010

08001dcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f7ff ff47 	bl	8001c68 <__NVIC_SetPriorityGrouping>
}
 8001dda:	bf00      	nop
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b086      	sub	sp, #24
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	4603      	mov	r3, r0
 8001dea:	60b9      	str	r1, [r7, #8]
 8001dec:	607a      	str	r2, [r7, #4]
 8001dee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001df0:	2300      	movs	r3, #0
 8001df2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001df4:	f7ff ff5c 	bl	8001cb0 <__NVIC_GetPriorityGrouping>
 8001df8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	68b9      	ldr	r1, [r7, #8]
 8001dfe:	6978      	ldr	r0, [r7, #20]
 8001e00:	f7ff ff8e 	bl	8001d20 <NVIC_EncodePriority>
 8001e04:	4602      	mov	r2, r0
 8001e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e0a:	4611      	mov	r1, r2
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff ff5d 	bl	8001ccc <__NVIC_SetPriority>
}
 8001e12:	bf00      	nop
 8001e14:	3718      	adds	r7, #24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b082      	sub	sp, #8
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f7ff ffb0 	bl	8001d88 <SysTick_Config>
 8001e28:	4603      	mov	r3, r0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b082      	sub	sp, #8
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d101      	bne.n	8001e44 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e00e      	b.n	8001e62 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	795b      	ldrb	r3, [r3, #5]
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d105      	bne.n	8001e5a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f7ff fd57 	bl	8001908 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b087      	sub	sp, #28
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	60f8      	str	r0, [r7, #12]
 8001e72:	60b9      	str	r1, [r7, #8]
 8001e74:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001e76:	2300      	movs	r3, #0
 8001e78:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2202      	movs	r2, #2
 8001e7e:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8001e80:	2300      	movs	r3, #0
 8001e82:	617b      	str	r3, [r7, #20]
 8001e84:	e00a      	b.n	8001e9c <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	68ba      	ldr	r2, [r7, #8]
 8001e8c:	441a      	add	r2, r3
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6812      	ldr	r2, [r2, #0]
 8001e94:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	617b      	str	r3, [r7, #20]
 8001e9c:	697a      	ldr	r2, [r7, #20]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d3f0      	bcc.n	8001e86 <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8001eb2:	693b      	ldr	r3, [r7, #16]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	371c      	adds	r7, #28
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001ed2:	4b23      	ldr	r3, [pc, #140]	; (8001f60 <HAL_FLASH_Program+0xa0>)
 8001ed4:	7e1b      	ldrb	r3, [r3, #24]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d101      	bne.n	8001ede <HAL_FLASH_Program+0x1e>
 8001eda:	2302      	movs	r3, #2
 8001edc:	e03b      	b.n	8001f56 <HAL_FLASH_Program+0x96>
 8001ede:	4b20      	ldr	r3, [pc, #128]	; (8001f60 <HAL_FLASH_Program+0xa0>)
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ee4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001ee8:	f000 f89c 	bl	8002024 <FLASH_WaitForLastOperation>
 8001eec:	4603      	mov	r3, r0
 8001eee:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001ef0:	7dfb      	ldrb	r3, [r7, #23]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d12b      	bne.n	8001f4e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d105      	bne.n	8001f08 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001efc:	783b      	ldrb	r3, [r7, #0]
 8001efe:	4619      	mov	r1, r3
 8001f00:	68b8      	ldr	r0, [r7, #8]
 8001f02:	f000 f947 	bl	8002194 <FLASH_Program_Byte>
 8001f06:	e016      	b.n	8001f36 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d105      	bne.n	8001f1a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001f0e:	883b      	ldrh	r3, [r7, #0]
 8001f10:	4619      	mov	r1, r3
 8001f12:	68b8      	ldr	r0, [r7, #8]
 8001f14:	f000 f91a 	bl	800214c <FLASH_Program_HalfWord>
 8001f18:	e00d      	b.n	8001f36 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d105      	bne.n	8001f2c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	4619      	mov	r1, r3
 8001f24:	68b8      	ldr	r0, [r7, #8]
 8001f26:	f000 f8ef 	bl	8002108 <FLASH_Program_Word>
 8001f2a:	e004      	b.n	8001f36 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001f2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f30:	68b8      	ldr	r0, [r7, #8]
 8001f32:	f000 f8b7 	bl	80020a4 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001f36:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001f3a:	f000 f873 	bl	8002024 <FLASH_WaitForLastOperation>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001f42:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <HAL_FLASH_Program+0xa4>)
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	4a07      	ldr	r2, [pc, #28]	; (8001f64 <HAL_FLASH_Program+0xa4>)
 8001f48:	f023 0301 	bic.w	r3, r3, #1
 8001f4c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001f4e:	4b04      	ldr	r3, [pc, #16]	; (8001f60 <HAL_FLASH_Program+0xa0>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001f54:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3718      	adds	r7, #24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	200001fc 	.word	0x200001fc
 8001f64:	40023c00 	.word	0x40023c00

08001f68 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001f72:	4b0b      	ldr	r3, [pc, #44]	; (8001fa0 <HAL_FLASH_Unlock+0x38>)
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	da0b      	bge.n	8001f92 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001f7a:	4b09      	ldr	r3, [pc, #36]	; (8001fa0 <HAL_FLASH_Unlock+0x38>)
 8001f7c:	4a09      	ldr	r2, [pc, #36]	; (8001fa4 <HAL_FLASH_Unlock+0x3c>)
 8001f7e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001f80:	4b07      	ldr	r3, [pc, #28]	; (8001fa0 <HAL_FLASH_Unlock+0x38>)
 8001f82:	4a09      	ldr	r2, [pc, #36]	; (8001fa8 <HAL_FLASH_Unlock+0x40>)
 8001f84:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001f86:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <HAL_FLASH_Unlock+0x38>)
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	da01      	bge.n	8001f92 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001f92:	79fb      	ldrb	r3, [r7, #7]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	40023c00 	.word	0x40023c00
 8001fa4:	45670123 	.word	0x45670123
 8001fa8:	cdef89ab 	.word	0xcdef89ab

08001fac <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001fb0:	4b05      	ldr	r3, [pc, #20]	; (8001fc8 <HAL_FLASH_Lock+0x1c>)
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	4a04      	ldr	r2, [pc, #16]	; (8001fc8 <HAL_FLASH_Lock+0x1c>)
 8001fb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001fba:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	40023c00 	.word	0x40023c00

08001fcc <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 8001fd0:	4b09      	ldr	r3, [pc, #36]	; (8001ff8 <HAL_FLASH_OB_Unlock+0x2c>)
 8001fd2:	695b      	ldr	r3, [r3, #20]
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d007      	beq.n	8001fec <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8001fdc:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <HAL_FLASH_OB_Unlock+0x2c>)
 8001fde:	4a07      	ldr	r2, [pc, #28]	; (8001ffc <HAL_FLASH_OB_Unlock+0x30>)
 8001fe0:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 8001fe2:	4b05      	ldr	r3, [pc, #20]	; (8001ff8 <HAL_FLASH_OB_Unlock+0x2c>)
 8001fe4:	4a06      	ldr	r2, [pc, #24]	; (8002000 <HAL_FLASH_OB_Unlock+0x34>)
 8001fe6:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8001fe8:	2300      	movs	r3, #0
 8001fea:	e000      	b.n	8001fee <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	40023c00 	.word	0x40023c00
 8001ffc:	08192a3b 	.word	0x08192a3b
 8002000:	4c5d6e7f 	.word	0x4c5d6e7f

08002004 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8002008:	4b05      	ldr	r3, [pc, #20]	; (8002020 <HAL_FLASH_OB_Lock+0x1c>)
 800200a:	695b      	ldr	r3, [r3, #20]
 800200c:	4a04      	ldr	r2, [pc, #16]	; (8002020 <HAL_FLASH_OB_Lock+0x1c>)
 800200e:	f043 0301 	orr.w	r3, r3, #1
 8002012:	6153      	str	r3, [r2, #20]
  
  return HAL_OK;  
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	40023c00 	.word	0x40023c00

08002024 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800202c:	2300      	movs	r3, #0
 800202e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002030:	4b1a      	ldr	r3, [pc, #104]	; (800209c <FLASH_WaitForLastOperation+0x78>)
 8002032:	2200      	movs	r2, #0
 8002034:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002036:	f7ff fe0b 	bl	8001c50 <HAL_GetTick>
 800203a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800203c:	e010      	b.n	8002060 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002044:	d00c      	beq.n	8002060 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d007      	beq.n	800205c <FLASH_WaitForLastOperation+0x38>
 800204c:	f7ff fe00 	bl	8001c50 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	429a      	cmp	r2, r3
 800205a:	d201      	bcs.n	8002060 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e019      	b.n	8002094 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002060:	4b0f      	ldr	r3, [pc, #60]	; (80020a0 <FLASH_WaitForLastOperation+0x7c>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1e8      	bne.n	800203e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800206c:	4b0c      	ldr	r3, [pc, #48]	; (80020a0 <FLASH_WaitForLastOperation+0x7c>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	2b00      	cmp	r3, #0
 8002076:	d002      	beq.n	800207e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002078:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <FLASH_WaitForLastOperation+0x7c>)
 800207a:	2201      	movs	r2, #1
 800207c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800207e:	4b08      	ldr	r3, [pc, #32]	; (80020a0 <FLASH_WaitForLastOperation+0x7c>)
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800208a:	f000 f8a5 	bl	80021d8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e000      	b.n	8002094 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8002092:	2300      	movs	r3, #0
  
}  
 8002094:	4618      	mov	r0, r3
 8002096:	3710      	adds	r7, #16
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	200001fc 	.word	0x200001fc
 80020a0:	40023c00 	.word	0x40023c00

080020a4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80020b0:	4b14      	ldr	r3, [pc, #80]	; (8002104 <FLASH_Program_DoubleWord+0x60>)
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	4a13      	ldr	r2, [pc, #76]	; (8002104 <FLASH_Program_DoubleWord+0x60>)
 80020b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80020bc:	4b11      	ldr	r3, [pc, #68]	; (8002104 <FLASH_Program_DoubleWord+0x60>)
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	4a10      	ldr	r2, [pc, #64]	; (8002104 <FLASH_Program_DoubleWord+0x60>)
 80020c2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80020c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80020c8:	4b0e      	ldr	r3, [pc, #56]	; (8002104 <FLASH_Program_DoubleWord+0x60>)
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	4a0d      	ldr	r2, [pc, #52]	; (8002104 <FLASH_Program_DoubleWord+0x60>)
 80020ce:	f043 0301 	orr.w	r3, r3, #1
 80020d2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80020da:	f3bf 8f6f 	isb	sy
}
 80020de:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80020e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80020e4:	f04f 0200 	mov.w	r2, #0
 80020e8:	f04f 0300 	mov.w	r3, #0
 80020ec:	000a      	movs	r2, r1
 80020ee:	2300      	movs	r3, #0
 80020f0:	68f9      	ldr	r1, [r7, #12]
 80020f2:	3104      	adds	r1, #4
 80020f4:	4613      	mov	r3, r2
 80020f6:	600b      	str	r3, [r1, #0]
}
 80020f8:	bf00      	nop
 80020fa:	3714      	adds	r7, #20
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	40023c00 	.word	0x40023c00

08002108 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002112:	4b0d      	ldr	r3, [pc, #52]	; (8002148 <FLASH_Program_Word+0x40>)
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	4a0c      	ldr	r2, [pc, #48]	; (8002148 <FLASH_Program_Word+0x40>)
 8002118:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800211c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800211e:	4b0a      	ldr	r3, [pc, #40]	; (8002148 <FLASH_Program_Word+0x40>)
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	4a09      	ldr	r2, [pc, #36]	; (8002148 <FLASH_Program_Word+0x40>)
 8002124:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002128:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800212a:	4b07      	ldr	r3, [pc, #28]	; (8002148 <FLASH_Program_Word+0x40>)
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	4a06      	ldr	r2, [pc, #24]	; (8002148 <FLASH_Program_Word+0x40>)
 8002130:	f043 0301 	orr.w	r3, r3, #1
 8002134:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	601a      	str	r2, [r3, #0]
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	40023c00 	.word	0x40023c00

0800214c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	460b      	mov	r3, r1
 8002156:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002158:	4b0d      	ldr	r3, [pc, #52]	; (8002190 <FLASH_Program_HalfWord+0x44>)
 800215a:	691b      	ldr	r3, [r3, #16]
 800215c:	4a0c      	ldr	r2, [pc, #48]	; (8002190 <FLASH_Program_HalfWord+0x44>)
 800215e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002162:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002164:	4b0a      	ldr	r3, [pc, #40]	; (8002190 <FLASH_Program_HalfWord+0x44>)
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	4a09      	ldr	r2, [pc, #36]	; (8002190 <FLASH_Program_HalfWord+0x44>)
 800216a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800216e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002170:	4b07      	ldr	r3, [pc, #28]	; (8002190 <FLASH_Program_HalfWord+0x44>)
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	4a06      	ldr	r2, [pc, #24]	; (8002190 <FLASH_Program_HalfWord+0x44>)
 8002176:	f043 0301 	orr.w	r3, r3, #1
 800217a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	887a      	ldrh	r2, [r7, #2]
 8002180:	801a      	strh	r2, [r3, #0]
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	40023c00 	.word	0x40023c00

08002194 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	460b      	mov	r3, r1
 800219e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80021a0:	4b0c      	ldr	r3, [pc, #48]	; (80021d4 <FLASH_Program_Byte+0x40>)
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	4a0b      	ldr	r2, [pc, #44]	; (80021d4 <FLASH_Program_Byte+0x40>)
 80021a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80021ac:	4b09      	ldr	r3, [pc, #36]	; (80021d4 <FLASH_Program_Byte+0x40>)
 80021ae:	4a09      	ldr	r2, [pc, #36]	; (80021d4 <FLASH_Program_Byte+0x40>)
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80021b4:	4b07      	ldr	r3, [pc, #28]	; (80021d4 <FLASH_Program_Byte+0x40>)
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	4a06      	ldr	r2, [pc, #24]	; (80021d4 <FLASH_Program_Byte+0x40>)
 80021ba:	f043 0301 	orr.w	r3, r3, #1
 80021be:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	78fa      	ldrb	r2, [r7, #3]
 80021c4:	701a      	strb	r2, [r3, #0]
}
 80021c6:	bf00      	nop
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	40023c00 	.word	0x40023c00

080021d8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80021dc:	4b2f      	ldr	r3, [pc, #188]	; (800229c <FLASH_SetErrorCode+0xc4>)
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	f003 0310 	and.w	r3, r3, #16
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d008      	beq.n	80021fa <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80021e8:	4b2d      	ldr	r3, [pc, #180]	; (80022a0 <FLASH_SetErrorCode+0xc8>)
 80021ea:	69db      	ldr	r3, [r3, #28]
 80021ec:	f043 0310 	orr.w	r3, r3, #16
 80021f0:	4a2b      	ldr	r2, [pc, #172]	; (80022a0 <FLASH_SetErrorCode+0xc8>)
 80021f2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80021f4:	4b29      	ldr	r3, [pc, #164]	; (800229c <FLASH_SetErrorCode+0xc4>)
 80021f6:	2210      	movs	r2, #16
 80021f8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80021fa:	4b28      	ldr	r3, [pc, #160]	; (800229c <FLASH_SetErrorCode+0xc4>)
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	f003 0320 	and.w	r3, r3, #32
 8002202:	2b00      	cmp	r3, #0
 8002204:	d008      	beq.n	8002218 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002206:	4b26      	ldr	r3, [pc, #152]	; (80022a0 <FLASH_SetErrorCode+0xc8>)
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	f043 0308 	orr.w	r3, r3, #8
 800220e:	4a24      	ldr	r2, [pc, #144]	; (80022a0 <FLASH_SetErrorCode+0xc8>)
 8002210:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002212:	4b22      	ldr	r3, [pc, #136]	; (800229c <FLASH_SetErrorCode+0xc4>)
 8002214:	2220      	movs	r2, #32
 8002216:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002218:	4b20      	ldr	r3, [pc, #128]	; (800229c <FLASH_SetErrorCode+0xc4>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002220:	2b00      	cmp	r3, #0
 8002222:	d008      	beq.n	8002236 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002224:	4b1e      	ldr	r3, [pc, #120]	; (80022a0 <FLASH_SetErrorCode+0xc8>)
 8002226:	69db      	ldr	r3, [r3, #28]
 8002228:	f043 0304 	orr.w	r3, r3, #4
 800222c:	4a1c      	ldr	r2, [pc, #112]	; (80022a0 <FLASH_SetErrorCode+0xc8>)
 800222e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002230:	4b1a      	ldr	r3, [pc, #104]	; (800229c <FLASH_SetErrorCode+0xc4>)
 8002232:	2240      	movs	r2, #64	; 0x40
 8002234:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002236:	4b19      	ldr	r3, [pc, #100]	; (800229c <FLASH_SetErrorCode+0xc4>)
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800223e:	2b00      	cmp	r3, #0
 8002240:	d008      	beq.n	8002254 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002242:	4b17      	ldr	r3, [pc, #92]	; (80022a0 <FLASH_SetErrorCode+0xc8>)
 8002244:	69db      	ldr	r3, [r3, #28]
 8002246:	f043 0302 	orr.w	r3, r3, #2
 800224a:	4a15      	ldr	r2, [pc, #84]	; (80022a0 <FLASH_SetErrorCode+0xc8>)
 800224c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800224e:	4b13      	ldr	r3, [pc, #76]	; (800229c <FLASH_SetErrorCode+0xc4>)
 8002250:	2280      	movs	r2, #128	; 0x80
 8002252:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8002254:	4b11      	ldr	r3, [pc, #68]	; (800229c <FLASH_SetErrorCode+0xc4>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225c:	2b00      	cmp	r3, #0
 800225e:	d009      	beq.n	8002274 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002260:	4b0f      	ldr	r3, [pc, #60]	; (80022a0 <FLASH_SetErrorCode+0xc8>)
 8002262:	69db      	ldr	r3, [r3, #28]
 8002264:	f043 0301 	orr.w	r3, r3, #1
 8002268:	4a0d      	ldr	r2, [pc, #52]	; (80022a0 <FLASH_SetErrorCode+0xc8>)
 800226a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800226c:	4b0b      	ldr	r3, [pc, #44]	; (800229c <FLASH_SetErrorCode+0xc4>)
 800226e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002272:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002274:	4b09      	ldr	r3, [pc, #36]	; (800229c <FLASH_SetErrorCode+0xc4>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d008      	beq.n	8002292 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002280:	4b07      	ldr	r3, [pc, #28]	; (80022a0 <FLASH_SetErrorCode+0xc8>)
 8002282:	69db      	ldr	r3, [r3, #28]
 8002284:	f043 0320 	orr.w	r3, r3, #32
 8002288:	4a05      	ldr	r2, [pc, #20]	; (80022a0 <FLASH_SetErrorCode+0xc8>)
 800228a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800228c:	4b03      	ldr	r3, [pc, #12]	; (800229c <FLASH_SetErrorCode+0xc4>)
 800228e:	2202      	movs	r2, #2
 8002290:	60da      	str	r2, [r3, #12]
  }
}
 8002292:	bf00      	nop
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	40023c00 	.word	0x40023c00
 80022a0:	200001fc 	.word	0x200001fc

080022a4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80022b2:	2300      	movs	r3, #0
 80022b4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80022b6:	4b32      	ldr	r3, [pc, #200]	; (8002380 <HAL_FLASHEx_Erase+0xdc>)
 80022b8:	7e1b      	ldrb	r3, [r3, #24]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d101      	bne.n	80022c2 <HAL_FLASHEx_Erase+0x1e>
 80022be:	2302      	movs	r3, #2
 80022c0:	e05a      	b.n	8002378 <HAL_FLASHEx_Erase+0xd4>
 80022c2:	4b2f      	ldr	r3, [pc, #188]	; (8002380 <HAL_FLASHEx_Erase+0xdc>)
 80022c4:	2201      	movs	r2, #1
 80022c6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80022c8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80022cc:	f7ff feaa 	bl	8002024 <FLASH_WaitForLastOperation>
 80022d0:	4603      	mov	r3, r0
 80022d2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80022d4:	7bfb      	ldrb	r3, [r7, #15]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d14a      	bne.n	8002370 <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	f04f 32ff 	mov.w	r2, #4294967295
 80022e0:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d117      	bne.n	800231a <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	b2da      	uxtb	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	4619      	mov	r1, r3
 80022f6:	4610      	mov	r0, r2
 80022f8:	f000 f86a 	bl	80023d0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80022fc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002300:	f7ff fe90 	bl	8002024 <FLASH_WaitForLastOperation>
 8002304:	4603      	mov	r3, r0
 8002306:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002308:	4b1e      	ldr	r3, [pc, #120]	; (8002384 <HAL_FLASHEx_Erase+0xe0>)
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	4a1d      	ldr	r2, [pc, #116]	; (8002384 <HAL_FLASHEx_Erase+0xe0>)
 800230e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002312:	f023 0304 	bic.w	r3, r3, #4
 8002316:	6113      	str	r3, [r2, #16]
 8002318:	e028      	b.n	800236c <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	60bb      	str	r3, [r7, #8]
 8002320:	e01c      	b.n	800235c <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	b2db      	uxtb	r3, r3
 8002328:	4619      	mov	r1, r3
 800232a:	68b8      	ldr	r0, [r7, #8]
 800232c:	f000 f88a 	bl	8002444 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002330:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002334:	f7ff fe76 	bl	8002024 <FLASH_WaitForLastOperation>
 8002338:	4603      	mov	r3, r0
 800233a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800233c:	4b11      	ldr	r3, [pc, #68]	; (8002384 <HAL_FLASHEx_Erase+0xe0>)
 800233e:	691b      	ldr	r3, [r3, #16]
 8002340:	4a10      	ldr	r2, [pc, #64]	; (8002384 <HAL_FLASHEx_Erase+0xe0>)
 8002342:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8002346:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8002348:	7bfb      	ldrb	r3, [r7, #15]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d003      	beq.n	8002356 <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	68ba      	ldr	r2, [r7, #8]
 8002352:	601a      	str	r2, [r3, #0]
          break;
 8002354:	e00a      	b.n	800236c <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	3301      	adds	r3, #1
 800235a:	60bb      	str	r3, [r7, #8]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	68da      	ldr	r2, [r3, #12]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	4413      	add	r3, r2
 8002366:	68ba      	ldr	r2, [r7, #8]
 8002368:	429a      	cmp	r2, r3
 800236a:	d3da      	bcc.n	8002322 <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800236c:	f000 f904 	bl	8002578 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002370:	4b03      	ldr	r3, [pc, #12]	; (8002380 <HAL_FLASHEx_Erase+0xdc>)
 8002372:	2200      	movs	r2, #0
 8002374:	761a      	strb	r2, [r3, #24]

  return status;
 8002376:	7bfb      	ldrb	r3, [r7, #15]
}
 8002378:	4618      	mov	r0, r3
 800237a:	3710      	adds	r7, #16
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	200001fc 	.word	0x200001fc
 8002384:	40023c00 	.word	0x40023c00

08002388 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	220f      	movs	r2, #15
 8002394:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 8002396:	f000 f8b3 	bl	8002500 <FLASH_OB_GetWRP>
 800239a:	4603      	mov	r3, r0
 800239c:	461a      	mov	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 80023a2:	f000 f8b9 	bl	8002518 <FLASH_OB_GetRDP>
 80023a6:	4603      	mov	r3, r0
 80023a8:	461a      	mov	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 80023ae:	f000 f897 	bl	80024e0 <FLASH_OB_GetUser>
 80023b2:	4603      	mov	r3, r0
 80023b4:	461a      	mov	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 80023ba:	f000 f8cd 	bl	8002558 <FLASH_OB_GetBOR>
 80023be:	4603      	mov	r3, r0
 80023c0:	461a      	mov	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	615a      	str	r2, [r3, #20]
}
 80023c6:	bf00      	nop
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
	...

080023d0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	6039      	str	r1, [r7, #0]
 80023da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80023dc:	4b18      	ldr	r3, [pc, #96]	; (8002440 <FLASH_MassErase+0x70>)
 80023de:	691b      	ldr	r3, [r3, #16]
 80023e0:	4a17      	ldr	r2, [pc, #92]	; (8002440 <FLASH_MassErase+0x70>)
 80023e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023e6:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	2b03      	cmp	r3, #3
 80023ec:	d108      	bne.n	8002400 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 80023ee:	4b14      	ldr	r3, [pc, #80]	; (8002440 <FLASH_MassErase+0x70>)
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	4a13      	ldr	r2, [pc, #76]	; (8002440 <FLASH_MassErase+0x70>)
 80023f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023f8:	f043 0304 	orr.w	r3, r3, #4
 80023fc:	6113      	str	r3, [r2, #16]
 80023fe:	e00f      	b.n	8002420 <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d106      	bne.n	8002414 <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 8002406:	4b0e      	ldr	r3, [pc, #56]	; (8002440 <FLASH_MassErase+0x70>)
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	4a0d      	ldr	r2, [pc, #52]	; (8002440 <FLASH_MassErase+0x70>)
 800240c:	f043 0304 	orr.w	r3, r3, #4
 8002410:	6113      	str	r3, [r2, #16]
 8002412:	e005      	b.n	8002420 <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8002414:	4b0a      	ldr	r3, [pc, #40]	; (8002440 <FLASH_MassErase+0x70>)
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	4a09      	ldr	r2, [pc, #36]	; (8002440 <FLASH_MassErase+0x70>)
 800241a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800241e:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8002420:	4b07      	ldr	r3, [pc, #28]	; (8002440 <FLASH_MassErase+0x70>)
 8002422:	691a      	ldr	r2, [r3, #16]
 8002424:	79fb      	ldrb	r3, [r7, #7]
 8002426:	021b      	lsls	r3, r3, #8
 8002428:	4313      	orrs	r3, r2
 800242a:	4a05      	ldr	r2, [pc, #20]	; (8002440 <FLASH_MassErase+0x70>)
 800242c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002430:	6113      	str	r3, [r2, #16]
}
 8002432:	bf00      	nop
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	40023c00 	.word	0x40023c00

08002444 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	460b      	mov	r3, r1
 800244e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002450:	2300      	movs	r3, #0
 8002452:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002454:	78fb      	ldrb	r3, [r7, #3]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d102      	bne.n	8002460 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800245a:	2300      	movs	r3, #0
 800245c:	60fb      	str	r3, [r7, #12]
 800245e:	e010      	b.n	8002482 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002460:	78fb      	ldrb	r3, [r7, #3]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d103      	bne.n	800246e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002466:	f44f 7380 	mov.w	r3, #256	; 0x100
 800246a:	60fb      	str	r3, [r7, #12]
 800246c:	e009      	b.n	8002482 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800246e:	78fb      	ldrb	r3, [r7, #3]
 8002470:	2b02      	cmp	r3, #2
 8002472:	d103      	bne.n	800247c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002474:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	e002      	b.n	8002482 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800247c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002480:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2b0b      	cmp	r3, #11
 8002486:	d902      	bls.n	800248e <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3304      	adds	r3, #4
 800248c:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800248e:	4b13      	ldr	r3, [pc, #76]	; (80024dc <FLASH_Erase_Sector+0x98>)
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	4a12      	ldr	r2, [pc, #72]	; (80024dc <FLASH_Erase_Sector+0x98>)
 8002494:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002498:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800249a:	4b10      	ldr	r3, [pc, #64]	; (80024dc <FLASH_Erase_Sector+0x98>)
 800249c:	691a      	ldr	r2, [r3, #16]
 800249e:	490f      	ldr	r1, [pc, #60]	; (80024dc <FLASH_Erase_Sector+0x98>)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80024a6:	4b0d      	ldr	r3, [pc, #52]	; (80024dc <FLASH_Erase_Sector+0x98>)
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	4a0c      	ldr	r2, [pc, #48]	; (80024dc <FLASH_Erase_Sector+0x98>)
 80024ac:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80024b0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80024b2:	4b0a      	ldr	r3, [pc, #40]	; (80024dc <FLASH_Erase_Sector+0x98>)
 80024b4:	691a      	ldr	r2, [r3, #16]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	4313      	orrs	r3, r2
 80024bc:	4a07      	ldr	r2, [pc, #28]	; (80024dc <FLASH_Erase_Sector+0x98>)
 80024be:	f043 0302 	orr.w	r3, r3, #2
 80024c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80024c4:	4b05      	ldr	r3, [pc, #20]	; (80024dc <FLASH_Erase_Sector+0x98>)
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	4a04      	ldr	r2, [pc, #16]	; (80024dc <FLASH_Erase_Sector+0x98>)
 80024ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ce:	6113      	str	r3, [r2, #16]
}
 80024d0:	bf00      	nop
 80024d2:	3714      	adds	r7, #20
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	40023c00 	.word	0x40023c00

080024e0 <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 80024e4:	4b05      	ldr	r3, [pc, #20]	; (80024fc <FLASH_OB_GetUser+0x1c>)
 80024e6:	695b      	ldr	r3, [r3, #20]
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	f023 031f 	bic.w	r3, r3, #31
 80024ee:	b2db      	uxtb	r3, r3
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	40023c00 	.word	0x40023c00

08002500 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 8002504:	4b03      	ldr	r3, [pc, #12]	; (8002514 <FLASH_OB_GetWRP+0x14>)
 8002506:	881b      	ldrh	r3, [r3, #0]
 8002508:	b29b      	uxth	r3, r3
}
 800250a:	4618      	mov	r0, r3
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	40023c16 	.word	0x40023c16

08002518 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 800251e:	23aa      	movs	r3, #170	; 0xaa
 8002520:	71fb      	strb	r3, [r7, #7]

  if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2)
 8002522:	4b0c      	ldr	r3, [pc, #48]	; (8002554 <FLASH_OB_GetRDP+0x3c>)
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2bcc      	cmp	r3, #204	; 0xcc
 800252a:	d102      	bne.n	8002532 <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 800252c:	23cc      	movs	r3, #204	; 0xcc
 800252e:	71fb      	strb	r3, [r7, #7]
 8002530:	e009      	b.n	8002546 <FLASH_OB_GetRDP+0x2e>
  }
  else if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0)
 8002532:	4b08      	ldr	r3, [pc, #32]	; (8002554 <FLASH_OB_GetRDP+0x3c>)
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2baa      	cmp	r3, #170	; 0xaa
 800253a:	d102      	bne.n	8002542 <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 800253c:	23aa      	movs	r3, #170	; 0xaa
 800253e:	71fb      	strb	r3, [r7, #7]
 8002540:	e001      	b.n	8002546 <FLASH_OB_GetRDP+0x2e>
  }
  else
  {
    readstatus = OB_RDP_LEVEL_1;
 8002542:	2355      	movs	r3, #85	; 0x55
 8002544:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 8002546:	79fb      	ldrb	r3, [r7, #7]
}
 8002548:	4618      	mov	r0, r3
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr
 8002554:	40023c15 	.word	0x40023c15

08002558 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 800255c:	4b05      	ldr	r3, [pc, #20]	; (8002574 <FLASH_OB_GetBOR+0x1c>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	b2db      	uxtb	r3, r3
 8002562:	f003 030c 	and.w	r3, r3, #12
 8002566:	b2db      	uxtb	r3, r3
}
 8002568:	4618      	mov	r0, r3
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	40023c14 	.word	0x40023c14

08002578 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 800257c:	4b20      	ldr	r3, [pc, #128]	; (8002600 <FLASH_FlushCaches+0x88>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002584:	2b00      	cmp	r3, #0
 8002586:	d017      	beq.n	80025b8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002588:	4b1d      	ldr	r3, [pc, #116]	; (8002600 <FLASH_FlushCaches+0x88>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a1c      	ldr	r2, [pc, #112]	; (8002600 <FLASH_FlushCaches+0x88>)
 800258e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002592:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002594:	4b1a      	ldr	r3, [pc, #104]	; (8002600 <FLASH_FlushCaches+0x88>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a19      	ldr	r2, [pc, #100]	; (8002600 <FLASH_FlushCaches+0x88>)
 800259a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800259e:	6013      	str	r3, [r2, #0]
 80025a0:	4b17      	ldr	r3, [pc, #92]	; (8002600 <FLASH_FlushCaches+0x88>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a16      	ldr	r2, [pc, #88]	; (8002600 <FLASH_FlushCaches+0x88>)
 80025a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80025aa:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025ac:	4b14      	ldr	r3, [pc, #80]	; (8002600 <FLASH_FlushCaches+0x88>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a13      	ldr	r2, [pc, #76]	; (8002600 <FLASH_FlushCaches+0x88>)
 80025b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025b6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80025b8:	4b11      	ldr	r3, [pc, #68]	; (8002600 <FLASH_FlushCaches+0x88>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d017      	beq.n	80025f4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80025c4:	4b0e      	ldr	r3, [pc, #56]	; (8002600 <FLASH_FlushCaches+0x88>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a0d      	ldr	r2, [pc, #52]	; (8002600 <FLASH_FlushCaches+0x88>)
 80025ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80025ce:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80025d0:	4b0b      	ldr	r3, [pc, #44]	; (8002600 <FLASH_FlushCaches+0x88>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a0a      	ldr	r2, [pc, #40]	; (8002600 <FLASH_FlushCaches+0x88>)
 80025d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025da:	6013      	str	r3, [r2, #0]
 80025dc:	4b08      	ldr	r3, [pc, #32]	; (8002600 <FLASH_FlushCaches+0x88>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a07      	ldr	r2, [pc, #28]	; (8002600 <FLASH_FlushCaches+0x88>)
 80025e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80025e6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80025e8:	4b05      	ldr	r3, [pc, #20]	; (8002600 <FLASH_FlushCaches+0x88>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a04      	ldr	r2, [pc, #16]	; (8002600 <FLASH_FlushCaches+0x88>)
 80025ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025f2:	6013      	str	r3, [r2, #0]
  }
}
 80025f4:	bf00      	nop
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	40023c00 	.word	0x40023c00

08002604 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002604:	b480      	push	{r7}
 8002606:	b089      	sub	sp, #36	; 0x24
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800260e:	2300      	movs	r3, #0
 8002610:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002612:	2300      	movs	r3, #0
 8002614:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002616:	2300      	movs	r3, #0
 8002618:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800261a:	2300      	movs	r3, #0
 800261c:	61fb      	str	r3, [r7, #28]
 800261e:	e177      	b.n	8002910 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002620:	2201      	movs	r2, #1
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	4013      	ands	r3, r2
 8002632:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002634:	693a      	ldr	r2, [r7, #16]
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	429a      	cmp	r2, r3
 800263a:	f040 8166 	bne.w	800290a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f003 0303 	and.w	r3, r3, #3
 8002646:	2b01      	cmp	r3, #1
 8002648:	d005      	beq.n	8002656 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002652:	2b02      	cmp	r3, #2
 8002654:	d130      	bne.n	80026b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	2203      	movs	r2, #3
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	43db      	mvns	r3, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4013      	ands	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	68da      	ldr	r2, [r3, #12]
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	fa02 f303 	lsl.w	r3, r2, r3
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	4313      	orrs	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800268c:	2201      	movs	r2, #1
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	43db      	mvns	r3, r3
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	4013      	ands	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	091b      	lsrs	r3, r3, #4
 80026a2:	f003 0201 	and.w	r2, r3, #1
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f003 0303 	and.w	r3, r3, #3
 80026c0:	2b03      	cmp	r3, #3
 80026c2:	d017      	beq.n	80026f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	2203      	movs	r2, #3
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	43db      	mvns	r3, r3
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4013      	ands	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	689a      	ldr	r2, [r3, #8]
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f003 0303 	and.w	r3, r3, #3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d123      	bne.n	8002748 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	08da      	lsrs	r2, r3, #3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	3208      	adds	r2, #8
 8002708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800270c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	f003 0307 	and.w	r3, r3, #7
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	220f      	movs	r2, #15
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	43db      	mvns	r3, r3
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4013      	ands	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	691a      	ldr	r2, [r3, #16]
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	f003 0307 	and.w	r3, r3, #7
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	4313      	orrs	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	08da      	lsrs	r2, r3, #3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	3208      	adds	r2, #8
 8002742:	69b9      	ldr	r1, [r7, #24]
 8002744:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	2203      	movs	r2, #3
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	43db      	mvns	r3, r3
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	4013      	ands	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f003 0203 	and.w	r2, r3, #3
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	4313      	orrs	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002784:	2b00      	cmp	r3, #0
 8002786:	f000 80c0 	beq.w	800290a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800278a:	2300      	movs	r3, #0
 800278c:	60fb      	str	r3, [r7, #12]
 800278e:	4b66      	ldr	r3, [pc, #408]	; (8002928 <HAL_GPIO_Init+0x324>)
 8002790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002792:	4a65      	ldr	r2, [pc, #404]	; (8002928 <HAL_GPIO_Init+0x324>)
 8002794:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002798:	6453      	str	r3, [r2, #68]	; 0x44
 800279a:	4b63      	ldr	r3, [pc, #396]	; (8002928 <HAL_GPIO_Init+0x324>)
 800279c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027a6:	4a61      	ldr	r2, [pc, #388]	; (800292c <HAL_GPIO_Init+0x328>)
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	089b      	lsrs	r3, r3, #2
 80027ac:	3302      	adds	r3, #2
 80027ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	f003 0303 	and.w	r3, r3, #3
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	220f      	movs	r2, #15
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	43db      	mvns	r3, r3
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	4013      	ands	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a58      	ldr	r2, [pc, #352]	; (8002930 <HAL_GPIO_Init+0x32c>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d037      	beq.n	8002842 <HAL_GPIO_Init+0x23e>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a57      	ldr	r2, [pc, #348]	; (8002934 <HAL_GPIO_Init+0x330>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d031      	beq.n	800283e <HAL_GPIO_Init+0x23a>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a56      	ldr	r2, [pc, #344]	; (8002938 <HAL_GPIO_Init+0x334>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d02b      	beq.n	800283a <HAL_GPIO_Init+0x236>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a55      	ldr	r2, [pc, #340]	; (800293c <HAL_GPIO_Init+0x338>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d025      	beq.n	8002836 <HAL_GPIO_Init+0x232>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a54      	ldr	r2, [pc, #336]	; (8002940 <HAL_GPIO_Init+0x33c>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d01f      	beq.n	8002832 <HAL_GPIO_Init+0x22e>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a53      	ldr	r2, [pc, #332]	; (8002944 <HAL_GPIO_Init+0x340>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d019      	beq.n	800282e <HAL_GPIO_Init+0x22a>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a52      	ldr	r2, [pc, #328]	; (8002948 <HAL_GPIO_Init+0x344>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d013      	beq.n	800282a <HAL_GPIO_Init+0x226>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a51      	ldr	r2, [pc, #324]	; (800294c <HAL_GPIO_Init+0x348>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d00d      	beq.n	8002826 <HAL_GPIO_Init+0x222>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a50      	ldr	r2, [pc, #320]	; (8002950 <HAL_GPIO_Init+0x34c>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d007      	beq.n	8002822 <HAL_GPIO_Init+0x21e>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a4f      	ldr	r2, [pc, #316]	; (8002954 <HAL_GPIO_Init+0x350>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d101      	bne.n	800281e <HAL_GPIO_Init+0x21a>
 800281a:	2309      	movs	r3, #9
 800281c:	e012      	b.n	8002844 <HAL_GPIO_Init+0x240>
 800281e:	230a      	movs	r3, #10
 8002820:	e010      	b.n	8002844 <HAL_GPIO_Init+0x240>
 8002822:	2308      	movs	r3, #8
 8002824:	e00e      	b.n	8002844 <HAL_GPIO_Init+0x240>
 8002826:	2307      	movs	r3, #7
 8002828:	e00c      	b.n	8002844 <HAL_GPIO_Init+0x240>
 800282a:	2306      	movs	r3, #6
 800282c:	e00a      	b.n	8002844 <HAL_GPIO_Init+0x240>
 800282e:	2305      	movs	r3, #5
 8002830:	e008      	b.n	8002844 <HAL_GPIO_Init+0x240>
 8002832:	2304      	movs	r3, #4
 8002834:	e006      	b.n	8002844 <HAL_GPIO_Init+0x240>
 8002836:	2303      	movs	r3, #3
 8002838:	e004      	b.n	8002844 <HAL_GPIO_Init+0x240>
 800283a:	2302      	movs	r3, #2
 800283c:	e002      	b.n	8002844 <HAL_GPIO_Init+0x240>
 800283e:	2301      	movs	r3, #1
 8002840:	e000      	b.n	8002844 <HAL_GPIO_Init+0x240>
 8002842:	2300      	movs	r3, #0
 8002844:	69fa      	ldr	r2, [r7, #28]
 8002846:	f002 0203 	and.w	r2, r2, #3
 800284a:	0092      	lsls	r2, r2, #2
 800284c:	4093      	lsls	r3, r2
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4313      	orrs	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002854:	4935      	ldr	r1, [pc, #212]	; (800292c <HAL_GPIO_Init+0x328>)
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	089b      	lsrs	r3, r3, #2
 800285a:	3302      	adds	r3, #2
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002862:	4b3d      	ldr	r3, [pc, #244]	; (8002958 <HAL_GPIO_Init+0x354>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	43db      	mvns	r3, r3
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	4013      	ands	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d003      	beq.n	8002886 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	4313      	orrs	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002886:	4a34      	ldr	r2, [pc, #208]	; (8002958 <HAL_GPIO_Init+0x354>)
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800288c:	4b32      	ldr	r3, [pc, #200]	; (8002958 <HAL_GPIO_Init+0x354>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	43db      	mvns	r3, r3
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	4013      	ands	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d003      	beq.n	80028b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028b0:	4a29      	ldr	r2, [pc, #164]	; (8002958 <HAL_GPIO_Init+0x354>)
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028b6:	4b28      	ldr	r3, [pc, #160]	; (8002958 <HAL_GPIO_Init+0x354>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	43db      	mvns	r3, r3
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	4013      	ands	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d003      	beq.n	80028da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028da:	4a1f      	ldr	r2, [pc, #124]	; (8002958 <HAL_GPIO_Init+0x354>)
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028e0:	4b1d      	ldr	r3, [pc, #116]	; (8002958 <HAL_GPIO_Init+0x354>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	43db      	mvns	r3, r3
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	4013      	ands	r3, r2
 80028ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d003      	beq.n	8002904 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	4313      	orrs	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002904:	4a14      	ldr	r2, [pc, #80]	; (8002958 <HAL_GPIO_Init+0x354>)
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	3301      	adds	r3, #1
 800290e:	61fb      	str	r3, [r7, #28]
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	2b0f      	cmp	r3, #15
 8002914:	f67f ae84 	bls.w	8002620 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002918:	bf00      	nop
 800291a:	bf00      	nop
 800291c:	3724      	adds	r7, #36	; 0x24
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	40023800 	.word	0x40023800
 800292c:	40013800 	.word	0x40013800
 8002930:	40020000 	.word	0x40020000
 8002934:	40020400 	.word	0x40020400
 8002938:	40020800 	.word	0x40020800
 800293c:	40020c00 	.word	0x40020c00
 8002940:	40021000 	.word	0x40021000
 8002944:	40021400 	.word	0x40021400
 8002948:	40021800 	.word	0x40021800
 800294c:	40021c00 	.word	0x40021c00
 8002950:	40022000 	.word	0x40022000
 8002954:	40022400 	.word	0x40022400
 8002958:	40013c00 	.word	0x40013c00

0800295c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	460b      	mov	r3, r1
 8002966:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	691a      	ldr	r2, [r3, #16]
 800296c:	887b      	ldrh	r3, [r7, #2]
 800296e:	4013      	ands	r3, r2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d002      	beq.n	800297a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002974:	2301      	movs	r3, #1
 8002976:	73fb      	strb	r3, [r7, #15]
 8002978:	e001      	b.n	800297e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800297a:	2300      	movs	r3, #0
 800297c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800297e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002980:	4618      	mov	r0, r3
 8002982:	3714      	adds	r7, #20
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	460b      	mov	r3, r1
 8002996:	807b      	strh	r3, [r7, #2]
 8002998:	4613      	mov	r3, r2
 800299a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800299c:	787b      	ldrb	r3, [r7, #1]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029a2:	887a      	ldrh	r2, [r7, #2]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029a8:	e003      	b.n	80029b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029aa:	887b      	ldrh	r3, [r7, #2]
 80029ac:	041a      	lsls	r2, r3, #16
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	619a      	str	r2, [r3, #24]
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
	...

080029c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d101      	bne.n	80029d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e264      	b.n	8002e9c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d075      	beq.n	8002aca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029de:	4ba3      	ldr	r3, [pc, #652]	; (8002c6c <HAL_RCC_OscConfig+0x2ac>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 030c 	and.w	r3, r3, #12
 80029e6:	2b04      	cmp	r3, #4
 80029e8:	d00c      	beq.n	8002a04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029ea:	4ba0      	ldr	r3, [pc, #640]	; (8002c6c <HAL_RCC_OscConfig+0x2ac>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029f2:	2b08      	cmp	r3, #8
 80029f4:	d112      	bne.n	8002a1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029f6:	4b9d      	ldr	r3, [pc, #628]	; (8002c6c <HAL_RCC_OscConfig+0x2ac>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a02:	d10b      	bne.n	8002a1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a04:	4b99      	ldr	r3, [pc, #612]	; (8002c6c <HAL_RCC_OscConfig+0x2ac>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d05b      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x108>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d157      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e23f      	b.n	8002e9c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a24:	d106      	bne.n	8002a34 <HAL_RCC_OscConfig+0x74>
 8002a26:	4b91      	ldr	r3, [pc, #580]	; (8002c6c <HAL_RCC_OscConfig+0x2ac>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a90      	ldr	r2, [pc, #576]	; (8002c6c <HAL_RCC_OscConfig+0x2ac>)
 8002a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a30:	6013      	str	r3, [r2, #0]
 8002a32:	e01d      	b.n	8002a70 <HAL_RCC_OscConfig+0xb0>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a3c:	d10c      	bne.n	8002a58 <HAL_RCC_OscConfig+0x98>
 8002a3e:	4b8b      	ldr	r3, [pc, #556]	; (8002c6c <HAL_RCC_OscConfig+0x2ac>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a8a      	ldr	r2, [pc, #552]	; (8002c6c <HAL_RCC_OscConfig+0x2ac>)
 8002a44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a48:	6013      	str	r3, [r2, #0]
 8002a4a:	4b88      	ldr	r3, [pc, #544]	; (8002c6c <HAL_RCC_OscConfig+0x2ac>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a87      	ldr	r2, [pc, #540]	; (8002c6c <HAL_RCC_OscConfig+0x2ac>)
 8002a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a54:	6013      	str	r3, [r2, #0]
 8002a56:	e00b      	b.n	8002a70 <HAL_RCC_OscConfig+0xb0>
 8002a58:	4b84      	ldr	r3, [pc, #528]	; (8002c6c <HAL_RCC_OscConfig+0x2ac>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a83      	ldr	r2, [pc, #524]	; (8002c6c <HAL_RCC_OscConfig+0x2ac>)
 8002a5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a62:	6013      	str	r3, [r2, #0]
 8002a64:	4b81      	ldr	r3, [pc, #516]	; (8002c6c <HAL_RCC_OscConfig+0x2ac>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a80      	ldr	r2, [pc, #512]	; (8002c6c <HAL_RCC_OscConfig+0x2ac>)
 8002a6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d013      	beq.n	8002aa0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a78:	f7ff f8ea 	bl	8001c50 <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a80:	f7ff f8e6 	bl	8001c50 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b64      	cmp	r3, #100	; 0x64
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e204      	b.n	8002e9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a92:	4b76      	ldr	r3, [pc, #472]	; (8002c6c <HAL_RCC_OscConfig+0x2ac>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d0f0      	beq.n	8002a80 <HAL_RCC_OscConfig+0xc0>
 8002a9e:	e014      	b.n	8002aca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa0:	f7ff f8d6 	bl	8001c50 <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aa8:	f7ff f8d2 	bl	8001c50 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b64      	cmp	r3, #100	; 0x64
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e1f0      	b.n	8002e9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aba:	4b6c      	ldr	r3, [pc, #432]	; (8002c6c <HAL_RCC_OscConfig+0x2ac>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1f0      	bne.n	8002aa8 <HAL_RCC_OscConfig+0xe8>
 8002ac6:	e000      	b.n	8002aca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d063      	beq.n	8002b9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ad6:	4b65      	ldr	r3, [pc, #404]	; (8002c6c <HAL_RCC_OscConfig+0x2ac>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f003 030c 	and.w	r3, r3, #12
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00b      	beq.n	8002afa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ae2:	4b62      	ldr	r3, [pc, #392]	; (8002c6c <HAL_RCC_OscConfig+0x2ac>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002aea:	2b08      	cmp	r3, #8
 8002aec:	d11c      	bne.n	8002b28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aee:	4b5f      	ldr	r3, [pc, #380]	; (8002c6c <HAL_RCC_OscConfig+0x2ac>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d116      	bne.n	8002b28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002afa:	4b5c      	ldr	r3, [pc, #368]	; (8002c6c <HAL_RCC_OscConfig+0x2ac>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d005      	beq.n	8002b12 <HAL_RCC_OscConfig+0x152>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d001      	beq.n	8002b12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e1c4      	b.n	8002e9c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b12:	4b56      	ldr	r3, [pc, #344]	; (8002c6c <HAL_RCC_OscConfig+0x2ac>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	4952      	ldr	r1, [pc, #328]	; (8002c6c <HAL_RCC_OscConfig+0x2ac>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b26:	e03a      	b.n	8002b9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d020      	beq.n	8002b72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b30:	4b4f      	ldr	r3, [pc, #316]	; (8002c70 <HAL_RCC_OscConfig+0x2b0>)
 8002b32:	2201      	movs	r2, #1
 8002b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b36:	f7ff f88b 	bl	8001c50 <HAL_GetTick>
 8002b3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b3c:	e008      	b.n	8002b50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b3e:	f7ff f887 	bl	8001c50 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e1a5      	b.n	8002e9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b50:	4b46      	ldr	r3, [pc, #280]	; (8002c6c <HAL_RCC_OscConfig+0x2ac>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d0f0      	beq.n	8002b3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b5c:	4b43      	ldr	r3, [pc, #268]	; (8002c6c <HAL_RCC_OscConfig+0x2ac>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	4940      	ldr	r1, [pc, #256]	; (8002c6c <HAL_RCC_OscConfig+0x2ac>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	600b      	str	r3, [r1, #0]
 8002b70:	e015      	b.n	8002b9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b72:	4b3f      	ldr	r3, [pc, #252]	; (8002c70 <HAL_RCC_OscConfig+0x2b0>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b78:	f7ff f86a 	bl	8001c50 <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b80:	f7ff f866 	bl	8001c50 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e184      	b.n	8002e9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b92:	4b36      	ldr	r3, [pc, #216]	; (8002c6c <HAL_RCC_OscConfig+0x2ac>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1f0      	bne.n	8002b80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0308 	and.w	r3, r3, #8
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d030      	beq.n	8002c0c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d016      	beq.n	8002be0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bb2:	4b30      	ldr	r3, [pc, #192]	; (8002c74 <HAL_RCC_OscConfig+0x2b4>)
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb8:	f7ff f84a 	bl	8001c50 <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bc0:	f7ff f846 	bl	8001c50 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e164      	b.n	8002e9c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bd2:	4b26      	ldr	r3, [pc, #152]	; (8002c6c <HAL_RCC_OscConfig+0x2ac>)
 8002bd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d0f0      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x200>
 8002bde:	e015      	b.n	8002c0c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002be0:	4b24      	ldr	r3, [pc, #144]	; (8002c74 <HAL_RCC_OscConfig+0x2b4>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002be6:	f7ff f833 	bl	8001c50 <HAL_GetTick>
 8002bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bec:	e008      	b.n	8002c00 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bee:	f7ff f82f 	bl	8001c50 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e14d      	b.n	8002e9c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c00:	4b1a      	ldr	r3, [pc, #104]	; (8002c6c <HAL_RCC_OscConfig+0x2ac>)
 8002c02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c04:	f003 0302 	and.w	r3, r3, #2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d1f0      	bne.n	8002bee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0304 	and.w	r3, r3, #4
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f000 80a0 	beq.w	8002d5a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c1e:	4b13      	ldr	r3, [pc, #76]	; (8002c6c <HAL_RCC_OscConfig+0x2ac>)
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d10f      	bne.n	8002c4a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	60bb      	str	r3, [r7, #8]
 8002c2e:	4b0f      	ldr	r3, [pc, #60]	; (8002c6c <HAL_RCC_OscConfig+0x2ac>)
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	4a0e      	ldr	r2, [pc, #56]	; (8002c6c <HAL_RCC_OscConfig+0x2ac>)
 8002c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c38:	6413      	str	r3, [r2, #64]	; 0x40
 8002c3a:	4b0c      	ldr	r3, [pc, #48]	; (8002c6c <HAL_RCC_OscConfig+0x2ac>)
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c42:	60bb      	str	r3, [r7, #8]
 8002c44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c46:	2301      	movs	r3, #1
 8002c48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c4a:	4b0b      	ldr	r3, [pc, #44]	; (8002c78 <HAL_RCC_OscConfig+0x2b8>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d121      	bne.n	8002c9a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c56:	4b08      	ldr	r3, [pc, #32]	; (8002c78 <HAL_RCC_OscConfig+0x2b8>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a07      	ldr	r2, [pc, #28]	; (8002c78 <HAL_RCC_OscConfig+0x2b8>)
 8002c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c62:	f7fe fff5 	bl	8001c50 <HAL_GetTick>
 8002c66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c68:	e011      	b.n	8002c8e <HAL_RCC_OscConfig+0x2ce>
 8002c6a:	bf00      	nop
 8002c6c:	40023800 	.word	0x40023800
 8002c70:	42470000 	.word	0x42470000
 8002c74:	42470e80 	.word	0x42470e80
 8002c78:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c7c:	f7fe ffe8 	bl	8001c50 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e106      	b.n	8002e9c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c8e:	4b85      	ldr	r3, [pc, #532]	; (8002ea4 <HAL_RCC_OscConfig+0x4e4>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d0f0      	beq.n	8002c7c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d106      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x2f0>
 8002ca2:	4b81      	ldr	r3, [pc, #516]	; (8002ea8 <HAL_RCC_OscConfig+0x4e8>)
 8002ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca6:	4a80      	ldr	r2, [pc, #512]	; (8002ea8 <HAL_RCC_OscConfig+0x4e8>)
 8002ca8:	f043 0301 	orr.w	r3, r3, #1
 8002cac:	6713      	str	r3, [r2, #112]	; 0x70
 8002cae:	e01c      	b.n	8002cea <HAL_RCC_OscConfig+0x32a>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	2b05      	cmp	r3, #5
 8002cb6:	d10c      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x312>
 8002cb8:	4b7b      	ldr	r3, [pc, #492]	; (8002ea8 <HAL_RCC_OscConfig+0x4e8>)
 8002cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cbc:	4a7a      	ldr	r2, [pc, #488]	; (8002ea8 <HAL_RCC_OscConfig+0x4e8>)
 8002cbe:	f043 0304 	orr.w	r3, r3, #4
 8002cc2:	6713      	str	r3, [r2, #112]	; 0x70
 8002cc4:	4b78      	ldr	r3, [pc, #480]	; (8002ea8 <HAL_RCC_OscConfig+0x4e8>)
 8002cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc8:	4a77      	ldr	r2, [pc, #476]	; (8002ea8 <HAL_RCC_OscConfig+0x4e8>)
 8002cca:	f043 0301 	orr.w	r3, r3, #1
 8002cce:	6713      	str	r3, [r2, #112]	; 0x70
 8002cd0:	e00b      	b.n	8002cea <HAL_RCC_OscConfig+0x32a>
 8002cd2:	4b75      	ldr	r3, [pc, #468]	; (8002ea8 <HAL_RCC_OscConfig+0x4e8>)
 8002cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd6:	4a74      	ldr	r2, [pc, #464]	; (8002ea8 <HAL_RCC_OscConfig+0x4e8>)
 8002cd8:	f023 0301 	bic.w	r3, r3, #1
 8002cdc:	6713      	str	r3, [r2, #112]	; 0x70
 8002cde:	4b72      	ldr	r3, [pc, #456]	; (8002ea8 <HAL_RCC_OscConfig+0x4e8>)
 8002ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce2:	4a71      	ldr	r2, [pc, #452]	; (8002ea8 <HAL_RCC_OscConfig+0x4e8>)
 8002ce4:	f023 0304 	bic.w	r3, r3, #4
 8002ce8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d015      	beq.n	8002d1e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf2:	f7fe ffad 	bl	8001c50 <HAL_GetTick>
 8002cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cf8:	e00a      	b.n	8002d10 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cfa:	f7fe ffa9 	bl	8001c50 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d901      	bls.n	8002d10 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e0c5      	b.n	8002e9c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d10:	4b65      	ldr	r3, [pc, #404]	; (8002ea8 <HAL_RCC_OscConfig+0x4e8>)
 8002d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d0ee      	beq.n	8002cfa <HAL_RCC_OscConfig+0x33a>
 8002d1c:	e014      	b.n	8002d48 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d1e:	f7fe ff97 	bl	8001c50 <HAL_GetTick>
 8002d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d24:	e00a      	b.n	8002d3c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d26:	f7fe ff93 	bl	8001c50 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d901      	bls.n	8002d3c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e0af      	b.n	8002e9c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d3c:	4b5a      	ldr	r3, [pc, #360]	; (8002ea8 <HAL_RCC_OscConfig+0x4e8>)
 8002d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1ee      	bne.n	8002d26 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d48:	7dfb      	ldrb	r3, [r7, #23]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d105      	bne.n	8002d5a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d4e:	4b56      	ldr	r3, [pc, #344]	; (8002ea8 <HAL_RCC_OscConfig+0x4e8>)
 8002d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d52:	4a55      	ldr	r2, [pc, #340]	; (8002ea8 <HAL_RCC_OscConfig+0x4e8>)
 8002d54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d58:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f000 809b 	beq.w	8002e9a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d64:	4b50      	ldr	r3, [pc, #320]	; (8002ea8 <HAL_RCC_OscConfig+0x4e8>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f003 030c 	and.w	r3, r3, #12
 8002d6c:	2b08      	cmp	r3, #8
 8002d6e:	d05c      	beq.n	8002e2a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d141      	bne.n	8002dfc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d78:	4b4c      	ldr	r3, [pc, #304]	; (8002eac <HAL_RCC_OscConfig+0x4ec>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7e:	f7fe ff67 	bl	8001c50 <HAL_GetTick>
 8002d82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d84:	e008      	b.n	8002d98 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d86:	f7fe ff63 	bl	8001c50 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e081      	b.n	8002e9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d98:	4b43      	ldr	r3, [pc, #268]	; (8002ea8 <HAL_RCC_OscConfig+0x4e8>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1f0      	bne.n	8002d86 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	69da      	ldr	r2, [r3, #28]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	431a      	orrs	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db2:	019b      	lsls	r3, r3, #6
 8002db4:	431a      	orrs	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dba:	085b      	lsrs	r3, r3, #1
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	041b      	lsls	r3, r3, #16
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc6:	061b      	lsls	r3, r3, #24
 8002dc8:	4937      	ldr	r1, [pc, #220]	; (8002ea8 <HAL_RCC_OscConfig+0x4e8>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dce:	4b37      	ldr	r3, [pc, #220]	; (8002eac <HAL_RCC_OscConfig+0x4ec>)
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd4:	f7fe ff3c 	bl	8001c50 <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ddc:	f7fe ff38 	bl	8001c50 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e056      	b.n	8002e9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dee:	4b2e      	ldr	r3, [pc, #184]	; (8002ea8 <HAL_RCC_OscConfig+0x4e8>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d0f0      	beq.n	8002ddc <HAL_RCC_OscConfig+0x41c>
 8002dfa:	e04e      	b.n	8002e9a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dfc:	4b2b      	ldr	r3, [pc, #172]	; (8002eac <HAL_RCC_OscConfig+0x4ec>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e02:	f7fe ff25 	bl	8001c50 <HAL_GetTick>
 8002e06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e08:	e008      	b.n	8002e1c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e0a:	f7fe ff21 	bl	8001c50 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e03f      	b.n	8002e9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e1c:	4b22      	ldr	r3, [pc, #136]	; (8002ea8 <HAL_RCC_OscConfig+0x4e8>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1f0      	bne.n	8002e0a <HAL_RCC_OscConfig+0x44a>
 8002e28:	e037      	b.n	8002e9a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d101      	bne.n	8002e36 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e032      	b.n	8002e9c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e36:	4b1c      	ldr	r3, [pc, #112]	; (8002ea8 <HAL_RCC_OscConfig+0x4e8>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d028      	beq.n	8002e96 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d121      	bne.n	8002e96 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d11a      	bne.n	8002e96 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e66:	4013      	ands	r3, r2
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e6c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d111      	bne.n	8002e96 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7c:	085b      	lsrs	r3, r3, #1
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d107      	bne.n	8002e96 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e90:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d001      	beq.n	8002e9a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e000      	b.n	8002e9c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3718      	adds	r7, #24
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	40007000 	.word	0x40007000
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	42470060 	.word	0x42470060

08002eb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d101      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e0cc      	b.n	800305e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ec4:	4b68      	ldr	r3, [pc, #416]	; (8003068 <HAL_RCC_ClockConfig+0x1b8>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 030f 	and.w	r3, r3, #15
 8002ecc:	683a      	ldr	r2, [r7, #0]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d90c      	bls.n	8002eec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ed2:	4b65      	ldr	r3, [pc, #404]	; (8003068 <HAL_RCC_ClockConfig+0x1b8>)
 8002ed4:	683a      	ldr	r2, [r7, #0]
 8002ed6:	b2d2      	uxtb	r2, r2
 8002ed8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eda:	4b63      	ldr	r3, [pc, #396]	; (8003068 <HAL_RCC_ClockConfig+0x1b8>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 030f 	and.w	r3, r3, #15
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d001      	beq.n	8002eec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e0b8      	b.n	800305e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d020      	beq.n	8002f3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d005      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f04:	4b59      	ldr	r3, [pc, #356]	; (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	4a58      	ldr	r2, [pc, #352]	; (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8002f0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0308 	and.w	r3, r3, #8
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d005      	beq.n	8002f28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f1c:	4b53      	ldr	r3, [pc, #332]	; (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	4a52      	ldr	r2, [pc, #328]	; (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8002f22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f28:	4b50      	ldr	r3, [pc, #320]	; (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	494d      	ldr	r1, [pc, #308]	; (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d044      	beq.n	8002fd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d107      	bne.n	8002f5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f4e:	4b47      	ldr	r3, [pc, #284]	; (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d119      	bne.n	8002f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e07f      	b.n	800305e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d003      	beq.n	8002f6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f6a:	2b03      	cmp	r3, #3
 8002f6c:	d107      	bne.n	8002f7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f6e:	4b3f      	ldr	r3, [pc, #252]	; (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d109      	bne.n	8002f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e06f      	b.n	800305e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f7e:	4b3b      	ldr	r3, [pc, #236]	; (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e067      	b.n	800305e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f8e:	4b37      	ldr	r3, [pc, #220]	; (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f023 0203 	bic.w	r2, r3, #3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	4934      	ldr	r1, [pc, #208]	; (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fa0:	f7fe fe56 	bl	8001c50 <HAL_GetTick>
 8002fa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fa6:	e00a      	b.n	8002fbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fa8:	f7fe fe52 	bl	8001c50 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e04f      	b.n	800305e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fbe:	4b2b      	ldr	r3, [pc, #172]	; (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f003 020c 	and.w	r2, r3, #12
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d1eb      	bne.n	8002fa8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fd0:	4b25      	ldr	r3, [pc, #148]	; (8003068 <HAL_RCC_ClockConfig+0x1b8>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 030f 	and.w	r3, r3, #15
 8002fd8:	683a      	ldr	r2, [r7, #0]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d20c      	bcs.n	8002ff8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fde:	4b22      	ldr	r3, [pc, #136]	; (8003068 <HAL_RCC_ClockConfig+0x1b8>)
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	b2d2      	uxtb	r2, r2
 8002fe4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fe6:	4b20      	ldr	r3, [pc, #128]	; (8003068 <HAL_RCC_ClockConfig+0x1b8>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 030f 	and.w	r3, r3, #15
 8002fee:	683a      	ldr	r2, [r7, #0]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d001      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e032      	b.n	800305e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0304 	and.w	r3, r3, #4
 8003000:	2b00      	cmp	r3, #0
 8003002:	d008      	beq.n	8003016 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003004:	4b19      	ldr	r3, [pc, #100]	; (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	4916      	ldr	r1, [pc, #88]	; (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8003012:	4313      	orrs	r3, r2
 8003014:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0308 	and.w	r3, r3, #8
 800301e:	2b00      	cmp	r3, #0
 8003020:	d009      	beq.n	8003036 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003022:	4b12      	ldr	r3, [pc, #72]	; (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	490e      	ldr	r1, [pc, #56]	; (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8003032:	4313      	orrs	r3, r2
 8003034:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003036:	f000 f821 	bl	800307c <HAL_RCC_GetSysClockFreq>
 800303a:	4602      	mov	r2, r0
 800303c:	4b0b      	ldr	r3, [pc, #44]	; (800306c <HAL_RCC_ClockConfig+0x1bc>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	091b      	lsrs	r3, r3, #4
 8003042:	f003 030f 	and.w	r3, r3, #15
 8003046:	490a      	ldr	r1, [pc, #40]	; (8003070 <HAL_RCC_ClockConfig+0x1c0>)
 8003048:	5ccb      	ldrb	r3, [r1, r3]
 800304a:	fa22 f303 	lsr.w	r3, r2, r3
 800304e:	4a09      	ldr	r2, [pc, #36]	; (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8003050:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003052:	4b09      	ldr	r3, [pc, #36]	; (8003078 <HAL_RCC_ClockConfig+0x1c8>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4618      	mov	r0, r3
 8003058:	f7fe fdb6 	bl	8001bc8 <HAL_InitTick>

  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	40023c00 	.word	0x40023c00
 800306c:	40023800 	.word	0x40023800
 8003070:	0800487c 	.word	0x0800487c
 8003074:	20000008 	.word	0x20000008
 8003078:	2000000c 	.word	0x2000000c

0800307c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800307c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003080:	b084      	sub	sp, #16
 8003082:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003084:	2300      	movs	r3, #0
 8003086:	607b      	str	r3, [r7, #4]
 8003088:	2300      	movs	r3, #0
 800308a:	60fb      	str	r3, [r7, #12]
 800308c:	2300      	movs	r3, #0
 800308e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003090:	2300      	movs	r3, #0
 8003092:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003094:	4b67      	ldr	r3, [pc, #412]	; (8003234 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f003 030c 	and.w	r3, r3, #12
 800309c:	2b08      	cmp	r3, #8
 800309e:	d00d      	beq.n	80030bc <HAL_RCC_GetSysClockFreq+0x40>
 80030a0:	2b08      	cmp	r3, #8
 80030a2:	f200 80bd 	bhi.w	8003220 <HAL_RCC_GetSysClockFreq+0x1a4>
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d002      	beq.n	80030b0 <HAL_RCC_GetSysClockFreq+0x34>
 80030aa:	2b04      	cmp	r3, #4
 80030ac:	d003      	beq.n	80030b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80030ae:	e0b7      	b.n	8003220 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030b0:	4b61      	ldr	r3, [pc, #388]	; (8003238 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80030b2:	60bb      	str	r3, [r7, #8]
       break;
 80030b4:	e0b7      	b.n	8003226 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030b6:	4b61      	ldr	r3, [pc, #388]	; (800323c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80030b8:	60bb      	str	r3, [r7, #8]
      break;
 80030ba:	e0b4      	b.n	8003226 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030bc:	4b5d      	ldr	r3, [pc, #372]	; (8003234 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030c4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030c6:	4b5b      	ldr	r3, [pc, #364]	; (8003234 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d04d      	beq.n	800316e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030d2:	4b58      	ldr	r3, [pc, #352]	; (8003234 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	099b      	lsrs	r3, r3, #6
 80030d8:	461a      	mov	r2, r3
 80030da:	f04f 0300 	mov.w	r3, #0
 80030de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80030e2:	f04f 0100 	mov.w	r1, #0
 80030e6:	ea02 0800 	and.w	r8, r2, r0
 80030ea:	ea03 0901 	and.w	r9, r3, r1
 80030ee:	4640      	mov	r0, r8
 80030f0:	4649      	mov	r1, r9
 80030f2:	f04f 0200 	mov.w	r2, #0
 80030f6:	f04f 0300 	mov.w	r3, #0
 80030fa:	014b      	lsls	r3, r1, #5
 80030fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003100:	0142      	lsls	r2, r0, #5
 8003102:	4610      	mov	r0, r2
 8003104:	4619      	mov	r1, r3
 8003106:	ebb0 0008 	subs.w	r0, r0, r8
 800310a:	eb61 0109 	sbc.w	r1, r1, r9
 800310e:	f04f 0200 	mov.w	r2, #0
 8003112:	f04f 0300 	mov.w	r3, #0
 8003116:	018b      	lsls	r3, r1, #6
 8003118:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800311c:	0182      	lsls	r2, r0, #6
 800311e:	1a12      	subs	r2, r2, r0
 8003120:	eb63 0301 	sbc.w	r3, r3, r1
 8003124:	f04f 0000 	mov.w	r0, #0
 8003128:	f04f 0100 	mov.w	r1, #0
 800312c:	00d9      	lsls	r1, r3, #3
 800312e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003132:	00d0      	lsls	r0, r2, #3
 8003134:	4602      	mov	r2, r0
 8003136:	460b      	mov	r3, r1
 8003138:	eb12 0208 	adds.w	r2, r2, r8
 800313c:	eb43 0309 	adc.w	r3, r3, r9
 8003140:	f04f 0000 	mov.w	r0, #0
 8003144:	f04f 0100 	mov.w	r1, #0
 8003148:	0259      	lsls	r1, r3, #9
 800314a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800314e:	0250      	lsls	r0, r2, #9
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	4610      	mov	r0, r2
 8003156:	4619      	mov	r1, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	461a      	mov	r2, r3
 800315c:	f04f 0300 	mov.w	r3, #0
 8003160:	f7fd f89e 	bl	80002a0 <__aeabi_uldivmod>
 8003164:	4602      	mov	r2, r0
 8003166:	460b      	mov	r3, r1
 8003168:	4613      	mov	r3, r2
 800316a:	60fb      	str	r3, [r7, #12]
 800316c:	e04a      	b.n	8003204 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800316e:	4b31      	ldr	r3, [pc, #196]	; (8003234 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	099b      	lsrs	r3, r3, #6
 8003174:	461a      	mov	r2, r3
 8003176:	f04f 0300 	mov.w	r3, #0
 800317a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800317e:	f04f 0100 	mov.w	r1, #0
 8003182:	ea02 0400 	and.w	r4, r2, r0
 8003186:	ea03 0501 	and.w	r5, r3, r1
 800318a:	4620      	mov	r0, r4
 800318c:	4629      	mov	r1, r5
 800318e:	f04f 0200 	mov.w	r2, #0
 8003192:	f04f 0300 	mov.w	r3, #0
 8003196:	014b      	lsls	r3, r1, #5
 8003198:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800319c:	0142      	lsls	r2, r0, #5
 800319e:	4610      	mov	r0, r2
 80031a0:	4619      	mov	r1, r3
 80031a2:	1b00      	subs	r0, r0, r4
 80031a4:	eb61 0105 	sbc.w	r1, r1, r5
 80031a8:	f04f 0200 	mov.w	r2, #0
 80031ac:	f04f 0300 	mov.w	r3, #0
 80031b0:	018b      	lsls	r3, r1, #6
 80031b2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80031b6:	0182      	lsls	r2, r0, #6
 80031b8:	1a12      	subs	r2, r2, r0
 80031ba:	eb63 0301 	sbc.w	r3, r3, r1
 80031be:	f04f 0000 	mov.w	r0, #0
 80031c2:	f04f 0100 	mov.w	r1, #0
 80031c6:	00d9      	lsls	r1, r3, #3
 80031c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80031cc:	00d0      	lsls	r0, r2, #3
 80031ce:	4602      	mov	r2, r0
 80031d0:	460b      	mov	r3, r1
 80031d2:	1912      	adds	r2, r2, r4
 80031d4:	eb45 0303 	adc.w	r3, r5, r3
 80031d8:	f04f 0000 	mov.w	r0, #0
 80031dc:	f04f 0100 	mov.w	r1, #0
 80031e0:	0299      	lsls	r1, r3, #10
 80031e2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80031e6:	0290      	lsls	r0, r2, #10
 80031e8:	4602      	mov	r2, r0
 80031ea:	460b      	mov	r3, r1
 80031ec:	4610      	mov	r0, r2
 80031ee:	4619      	mov	r1, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	461a      	mov	r2, r3
 80031f4:	f04f 0300 	mov.w	r3, #0
 80031f8:	f7fd f852 	bl	80002a0 <__aeabi_uldivmod>
 80031fc:	4602      	mov	r2, r0
 80031fe:	460b      	mov	r3, r1
 8003200:	4613      	mov	r3, r2
 8003202:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003204:	4b0b      	ldr	r3, [pc, #44]	; (8003234 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	0c1b      	lsrs	r3, r3, #16
 800320a:	f003 0303 	and.w	r3, r3, #3
 800320e:	3301      	adds	r3, #1
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	fbb2 f3f3 	udiv	r3, r2, r3
 800321c:	60bb      	str	r3, [r7, #8]
      break;
 800321e:	e002      	b.n	8003226 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003220:	4b05      	ldr	r3, [pc, #20]	; (8003238 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003222:	60bb      	str	r3, [r7, #8]
      break;
 8003224:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003226:	68bb      	ldr	r3, [r7, #8]
}
 8003228:	4618      	mov	r0, r3
 800322a:	3710      	adds	r7, #16
 800322c:	46bd      	mov	sp, r7
 800322e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003232:	bf00      	nop
 8003234:	40023800 	.word	0x40023800
 8003238:	00f42400 	.word	0x00f42400
 800323c:	007a1200 	.word	0x007a1200

08003240 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003244:	4b03      	ldr	r3, [pc, #12]	; (8003254 <HAL_RCC_GetHCLKFreq+0x14>)
 8003246:	681b      	ldr	r3, [r3, #0]
}
 8003248:	4618      	mov	r0, r3
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	20000008 	.word	0x20000008

08003258 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800325c:	f7ff fff0 	bl	8003240 <HAL_RCC_GetHCLKFreq>
 8003260:	4602      	mov	r2, r0
 8003262:	4b05      	ldr	r3, [pc, #20]	; (8003278 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	0a9b      	lsrs	r3, r3, #10
 8003268:	f003 0307 	and.w	r3, r3, #7
 800326c:	4903      	ldr	r1, [pc, #12]	; (800327c <HAL_RCC_GetPCLK1Freq+0x24>)
 800326e:	5ccb      	ldrb	r3, [r1, r3]
 8003270:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003274:	4618      	mov	r0, r3
 8003276:	bd80      	pop	{r7, pc}
 8003278:	40023800 	.word	0x40023800
 800327c:	0800488c 	.word	0x0800488c

08003280 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003284:	f7ff ffdc 	bl	8003240 <HAL_RCC_GetHCLKFreq>
 8003288:	4602      	mov	r2, r0
 800328a:	4b05      	ldr	r3, [pc, #20]	; (80032a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	0b5b      	lsrs	r3, r3, #13
 8003290:	f003 0307 	and.w	r3, r3, #7
 8003294:	4903      	ldr	r1, [pc, #12]	; (80032a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003296:	5ccb      	ldrb	r3, [r1, r3]
 8003298:	fa22 f303 	lsr.w	r3, r2, r3
}
 800329c:	4618      	mov	r0, r3
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	40023800 	.word	0x40023800
 80032a4:	0800488c 	.word	0x0800488c

080032a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e03f      	b.n	800333a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d106      	bne.n	80032d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7fe fb3c 	bl	800194c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2224      	movs	r2, #36	; 0x24
 80032d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68da      	ldr	r2, [r3, #12]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 f9cb 	bl	8003688 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	691a      	ldr	r2, [r3, #16]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003300:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	695a      	ldr	r2, [r3, #20]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003310:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68da      	ldr	r2, [r3, #12]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003320:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2220      	movs	r2, #32
 800332c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2220      	movs	r2, #32
 8003334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3708      	adds	r7, #8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b08a      	sub	sp, #40	; 0x28
 8003346:	af02      	add	r7, sp, #8
 8003348:	60f8      	str	r0, [r7, #12]
 800334a:	60b9      	str	r1, [r7, #8]
 800334c:	603b      	str	r3, [r7, #0]
 800334e:	4613      	mov	r3, r2
 8003350:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003352:	2300      	movs	r3, #0
 8003354:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b20      	cmp	r3, #32
 8003360:	d17c      	bne.n	800345c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d002      	beq.n	800336e <HAL_UART_Transmit+0x2c>
 8003368:	88fb      	ldrh	r3, [r7, #6]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e075      	b.n	800345e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003378:	2b01      	cmp	r3, #1
 800337a:	d101      	bne.n	8003380 <HAL_UART_Transmit+0x3e>
 800337c:	2302      	movs	r3, #2
 800337e:	e06e      	b.n	800345e <HAL_UART_Transmit+0x11c>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2221      	movs	r2, #33	; 0x21
 8003392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003396:	f7fe fc5b 	bl	8001c50 <HAL_GetTick>
 800339a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	88fa      	ldrh	r2, [r7, #6]
 80033a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	88fa      	ldrh	r2, [r7, #6]
 80033a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033b0:	d108      	bne.n	80033c4 <HAL_UART_Transmit+0x82>
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d104      	bne.n	80033c4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80033ba:	2300      	movs	r3, #0
 80033bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	61bb      	str	r3, [r7, #24]
 80033c2:	e003      	b.n	80033cc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033c8:	2300      	movs	r3, #0
 80033ca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80033d4:	e02a      	b.n	800342c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	9300      	str	r3, [sp, #0]
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	2200      	movs	r2, #0
 80033de:	2180      	movs	r1, #128	; 0x80
 80033e0:	68f8      	ldr	r0, [r7, #12]
 80033e2:	f000 f8e2 	bl	80035aa <UART_WaitOnFlagUntilTimeout>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d001      	beq.n	80033f0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e036      	b.n	800345e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10b      	bne.n	800340e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	881b      	ldrh	r3, [r3, #0]
 80033fa:	461a      	mov	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003404:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	3302      	adds	r3, #2
 800340a:	61bb      	str	r3, [r7, #24]
 800340c:	e007      	b.n	800341e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	781a      	ldrb	r2, [r3, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	3301      	adds	r3, #1
 800341c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003422:	b29b      	uxth	r3, r3
 8003424:	3b01      	subs	r3, #1
 8003426:	b29a      	uxth	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003430:	b29b      	uxth	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1cf      	bne.n	80033d6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	2200      	movs	r2, #0
 800343e:	2140      	movs	r1, #64	; 0x40
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f000 f8b2 	bl	80035aa <UART_WaitOnFlagUntilTimeout>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d001      	beq.n	8003450 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e006      	b.n	800345e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2220      	movs	r2, #32
 8003454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003458:	2300      	movs	r3, #0
 800345a:	e000      	b.n	800345e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800345c:	2302      	movs	r3, #2
  }
}
 800345e:	4618      	mov	r0, r3
 8003460:	3720      	adds	r7, #32
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003466:	b580      	push	{r7, lr}
 8003468:	b08a      	sub	sp, #40	; 0x28
 800346a:	af02      	add	r7, sp, #8
 800346c:	60f8      	str	r0, [r7, #12]
 800346e:	60b9      	str	r1, [r7, #8]
 8003470:	603b      	str	r3, [r7, #0]
 8003472:	4613      	mov	r3, r2
 8003474:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003476:	2300      	movs	r3, #0
 8003478:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b20      	cmp	r3, #32
 8003484:	f040 808c 	bne.w	80035a0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d002      	beq.n	8003494 <HAL_UART_Receive+0x2e>
 800348e:	88fb      	ldrh	r3, [r7, #6]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d101      	bne.n	8003498 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e084      	b.n	80035a2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d101      	bne.n	80034a6 <HAL_UART_Receive+0x40>
 80034a2:	2302      	movs	r3, #2
 80034a4:	e07d      	b.n	80035a2 <HAL_UART_Receive+0x13c>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2201      	movs	r2, #1
 80034aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2222      	movs	r2, #34	; 0x22
 80034b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034c2:	f7fe fbc5 	bl	8001c50 <HAL_GetTick>
 80034c6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	88fa      	ldrh	r2, [r7, #6]
 80034cc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	88fa      	ldrh	r2, [r7, #6]
 80034d2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034dc:	d108      	bne.n	80034f0 <HAL_UART_Receive+0x8a>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d104      	bne.n	80034f0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80034e6:	2300      	movs	r3, #0
 80034e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	61bb      	str	r3, [r7, #24]
 80034ee:	e003      	b.n	80034f8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034f4:	2300      	movs	r3, #0
 80034f6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003500:	e043      	b.n	800358a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	9300      	str	r3, [sp, #0]
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	2200      	movs	r2, #0
 800350a:	2120      	movs	r1, #32
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f000 f84c 	bl	80035aa <UART_WaitOnFlagUntilTimeout>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d001      	beq.n	800351c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e042      	b.n	80035a2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d10c      	bne.n	800353c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	b29b      	uxth	r3, r3
 800352a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800352e:	b29a      	uxth	r2, r3
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	3302      	adds	r3, #2
 8003538:	61bb      	str	r3, [r7, #24]
 800353a:	e01f      	b.n	800357c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003544:	d007      	beq.n	8003556 <HAL_UART_Receive+0xf0>
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d10a      	bne.n	8003564 <HAL_UART_Receive+0xfe>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d106      	bne.n	8003564 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	b2da      	uxtb	r2, r3
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	701a      	strb	r2, [r3, #0]
 8003562:	e008      	b.n	8003576 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	b2db      	uxtb	r3, r3
 800356c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003570:	b2da      	uxtb	r2, r3
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	3301      	adds	r3, #1
 800357a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003580:	b29b      	uxth	r3, r3
 8003582:	3b01      	subs	r3, #1
 8003584:	b29a      	uxth	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800358e:	b29b      	uxth	r3, r3
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1b6      	bne.n	8003502 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2220      	movs	r2, #32
 8003598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800359c:	2300      	movs	r3, #0
 800359e:	e000      	b.n	80035a2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80035a0:	2302      	movs	r3, #2
  }
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3720      	adds	r7, #32
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b090      	sub	sp, #64	; 0x40
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	60f8      	str	r0, [r7, #12]
 80035b2:	60b9      	str	r1, [r7, #8]
 80035b4:	603b      	str	r3, [r7, #0]
 80035b6:	4613      	mov	r3, r2
 80035b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035ba:	e050      	b.n	800365e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c2:	d04c      	beq.n	800365e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80035c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d007      	beq.n	80035da <UART_WaitOnFlagUntilTimeout+0x30>
 80035ca:	f7fe fb41 	bl	8001c50 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d241      	bcs.n	800365e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	330c      	adds	r3, #12
 80035e0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e4:	e853 3f00 	ldrex	r3, [r3]
 80035e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80035f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	330c      	adds	r3, #12
 80035f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035fa:	637a      	str	r2, [r7, #52]	; 0x34
 80035fc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003600:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003602:	e841 2300 	strex	r3, r2, [r1]
 8003606:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1e5      	bne.n	80035da <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	3314      	adds	r3, #20
 8003614:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	e853 3f00 	ldrex	r3, [r3]
 800361c:	613b      	str	r3, [r7, #16]
   return(result);
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	f023 0301 	bic.w	r3, r3, #1
 8003624:	63bb      	str	r3, [r7, #56]	; 0x38
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	3314      	adds	r3, #20
 800362c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800362e:	623a      	str	r2, [r7, #32]
 8003630:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003632:	69f9      	ldr	r1, [r7, #28]
 8003634:	6a3a      	ldr	r2, [r7, #32]
 8003636:	e841 2300 	strex	r3, r2, [r1]
 800363a:	61bb      	str	r3, [r7, #24]
   return(result);
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1e5      	bne.n	800360e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2220      	movs	r2, #32
 8003646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2220      	movs	r2, #32
 800364e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e00f      	b.n	800367e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	4013      	ands	r3, r2
 8003668:	68ba      	ldr	r2, [r7, #8]
 800366a:	429a      	cmp	r2, r3
 800366c:	bf0c      	ite	eq
 800366e:	2301      	moveq	r3, #1
 8003670:	2300      	movne	r3, #0
 8003672:	b2db      	uxtb	r3, r3
 8003674:	461a      	mov	r2, r3
 8003676:	79fb      	ldrb	r3, [r7, #7]
 8003678:	429a      	cmp	r2, r3
 800367a:	d09f      	beq.n	80035bc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3740      	adds	r7, #64	; 0x40
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
	...

08003688 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800368c:	b09f      	sub	sp, #124	; 0x7c
 800368e:	af00      	add	r7, sp, #0
 8003690:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800369c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800369e:	68d9      	ldr	r1, [r3, #12]
 80036a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	ea40 0301 	orr.w	r3, r0, r1
 80036a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ac:	689a      	ldr	r2, [r3, #8]
 80036ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	431a      	orrs	r2, r3
 80036b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036b6:	695b      	ldr	r3, [r3, #20]
 80036b8:	431a      	orrs	r2, r3
 80036ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036bc:	69db      	ldr	r3, [r3, #28]
 80036be:	4313      	orrs	r3, r2
 80036c0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80036c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80036cc:	f021 010c 	bic.w	r1, r1, #12
 80036d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036d6:	430b      	orrs	r3, r1
 80036d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80036e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036e6:	6999      	ldr	r1, [r3, #24]
 80036e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	ea40 0301 	orr.w	r3, r0, r1
 80036f0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	4bc5      	ldr	r3, [pc, #788]	; (8003a0c <UART_SetConfig+0x384>)
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d004      	beq.n	8003706 <UART_SetConfig+0x7e>
 80036fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	4bc3      	ldr	r3, [pc, #780]	; (8003a10 <UART_SetConfig+0x388>)
 8003702:	429a      	cmp	r2, r3
 8003704:	d103      	bne.n	800370e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003706:	f7ff fdbb 	bl	8003280 <HAL_RCC_GetPCLK2Freq>
 800370a:	6778      	str	r0, [r7, #116]	; 0x74
 800370c:	e002      	b.n	8003714 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800370e:	f7ff fda3 	bl	8003258 <HAL_RCC_GetPCLK1Freq>
 8003712:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003714:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003716:	69db      	ldr	r3, [r3, #28]
 8003718:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800371c:	f040 80b6 	bne.w	800388c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003720:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003722:	461c      	mov	r4, r3
 8003724:	f04f 0500 	mov.w	r5, #0
 8003728:	4622      	mov	r2, r4
 800372a:	462b      	mov	r3, r5
 800372c:	1891      	adds	r1, r2, r2
 800372e:	6439      	str	r1, [r7, #64]	; 0x40
 8003730:	415b      	adcs	r3, r3
 8003732:	647b      	str	r3, [r7, #68]	; 0x44
 8003734:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003738:	1912      	adds	r2, r2, r4
 800373a:	eb45 0303 	adc.w	r3, r5, r3
 800373e:	f04f 0000 	mov.w	r0, #0
 8003742:	f04f 0100 	mov.w	r1, #0
 8003746:	00d9      	lsls	r1, r3, #3
 8003748:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800374c:	00d0      	lsls	r0, r2, #3
 800374e:	4602      	mov	r2, r0
 8003750:	460b      	mov	r3, r1
 8003752:	1911      	adds	r1, r2, r4
 8003754:	6639      	str	r1, [r7, #96]	; 0x60
 8003756:	416b      	adcs	r3, r5
 8003758:	667b      	str	r3, [r7, #100]	; 0x64
 800375a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	461a      	mov	r2, r3
 8003760:	f04f 0300 	mov.w	r3, #0
 8003764:	1891      	adds	r1, r2, r2
 8003766:	63b9      	str	r1, [r7, #56]	; 0x38
 8003768:	415b      	adcs	r3, r3
 800376a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800376c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003770:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003774:	f7fc fd94 	bl	80002a0 <__aeabi_uldivmod>
 8003778:	4602      	mov	r2, r0
 800377a:	460b      	mov	r3, r1
 800377c:	4ba5      	ldr	r3, [pc, #660]	; (8003a14 <UART_SetConfig+0x38c>)
 800377e:	fba3 2302 	umull	r2, r3, r3, r2
 8003782:	095b      	lsrs	r3, r3, #5
 8003784:	011e      	lsls	r6, r3, #4
 8003786:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003788:	461c      	mov	r4, r3
 800378a:	f04f 0500 	mov.w	r5, #0
 800378e:	4622      	mov	r2, r4
 8003790:	462b      	mov	r3, r5
 8003792:	1891      	adds	r1, r2, r2
 8003794:	6339      	str	r1, [r7, #48]	; 0x30
 8003796:	415b      	adcs	r3, r3
 8003798:	637b      	str	r3, [r7, #52]	; 0x34
 800379a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800379e:	1912      	adds	r2, r2, r4
 80037a0:	eb45 0303 	adc.w	r3, r5, r3
 80037a4:	f04f 0000 	mov.w	r0, #0
 80037a8:	f04f 0100 	mov.w	r1, #0
 80037ac:	00d9      	lsls	r1, r3, #3
 80037ae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80037b2:	00d0      	lsls	r0, r2, #3
 80037b4:	4602      	mov	r2, r0
 80037b6:	460b      	mov	r3, r1
 80037b8:	1911      	adds	r1, r2, r4
 80037ba:	65b9      	str	r1, [r7, #88]	; 0x58
 80037bc:	416b      	adcs	r3, r5
 80037be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	461a      	mov	r2, r3
 80037c6:	f04f 0300 	mov.w	r3, #0
 80037ca:	1891      	adds	r1, r2, r2
 80037cc:	62b9      	str	r1, [r7, #40]	; 0x28
 80037ce:	415b      	adcs	r3, r3
 80037d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80037d6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80037da:	f7fc fd61 	bl	80002a0 <__aeabi_uldivmod>
 80037de:	4602      	mov	r2, r0
 80037e0:	460b      	mov	r3, r1
 80037e2:	4b8c      	ldr	r3, [pc, #560]	; (8003a14 <UART_SetConfig+0x38c>)
 80037e4:	fba3 1302 	umull	r1, r3, r3, r2
 80037e8:	095b      	lsrs	r3, r3, #5
 80037ea:	2164      	movs	r1, #100	; 0x64
 80037ec:	fb01 f303 	mul.w	r3, r1, r3
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	00db      	lsls	r3, r3, #3
 80037f4:	3332      	adds	r3, #50	; 0x32
 80037f6:	4a87      	ldr	r2, [pc, #540]	; (8003a14 <UART_SetConfig+0x38c>)
 80037f8:	fba2 2303 	umull	r2, r3, r2, r3
 80037fc:	095b      	lsrs	r3, r3, #5
 80037fe:	005b      	lsls	r3, r3, #1
 8003800:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003804:	441e      	add	r6, r3
 8003806:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003808:	4618      	mov	r0, r3
 800380a:	f04f 0100 	mov.w	r1, #0
 800380e:	4602      	mov	r2, r0
 8003810:	460b      	mov	r3, r1
 8003812:	1894      	adds	r4, r2, r2
 8003814:	623c      	str	r4, [r7, #32]
 8003816:	415b      	adcs	r3, r3
 8003818:	627b      	str	r3, [r7, #36]	; 0x24
 800381a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800381e:	1812      	adds	r2, r2, r0
 8003820:	eb41 0303 	adc.w	r3, r1, r3
 8003824:	f04f 0400 	mov.w	r4, #0
 8003828:	f04f 0500 	mov.w	r5, #0
 800382c:	00dd      	lsls	r5, r3, #3
 800382e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003832:	00d4      	lsls	r4, r2, #3
 8003834:	4622      	mov	r2, r4
 8003836:	462b      	mov	r3, r5
 8003838:	1814      	adds	r4, r2, r0
 800383a:	653c      	str	r4, [r7, #80]	; 0x50
 800383c:	414b      	adcs	r3, r1
 800383e:	657b      	str	r3, [r7, #84]	; 0x54
 8003840:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	461a      	mov	r2, r3
 8003846:	f04f 0300 	mov.w	r3, #0
 800384a:	1891      	adds	r1, r2, r2
 800384c:	61b9      	str	r1, [r7, #24]
 800384e:	415b      	adcs	r3, r3
 8003850:	61fb      	str	r3, [r7, #28]
 8003852:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003856:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800385a:	f7fc fd21 	bl	80002a0 <__aeabi_uldivmod>
 800385e:	4602      	mov	r2, r0
 8003860:	460b      	mov	r3, r1
 8003862:	4b6c      	ldr	r3, [pc, #432]	; (8003a14 <UART_SetConfig+0x38c>)
 8003864:	fba3 1302 	umull	r1, r3, r3, r2
 8003868:	095b      	lsrs	r3, r3, #5
 800386a:	2164      	movs	r1, #100	; 0x64
 800386c:	fb01 f303 	mul.w	r3, r1, r3
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	3332      	adds	r3, #50	; 0x32
 8003876:	4a67      	ldr	r2, [pc, #412]	; (8003a14 <UART_SetConfig+0x38c>)
 8003878:	fba2 2303 	umull	r2, r3, r2, r3
 800387c:	095b      	lsrs	r3, r3, #5
 800387e:	f003 0207 	and.w	r2, r3, #7
 8003882:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4432      	add	r2, r6
 8003888:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800388a:	e0b9      	b.n	8003a00 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800388c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800388e:	461c      	mov	r4, r3
 8003890:	f04f 0500 	mov.w	r5, #0
 8003894:	4622      	mov	r2, r4
 8003896:	462b      	mov	r3, r5
 8003898:	1891      	adds	r1, r2, r2
 800389a:	6139      	str	r1, [r7, #16]
 800389c:	415b      	adcs	r3, r3
 800389e:	617b      	str	r3, [r7, #20]
 80038a0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80038a4:	1912      	adds	r2, r2, r4
 80038a6:	eb45 0303 	adc.w	r3, r5, r3
 80038aa:	f04f 0000 	mov.w	r0, #0
 80038ae:	f04f 0100 	mov.w	r1, #0
 80038b2:	00d9      	lsls	r1, r3, #3
 80038b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80038b8:	00d0      	lsls	r0, r2, #3
 80038ba:	4602      	mov	r2, r0
 80038bc:	460b      	mov	r3, r1
 80038be:	eb12 0804 	adds.w	r8, r2, r4
 80038c2:	eb43 0905 	adc.w	r9, r3, r5
 80038c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f04f 0100 	mov.w	r1, #0
 80038d0:	f04f 0200 	mov.w	r2, #0
 80038d4:	f04f 0300 	mov.w	r3, #0
 80038d8:	008b      	lsls	r3, r1, #2
 80038da:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80038de:	0082      	lsls	r2, r0, #2
 80038e0:	4640      	mov	r0, r8
 80038e2:	4649      	mov	r1, r9
 80038e4:	f7fc fcdc 	bl	80002a0 <__aeabi_uldivmod>
 80038e8:	4602      	mov	r2, r0
 80038ea:	460b      	mov	r3, r1
 80038ec:	4b49      	ldr	r3, [pc, #292]	; (8003a14 <UART_SetConfig+0x38c>)
 80038ee:	fba3 2302 	umull	r2, r3, r3, r2
 80038f2:	095b      	lsrs	r3, r3, #5
 80038f4:	011e      	lsls	r6, r3, #4
 80038f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038f8:	4618      	mov	r0, r3
 80038fa:	f04f 0100 	mov.w	r1, #0
 80038fe:	4602      	mov	r2, r0
 8003900:	460b      	mov	r3, r1
 8003902:	1894      	adds	r4, r2, r2
 8003904:	60bc      	str	r4, [r7, #8]
 8003906:	415b      	adcs	r3, r3
 8003908:	60fb      	str	r3, [r7, #12]
 800390a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800390e:	1812      	adds	r2, r2, r0
 8003910:	eb41 0303 	adc.w	r3, r1, r3
 8003914:	f04f 0400 	mov.w	r4, #0
 8003918:	f04f 0500 	mov.w	r5, #0
 800391c:	00dd      	lsls	r5, r3, #3
 800391e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003922:	00d4      	lsls	r4, r2, #3
 8003924:	4622      	mov	r2, r4
 8003926:	462b      	mov	r3, r5
 8003928:	1814      	adds	r4, r2, r0
 800392a:	64bc      	str	r4, [r7, #72]	; 0x48
 800392c:	414b      	adcs	r3, r1
 800392e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003930:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	4618      	mov	r0, r3
 8003936:	f04f 0100 	mov.w	r1, #0
 800393a:	f04f 0200 	mov.w	r2, #0
 800393e:	f04f 0300 	mov.w	r3, #0
 8003942:	008b      	lsls	r3, r1, #2
 8003944:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003948:	0082      	lsls	r2, r0, #2
 800394a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800394e:	f7fc fca7 	bl	80002a0 <__aeabi_uldivmod>
 8003952:	4602      	mov	r2, r0
 8003954:	460b      	mov	r3, r1
 8003956:	4b2f      	ldr	r3, [pc, #188]	; (8003a14 <UART_SetConfig+0x38c>)
 8003958:	fba3 1302 	umull	r1, r3, r3, r2
 800395c:	095b      	lsrs	r3, r3, #5
 800395e:	2164      	movs	r1, #100	; 0x64
 8003960:	fb01 f303 	mul.w	r3, r1, r3
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	011b      	lsls	r3, r3, #4
 8003968:	3332      	adds	r3, #50	; 0x32
 800396a:	4a2a      	ldr	r2, [pc, #168]	; (8003a14 <UART_SetConfig+0x38c>)
 800396c:	fba2 2303 	umull	r2, r3, r2, r3
 8003970:	095b      	lsrs	r3, r3, #5
 8003972:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003976:	441e      	add	r6, r3
 8003978:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800397a:	4618      	mov	r0, r3
 800397c:	f04f 0100 	mov.w	r1, #0
 8003980:	4602      	mov	r2, r0
 8003982:	460b      	mov	r3, r1
 8003984:	1894      	adds	r4, r2, r2
 8003986:	603c      	str	r4, [r7, #0]
 8003988:	415b      	adcs	r3, r3
 800398a:	607b      	str	r3, [r7, #4]
 800398c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003990:	1812      	adds	r2, r2, r0
 8003992:	eb41 0303 	adc.w	r3, r1, r3
 8003996:	f04f 0400 	mov.w	r4, #0
 800399a:	f04f 0500 	mov.w	r5, #0
 800399e:	00dd      	lsls	r5, r3, #3
 80039a0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80039a4:	00d4      	lsls	r4, r2, #3
 80039a6:	4622      	mov	r2, r4
 80039a8:	462b      	mov	r3, r5
 80039aa:	eb12 0a00 	adds.w	sl, r2, r0
 80039ae:	eb43 0b01 	adc.w	fp, r3, r1
 80039b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f04f 0100 	mov.w	r1, #0
 80039bc:	f04f 0200 	mov.w	r2, #0
 80039c0:	f04f 0300 	mov.w	r3, #0
 80039c4:	008b      	lsls	r3, r1, #2
 80039c6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80039ca:	0082      	lsls	r2, r0, #2
 80039cc:	4650      	mov	r0, sl
 80039ce:	4659      	mov	r1, fp
 80039d0:	f7fc fc66 	bl	80002a0 <__aeabi_uldivmod>
 80039d4:	4602      	mov	r2, r0
 80039d6:	460b      	mov	r3, r1
 80039d8:	4b0e      	ldr	r3, [pc, #56]	; (8003a14 <UART_SetConfig+0x38c>)
 80039da:	fba3 1302 	umull	r1, r3, r3, r2
 80039de:	095b      	lsrs	r3, r3, #5
 80039e0:	2164      	movs	r1, #100	; 0x64
 80039e2:	fb01 f303 	mul.w	r3, r1, r3
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	011b      	lsls	r3, r3, #4
 80039ea:	3332      	adds	r3, #50	; 0x32
 80039ec:	4a09      	ldr	r2, [pc, #36]	; (8003a14 <UART_SetConfig+0x38c>)
 80039ee:	fba2 2303 	umull	r2, r3, r2, r3
 80039f2:	095b      	lsrs	r3, r3, #5
 80039f4:	f003 020f 	and.w	r2, r3, #15
 80039f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4432      	add	r2, r6
 80039fe:	609a      	str	r2, [r3, #8]
}
 8003a00:	bf00      	nop
 8003a02:	377c      	adds	r7, #124	; 0x7c
 8003a04:	46bd      	mov	sp, r7
 8003a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a0a:	bf00      	nop
 8003a0c:	40011000 	.word	0x40011000
 8003a10:	40011400 	.word	0x40011400
 8003a14:	51eb851f 	.word	0x51eb851f

08003a18 <__errno>:
 8003a18:	4b01      	ldr	r3, [pc, #4]	; (8003a20 <__errno+0x8>)
 8003a1a:	6818      	ldr	r0, [r3, #0]
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	20000014 	.word	0x20000014

08003a24 <__libc_init_array>:
 8003a24:	b570      	push	{r4, r5, r6, lr}
 8003a26:	4d0d      	ldr	r5, [pc, #52]	; (8003a5c <__libc_init_array+0x38>)
 8003a28:	4c0d      	ldr	r4, [pc, #52]	; (8003a60 <__libc_init_array+0x3c>)
 8003a2a:	1b64      	subs	r4, r4, r5
 8003a2c:	10a4      	asrs	r4, r4, #2
 8003a2e:	2600      	movs	r6, #0
 8003a30:	42a6      	cmp	r6, r4
 8003a32:	d109      	bne.n	8003a48 <__libc_init_array+0x24>
 8003a34:	4d0b      	ldr	r5, [pc, #44]	; (8003a64 <__libc_init_array+0x40>)
 8003a36:	4c0c      	ldr	r4, [pc, #48]	; (8003a68 <__libc_init_array+0x44>)
 8003a38:	f000 fc4e 	bl	80042d8 <_init>
 8003a3c:	1b64      	subs	r4, r4, r5
 8003a3e:	10a4      	asrs	r4, r4, #2
 8003a40:	2600      	movs	r6, #0
 8003a42:	42a6      	cmp	r6, r4
 8003a44:	d105      	bne.n	8003a52 <__libc_init_array+0x2e>
 8003a46:	bd70      	pop	{r4, r5, r6, pc}
 8003a48:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a4c:	4798      	blx	r3
 8003a4e:	3601      	adds	r6, #1
 8003a50:	e7ee      	b.n	8003a30 <__libc_init_array+0xc>
 8003a52:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a56:	4798      	blx	r3
 8003a58:	3601      	adds	r6, #1
 8003a5a:	e7f2      	b.n	8003a42 <__libc_init_array+0x1e>
 8003a5c:	080048d0 	.word	0x080048d0
 8003a60:	080048d0 	.word	0x080048d0
 8003a64:	080048d0 	.word	0x080048d0
 8003a68:	080048d4 	.word	0x080048d4

08003a6c <memset>:
 8003a6c:	4402      	add	r2, r0
 8003a6e:	4603      	mov	r3, r0
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d100      	bne.n	8003a76 <memset+0xa>
 8003a74:	4770      	bx	lr
 8003a76:	f803 1b01 	strb.w	r1, [r3], #1
 8003a7a:	e7f9      	b.n	8003a70 <memset+0x4>

08003a7c <_vsiprintf_r>:
 8003a7c:	b500      	push	{lr}
 8003a7e:	b09b      	sub	sp, #108	; 0x6c
 8003a80:	9100      	str	r1, [sp, #0]
 8003a82:	9104      	str	r1, [sp, #16]
 8003a84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003a88:	9105      	str	r1, [sp, #20]
 8003a8a:	9102      	str	r1, [sp, #8]
 8003a8c:	4905      	ldr	r1, [pc, #20]	; (8003aa4 <_vsiprintf_r+0x28>)
 8003a8e:	9103      	str	r1, [sp, #12]
 8003a90:	4669      	mov	r1, sp
 8003a92:	f000 f86f 	bl	8003b74 <_svfiprintf_r>
 8003a96:	9b00      	ldr	r3, [sp, #0]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	701a      	strb	r2, [r3, #0]
 8003a9c:	b01b      	add	sp, #108	; 0x6c
 8003a9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003aa2:	bf00      	nop
 8003aa4:	ffff0208 	.word	0xffff0208

08003aa8 <vsiprintf>:
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	460a      	mov	r2, r1
 8003aac:	4601      	mov	r1, r0
 8003aae:	4802      	ldr	r0, [pc, #8]	; (8003ab8 <vsiprintf+0x10>)
 8003ab0:	6800      	ldr	r0, [r0, #0]
 8003ab2:	f7ff bfe3 	b.w	8003a7c <_vsiprintf_r>
 8003ab6:	bf00      	nop
 8003ab8:	20000014 	.word	0x20000014

08003abc <__ssputs_r>:
 8003abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ac0:	688e      	ldr	r6, [r1, #8]
 8003ac2:	429e      	cmp	r6, r3
 8003ac4:	4682      	mov	sl, r0
 8003ac6:	460c      	mov	r4, r1
 8003ac8:	4690      	mov	r8, r2
 8003aca:	461f      	mov	r7, r3
 8003acc:	d838      	bhi.n	8003b40 <__ssputs_r+0x84>
 8003ace:	898a      	ldrh	r2, [r1, #12]
 8003ad0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003ad4:	d032      	beq.n	8003b3c <__ssputs_r+0x80>
 8003ad6:	6825      	ldr	r5, [r4, #0]
 8003ad8:	6909      	ldr	r1, [r1, #16]
 8003ada:	eba5 0901 	sub.w	r9, r5, r1
 8003ade:	6965      	ldr	r5, [r4, #20]
 8003ae0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003ae4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003ae8:	3301      	adds	r3, #1
 8003aea:	444b      	add	r3, r9
 8003aec:	106d      	asrs	r5, r5, #1
 8003aee:	429d      	cmp	r5, r3
 8003af0:	bf38      	it	cc
 8003af2:	461d      	movcc	r5, r3
 8003af4:	0553      	lsls	r3, r2, #21
 8003af6:	d531      	bpl.n	8003b5c <__ssputs_r+0xa0>
 8003af8:	4629      	mov	r1, r5
 8003afa:	f000 fb47 	bl	800418c <_malloc_r>
 8003afe:	4606      	mov	r6, r0
 8003b00:	b950      	cbnz	r0, 8003b18 <__ssputs_r+0x5c>
 8003b02:	230c      	movs	r3, #12
 8003b04:	f8ca 3000 	str.w	r3, [sl]
 8003b08:	89a3      	ldrh	r3, [r4, #12]
 8003b0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b0e:	81a3      	strh	r3, [r4, #12]
 8003b10:	f04f 30ff 	mov.w	r0, #4294967295
 8003b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b18:	6921      	ldr	r1, [r4, #16]
 8003b1a:	464a      	mov	r2, r9
 8003b1c:	f000 fabe 	bl	800409c <memcpy>
 8003b20:	89a3      	ldrh	r3, [r4, #12]
 8003b22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b2a:	81a3      	strh	r3, [r4, #12]
 8003b2c:	6126      	str	r6, [r4, #16]
 8003b2e:	6165      	str	r5, [r4, #20]
 8003b30:	444e      	add	r6, r9
 8003b32:	eba5 0509 	sub.w	r5, r5, r9
 8003b36:	6026      	str	r6, [r4, #0]
 8003b38:	60a5      	str	r5, [r4, #8]
 8003b3a:	463e      	mov	r6, r7
 8003b3c:	42be      	cmp	r6, r7
 8003b3e:	d900      	bls.n	8003b42 <__ssputs_r+0x86>
 8003b40:	463e      	mov	r6, r7
 8003b42:	4632      	mov	r2, r6
 8003b44:	6820      	ldr	r0, [r4, #0]
 8003b46:	4641      	mov	r1, r8
 8003b48:	f000 fab6 	bl	80040b8 <memmove>
 8003b4c:	68a3      	ldr	r3, [r4, #8]
 8003b4e:	6822      	ldr	r2, [r4, #0]
 8003b50:	1b9b      	subs	r3, r3, r6
 8003b52:	4432      	add	r2, r6
 8003b54:	60a3      	str	r3, [r4, #8]
 8003b56:	6022      	str	r2, [r4, #0]
 8003b58:	2000      	movs	r0, #0
 8003b5a:	e7db      	b.n	8003b14 <__ssputs_r+0x58>
 8003b5c:	462a      	mov	r2, r5
 8003b5e:	f000 fb6f 	bl	8004240 <_realloc_r>
 8003b62:	4606      	mov	r6, r0
 8003b64:	2800      	cmp	r0, #0
 8003b66:	d1e1      	bne.n	8003b2c <__ssputs_r+0x70>
 8003b68:	6921      	ldr	r1, [r4, #16]
 8003b6a:	4650      	mov	r0, sl
 8003b6c:	f000 fabe 	bl	80040ec <_free_r>
 8003b70:	e7c7      	b.n	8003b02 <__ssputs_r+0x46>
	...

08003b74 <_svfiprintf_r>:
 8003b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b78:	4698      	mov	r8, r3
 8003b7a:	898b      	ldrh	r3, [r1, #12]
 8003b7c:	061b      	lsls	r3, r3, #24
 8003b7e:	b09d      	sub	sp, #116	; 0x74
 8003b80:	4607      	mov	r7, r0
 8003b82:	460d      	mov	r5, r1
 8003b84:	4614      	mov	r4, r2
 8003b86:	d50e      	bpl.n	8003ba6 <_svfiprintf_r+0x32>
 8003b88:	690b      	ldr	r3, [r1, #16]
 8003b8a:	b963      	cbnz	r3, 8003ba6 <_svfiprintf_r+0x32>
 8003b8c:	2140      	movs	r1, #64	; 0x40
 8003b8e:	f000 fafd 	bl	800418c <_malloc_r>
 8003b92:	6028      	str	r0, [r5, #0]
 8003b94:	6128      	str	r0, [r5, #16]
 8003b96:	b920      	cbnz	r0, 8003ba2 <_svfiprintf_r+0x2e>
 8003b98:	230c      	movs	r3, #12
 8003b9a:	603b      	str	r3, [r7, #0]
 8003b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003ba0:	e0d1      	b.n	8003d46 <_svfiprintf_r+0x1d2>
 8003ba2:	2340      	movs	r3, #64	; 0x40
 8003ba4:	616b      	str	r3, [r5, #20]
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	9309      	str	r3, [sp, #36]	; 0x24
 8003baa:	2320      	movs	r3, #32
 8003bac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003bb0:	f8cd 800c 	str.w	r8, [sp, #12]
 8003bb4:	2330      	movs	r3, #48	; 0x30
 8003bb6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003d60 <_svfiprintf_r+0x1ec>
 8003bba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003bbe:	f04f 0901 	mov.w	r9, #1
 8003bc2:	4623      	mov	r3, r4
 8003bc4:	469a      	mov	sl, r3
 8003bc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003bca:	b10a      	cbz	r2, 8003bd0 <_svfiprintf_r+0x5c>
 8003bcc:	2a25      	cmp	r2, #37	; 0x25
 8003bce:	d1f9      	bne.n	8003bc4 <_svfiprintf_r+0x50>
 8003bd0:	ebba 0b04 	subs.w	fp, sl, r4
 8003bd4:	d00b      	beq.n	8003bee <_svfiprintf_r+0x7a>
 8003bd6:	465b      	mov	r3, fp
 8003bd8:	4622      	mov	r2, r4
 8003bda:	4629      	mov	r1, r5
 8003bdc:	4638      	mov	r0, r7
 8003bde:	f7ff ff6d 	bl	8003abc <__ssputs_r>
 8003be2:	3001      	adds	r0, #1
 8003be4:	f000 80aa 	beq.w	8003d3c <_svfiprintf_r+0x1c8>
 8003be8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003bea:	445a      	add	r2, fp
 8003bec:	9209      	str	r2, [sp, #36]	; 0x24
 8003bee:	f89a 3000 	ldrb.w	r3, [sl]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	f000 80a2 	beq.w	8003d3c <_svfiprintf_r+0x1c8>
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8003bfe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c02:	f10a 0a01 	add.w	sl, sl, #1
 8003c06:	9304      	str	r3, [sp, #16]
 8003c08:	9307      	str	r3, [sp, #28]
 8003c0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c0e:	931a      	str	r3, [sp, #104]	; 0x68
 8003c10:	4654      	mov	r4, sl
 8003c12:	2205      	movs	r2, #5
 8003c14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c18:	4851      	ldr	r0, [pc, #324]	; (8003d60 <_svfiprintf_r+0x1ec>)
 8003c1a:	f7fc faf1 	bl	8000200 <memchr>
 8003c1e:	9a04      	ldr	r2, [sp, #16]
 8003c20:	b9d8      	cbnz	r0, 8003c5a <_svfiprintf_r+0xe6>
 8003c22:	06d0      	lsls	r0, r2, #27
 8003c24:	bf44      	itt	mi
 8003c26:	2320      	movmi	r3, #32
 8003c28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c2c:	0711      	lsls	r1, r2, #28
 8003c2e:	bf44      	itt	mi
 8003c30:	232b      	movmi	r3, #43	; 0x2b
 8003c32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c36:	f89a 3000 	ldrb.w	r3, [sl]
 8003c3a:	2b2a      	cmp	r3, #42	; 0x2a
 8003c3c:	d015      	beq.n	8003c6a <_svfiprintf_r+0xf6>
 8003c3e:	9a07      	ldr	r2, [sp, #28]
 8003c40:	4654      	mov	r4, sl
 8003c42:	2000      	movs	r0, #0
 8003c44:	f04f 0c0a 	mov.w	ip, #10
 8003c48:	4621      	mov	r1, r4
 8003c4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c4e:	3b30      	subs	r3, #48	; 0x30
 8003c50:	2b09      	cmp	r3, #9
 8003c52:	d94e      	bls.n	8003cf2 <_svfiprintf_r+0x17e>
 8003c54:	b1b0      	cbz	r0, 8003c84 <_svfiprintf_r+0x110>
 8003c56:	9207      	str	r2, [sp, #28]
 8003c58:	e014      	b.n	8003c84 <_svfiprintf_r+0x110>
 8003c5a:	eba0 0308 	sub.w	r3, r0, r8
 8003c5e:	fa09 f303 	lsl.w	r3, r9, r3
 8003c62:	4313      	orrs	r3, r2
 8003c64:	9304      	str	r3, [sp, #16]
 8003c66:	46a2      	mov	sl, r4
 8003c68:	e7d2      	b.n	8003c10 <_svfiprintf_r+0x9c>
 8003c6a:	9b03      	ldr	r3, [sp, #12]
 8003c6c:	1d19      	adds	r1, r3, #4
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	9103      	str	r1, [sp, #12]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	bfbb      	ittet	lt
 8003c76:	425b      	neglt	r3, r3
 8003c78:	f042 0202 	orrlt.w	r2, r2, #2
 8003c7c:	9307      	strge	r3, [sp, #28]
 8003c7e:	9307      	strlt	r3, [sp, #28]
 8003c80:	bfb8      	it	lt
 8003c82:	9204      	strlt	r2, [sp, #16]
 8003c84:	7823      	ldrb	r3, [r4, #0]
 8003c86:	2b2e      	cmp	r3, #46	; 0x2e
 8003c88:	d10c      	bne.n	8003ca4 <_svfiprintf_r+0x130>
 8003c8a:	7863      	ldrb	r3, [r4, #1]
 8003c8c:	2b2a      	cmp	r3, #42	; 0x2a
 8003c8e:	d135      	bne.n	8003cfc <_svfiprintf_r+0x188>
 8003c90:	9b03      	ldr	r3, [sp, #12]
 8003c92:	1d1a      	adds	r2, r3, #4
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	9203      	str	r2, [sp, #12]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	bfb8      	it	lt
 8003c9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003ca0:	3402      	adds	r4, #2
 8003ca2:	9305      	str	r3, [sp, #20]
 8003ca4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003d70 <_svfiprintf_r+0x1fc>
 8003ca8:	7821      	ldrb	r1, [r4, #0]
 8003caa:	2203      	movs	r2, #3
 8003cac:	4650      	mov	r0, sl
 8003cae:	f7fc faa7 	bl	8000200 <memchr>
 8003cb2:	b140      	cbz	r0, 8003cc6 <_svfiprintf_r+0x152>
 8003cb4:	2340      	movs	r3, #64	; 0x40
 8003cb6:	eba0 000a 	sub.w	r0, r0, sl
 8003cba:	fa03 f000 	lsl.w	r0, r3, r0
 8003cbe:	9b04      	ldr	r3, [sp, #16]
 8003cc0:	4303      	orrs	r3, r0
 8003cc2:	3401      	adds	r4, #1
 8003cc4:	9304      	str	r3, [sp, #16]
 8003cc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cca:	4826      	ldr	r0, [pc, #152]	; (8003d64 <_svfiprintf_r+0x1f0>)
 8003ccc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003cd0:	2206      	movs	r2, #6
 8003cd2:	f7fc fa95 	bl	8000200 <memchr>
 8003cd6:	2800      	cmp	r0, #0
 8003cd8:	d038      	beq.n	8003d4c <_svfiprintf_r+0x1d8>
 8003cda:	4b23      	ldr	r3, [pc, #140]	; (8003d68 <_svfiprintf_r+0x1f4>)
 8003cdc:	bb1b      	cbnz	r3, 8003d26 <_svfiprintf_r+0x1b2>
 8003cde:	9b03      	ldr	r3, [sp, #12]
 8003ce0:	3307      	adds	r3, #7
 8003ce2:	f023 0307 	bic.w	r3, r3, #7
 8003ce6:	3308      	adds	r3, #8
 8003ce8:	9303      	str	r3, [sp, #12]
 8003cea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cec:	4433      	add	r3, r6
 8003cee:	9309      	str	r3, [sp, #36]	; 0x24
 8003cf0:	e767      	b.n	8003bc2 <_svfiprintf_r+0x4e>
 8003cf2:	fb0c 3202 	mla	r2, ip, r2, r3
 8003cf6:	460c      	mov	r4, r1
 8003cf8:	2001      	movs	r0, #1
 8003cfa:	e7a5      	b.n	8003c48 <_svfiprintf_r+0xd4>
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	3401      	adds	r4, #1
 8003d00:	9305      	str	r3, [sp, #20]
 8003d02:	4619      	mov	r1, r3
 8003d04:	f04f 0c0a 	mov.w	ip, #10
 8003d08:	4620      	mov	r0, r4
 8003d0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d0e:	3a30      	subs	r2, #48	; 0x30
 8003d10:	2a09      	cmp	r2, #9
 8003d12:	d903      	bls.n	8003d1c <_svfiprintf_r+0x1a8>
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d0c5      	beq.n	8003ca4 <_svfiprintf_r+0x130>
 8003d18:	9105      	str	r1, [sp, #20]
 8003d1a:	e7c3      	b.n	8003ca4 <_svfiprintf_r+0x130>
 8003d1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d20:	4604      	mov	r4, r0
 8003d22:	2301      	movs	r3, #1
 8003d24:	e7f0      	b.n	8003d08 <_svfiprintf_r+0x194>
 8003d26:	ab03      	add	r3, sp, #12
 8003d28:	9300      	str	r3, [sp, #0]
 8003d2a:	462a      	mov	r2, r5
 8003d2c:	4b0f      	ldr	r3, [pc, #60]	; (8003d6c <_svfiprintf_r+0x1f8>)
 8003d2e:	a904      	add	r1, sp, #16
 8003d30:	4638      	mov	r0, r7
 8003d32:	f3af 8000 	nop.w
 8003d36:	1c42      	adds	r2, r0, #1
 8003d38:	4606      	mov	r6, r0
 8003d3a:	d1d6      	bne.n	8003cea <_svfiprintf_r+0x176>
 8003d3c:	89ab      	ldrh	r3, [r5, #12]
 8003d3e:	065b      	lsls	r3, r3, #25
 8003d40:	f53f af2c 	bmi.w	8003b9c <_svfiprintf_r+0x28>
 8003d44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d46:	b01d      	add	sp, #116	; 0x74
 8003d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d4c:	ab03      	add	r3, sp, #12
 8003d4e:	9300      	str	r3, [sp, #0]
 8003d50:	462a      	mov	r2, r5
 8003d52:	4b06      	ldr	r3, [pc, #24]	; (8003d6c <_svfiprintf_r+0x1f8>)
 8003d54:	a904      	add	r1, sp, #16
 8003d56:	4638      	mov	r0, r7
 8003d58:	f000 f87a 	bl	8003e50 <_printf_i>
 8003d5c:	e7eb      	b.n	8003d36 <_svfiprintf_r+0x1c2>
 8003d5e:	bf00      	nop
 8003d60:	08004894 	.word	0x08004894
 8003d64:	0800489e 	.word	0x0800489e
 8003d68:	00000000 	.word	0x00000000
 8003d6c:	08003abd 	.word	0x08003abd
 8003d70:	0800489a 	.word	0x0800489a

08003d74 <_printf_common>:
 8003d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d78:	4616      	mov	r6, r2
 8003d7a:	4699      	mov	r9, r3
 8003d7c:	688a      	ldr	r2, [r1, #8]
 8003d7e:	690b      	ldr	r3, [r1, #16]
 8003d80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d84:	4293      	cmp	r3, r2
 8003d86:	bfb8      	it	lt
 8003d88:	4613      	movlt	r3, r2
 8003d8a:	6033      	str	r3, [r6, #0]
 8003d8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d90:	4607      	mov	r7, r0
 8003d92:	460c      	mov	r4, r1
 8003d94:	b10a      	cbz	r2, 8003d9a <_printf_common+0x26>
 8003d96:	3301      	adds	r3, #1
 8003d98:	6033      	str	r3, [r6, #0]
 8003d9a:	6823      	ldr	r3, [r4, #0]
 8003d9c:	0699      	lsls	r1, r3, #26
 8003d9e:	bf42      	ittt	mi
 8003da0:	6833      	ldrmi	r3, [r6, #0]
 8003da2:	3302      	addmi	r3, #2
 8003da4:	6033      	strmi	r3, [r6, #0]
 8003da6:	6825      	ldr	r5, [r4, #0]
 8003da8:	f015 0506 	ands.w	r5, r5, #6
 8003dac:	d106      	bne.n	8003dbc <_printf_common+0x48>
 8003dae:	f104 0a19 	add.w	sl, r4, #25
 8003db2:	68e3      	ldr	r3, [r4, #12]
 8003db4:	6832      	ldr	r2, [r6, #0]
 8003db6:	1a9b      	subs	r3, r3, r2
 8003db8:	42ab      	cmp	r3, r5
 8003dba:	dc26      	bgt.n	8003e0a <_printf_common+0x96>
 8003dbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003dc0:	1e13      	subs	r3, r2, #0
 8003dc2:	6822      	ldr	r2, [r4, #0]
 8003dc4:	bf18      	it	ne
 8003dc6:	2301      	movne	r3, #1
 8003dc8:	0692      	lsls	r2, r2, #26
 8003dca:	d42b      	bmi.n	8003e24 <_printf_common+0xb0>
 8003dcc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003dd0:	4649      	mov	r1, r9
 8003dd2:	4638      	mov	r0, r7
 8003dd4:	47c0      	blx	r8
 8003dd6:	3001      	adds	r0, #1
 8003dd8:	d01e      	beq.n	8003e18 <_printf_common+0xa4>
 8003dda:	6823      	ldr	r3, [r4, #0]
 8003ddc:	68e5      	ldr	r5, [r4, #12]
 8003dde:	6832      	ldr	r2, [r6, #0]
 8003de0:	f003 0306 	and.w	r3, r3, #6
 8003de4:	2b04      	cmp	r3, #4
 8003de6:	bf08      	it	eq
 8003de8:	1aad      	subeq	r5, r5, r2
 8003dea:	68a3      	ldr	r3, [r4, #8]
 8003dec:	6922      	ldr	r2, [r4, #16]
 8003dee:	bf0c      	ite	eq
 8003df0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003df4:	2500      	movne	r5, #0
 8003df6:	4293      	cmp	r3, r2
 8003df8:	bfc4      	itt	gt
 8003dfa:	1a9b      	subgt	r3, r3, r2
 8003dfc:	18ed      	addgt	r5, r5, r3
 8003dfe:	2600      	movs	r6, #0
 8003e00:	341a      	adds	r4, #26
 8003e02:	42b5      	cmp	r5, r6
 8003e04:	d11a      	bne.n	8003e3c <_printf_common+0xc8>
 8003e06:	2000      	movs	r0, #0
 8003e08:	e008      	b.n	8003e1c <_printf_common+0xa8>
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	4652      	mov	r2, sl
 8003e0e:	4649      	mov	r1, r9
 8003e10:	4638      	mov	r0, r7
 8003e12:	47c0      	blx	r8
 8003e14:	3001      	adds	r0, #1
 8003e16:	d103      	bne.n	8003e20 <_printf_common+0xac>
 8003e18:	f04f 30ff 	mov.w	r0, #4294967295
 8003e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e20:	3501      	adds	r5, #1
 8003e22:	e7c6      	b.n	8003db2 <_printf_common+0x3e>
 8003e24:	18e1      	adds	r1, r4, r3
 8003e26:	1c5a      	adds	r2, r3, #1
 8003e28:	2030      	movs	r0, #48	; 0x30
 8003e2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e2e:	4422      	add	r2, r4
 8003e30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e38:	3302      	adds	r3, #2
 8003e3a:	e7c7      	b.n	8003dcc <_printf_common+0x58>
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	4622      	mov	r2, r4
 8003e40:	4649      	mov	r1, r9
 8003e42:	4638      	mov	r0, r7
 8003e44:	47c0      	blx	r8
 8003e46:	3001      	adds	r0, #1
 8003e48:	d0e6      	beq.n	8003e18 <_printf_common+0xa4>
 8003e4a:	3601      	adds	r6, #1
 8003e4c:	e7d9      	b.n	8003e02 <_printf_common+0x8e>
	...

08003e50 <_printf_i>:
 8003e50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e54:	460c      	mov	r4, r1
 8003e56:	4691      	mov	r9, r2
 8003e58:	7e27      	ldrb	r7, [r4, #24]
 8003e5a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003e5c:	2f78      	cmp	r7, #120	; 0x78
 8003e5e:	4680      	mov	r8, r0
 8003e60:	469a      	mov	sl, r3
 8003e62:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e66:	d807      	bhi.n	8003e78 <_printf_i+0x28>
 8003e68:	2f62      	cmp	r7, #98	; 0x62
 8003e6a:	d80a      	bhi.n	8003e82 <_printf_i+0x32>
 8003e6c:	2f00      	cmp	r7, #0
 8003e6e:	f000 80d8 	beq.w	8004022 <_printf_i+0x1d2>
 8003e72:	2f58      	cmp	r7, #88	; 0x58
 8003e74:	f000 80a3 	beq.w	8003fbe <_printf_i+0x16e>
 8003e78:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003e7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003e80:	e03a      	b.n	8003ef8 <_printf_i+0xa8>
 8003e82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003e86:	2b15      	cmp	r3, #21
 8003e88:	d8f6      	bhi.n	8003e78 <_printf_i+0x28>
 8003e8a:	a001      	add	r0, pc, #4	; (adr r0, 8003e90 <_printf_i+0x40>)
 8003e8c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003e90:	08003ee9 	.word	0x08003ee9
 8003e94:	08003efd 	.word	0x08003efd
 8003e98:	08003e79 	.word	0x08003e79
 8003e9c:	08003e79 	.word	0x08003e79
 8003ea0:	08003e79 	.word	0x08003e79
 8003ea4:	08003e79 	.word	0x08003e79
 8003ea8:	08003efd 	.word	0x08003efd
 8003eac:	08003e79 	.word	0x08003e79
 8003eb0:	08003e79 	.word	0x08003e79
 8003eb4:	08003e79 	.word	0x08003e79
 8003eb8:	08003e79 	.word	0x08003e79
 8003ebc:	08004009 	.word	0x08004009
 8003ec0:	08003f2d 	.word	0x08003f2d
 8003ec4:	08003feb 	.word	0x08003feb
 8003ec8:	08003e79 	.word	0x08003e79
 8003ecc:	08003e79 	.word	0x08003e79
 8003ed0:	0800402b 	.word	0x0800402b
 8003ed4:	08003e79 	.word	0x08003e79
 8003ed8:	08003f2d 	.word	0x08003f2d
 8003edc:	08003e79 	.word	0x08003e79
 8003ee0:	08003e79 	.word	0x08003e79
 8003ee4:	08003ff3 	.word	0x08003ff3
 8003ee8:	680b      	ldr	r3, [r1, #0]
 8003eea:	1d1a      	adds	r2, r3, #4
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	600a      	str	r2, [r1, #0]
 8003ef0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003ef4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e0a3      	b.n	8004044 <_printf_i+0x1f4>
 8003efc:	6825      	ldr	r5, [r4, #0]
 8003efe:	6808      	ldr	r0, [r1, #0]
 8003f00:	062e      	lsls	r6, r5, #24
 8003f02:	f100 0304 	add.w	r3, r0, #4
 8003f06:	d50a      	bpl.n	8003f1e <_printf_i+0xce>
 8003f08:	6805      	ldr	r5, [r0, #0]
 8003f0a:	600b      	str	r3, [r1, #0]
 8003f0c:	2d00      	cmp	r5, #0
 8003f0e:	da03      	bge.n	8003f18 <_printf_i+0xc8>
 8003f10:	232d      	movs	r3, #45	; 0x2d
 8003f12:	426d      	negs	r5, r5
 8003f14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f18:	485e      	ldr	r0, [pc, #376]	; (8004094 <_printf_i+0x244>)
 8003f1a:	230a      	movs	r3, #10
 8003f1c:	e019      	b.n	8003f52 <_printf_i+0x102>
 8003f1e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003f22:	6805      	ldr	r5, [r0, #0]
 8003f24:	600b      	str	r3, [r1, #0]
 8003f26:	bf18      	it	ne
 8003f28:	b22d      	sxthne	r5, r5
 8003f2a:	e7ef      	b.n	8003f0c <_printf_i+0xbc>
 8003f2c:	680b      	ldr	r3, [r1, #0]
 8003f2e:	6825      	ldr	r5, [r4, #0]
 8003f30:	1d18      	adds	r0, r3, #4
 8003f32:	6008      	str	r0, [r1, #0]
 8003f34:	0628      	lsls	r0, r5, #24
 8003f36:	d501      	bpl.n	8003f3c <_printf_i+0xec>
 8003f38:	681d      	ldr	r5, [r3, #0]
 8003f3a:	e002      	b.n	8003f42 <_printf_i+0xf2>
 8003f3c:	0669      	lsls	r1, r5, #25
 8003f3e:	d5fb      	bpl.n	8003f38 <_printf_i+0xe8>
 8003f40:	881d      	ldrh	r5, [r3, #0]
 8003f42:	4854      	ldr	r0, [pc, #336]	; (8004094 <_printf_i+0x244>)
 8003f44:	2f6f      	cmp	r7, #111	; 0x6f
 8003f46:	bf0c      	ite	eq
 8003f48:	2308      	moveq	r3, #8
 8003f4a:	230a      	movne	r3, #10
 8003f4c:	2100      	movs	r1, #0
 8003f4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f52:	6866      	ldr	r6, [r4, #4]
 8003f54:	60a6      	str	r6, [r4, #8]
 8003f56:	2e00      	cmp	r6, #0
 8003f58:	bfa2      	ittt	ge
 8003f5a:	6821      	ldrge	r1, [r4, #0]
 8003f5c:	f021 0104 	bicge.w	r1, r1, #4
 8003f60:	6021      	strge	r1, [r4, #0]
 8003f62:	b90d      	cbnz	r5, 8003f68 <_printf_i+0x118>
 8003f64:	2e00      	cmp	r6, #0
 8003f66:	d04d      	beq.n	8004004 <_printf_i+0x1b4>
 8003f68:	4616      	mov	r6, r2
 8003f6a:	fbb5 f1f3 	udiv	r1, r5, r3
 8003f6e:	fb03 5711 	mls	r7, r3, r1, r5
 8003f72:	5dc7      	ldrb	r7, [r0, r7]
 8003f74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003f78:	462f      	mov	r7, r5
 8003f7a:	42bb      	cmp	r3, r7
 8003f7c:	460d      	mov	r5, r1
 8003f7e:	d9f4      	bls.n	8003f6a <_printf_i+0x11a>
 8003f80:	2b08      	cmp	r3, #8
 8003f82:	d10b      	bne.n	8003f9c <_printf_i+0x14c>
 8003f84:	6823      	ldr	r3, [r4, #0]
 8003f86:	07df      	lsls	r7, r3, #31
 8003f88:	d508      	bpl.n	8003f9c <_printf_i+0x14c>
 8003f8a:	6923      	ldr	r3, [r4, #16]
 8003f8c:	6861      	ldr	r1, [r4, #4]
 8003f8e:	4299      	cmp	r1, r3
 8003f90:	bfde      	ittt	le
 8003f92:	2330      	movle	r3, #48	; 0x30
 8003f94:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003f98:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003f9c:	1b92      	subs	r2, r2, r6
 8003f9e:	6122      	str	r2, [r4, #16]
 8003fa0:	f8cd a000 	str.w	sl, [sp]
 8003fa4:	464b      	mov	r3, r9
 8003fa6:	aa03      	add	r2, sp, #12
 8003fa8:	4621      	mov	r1, r4
 8003faa:	4640      	mov	r0, r8
 8003fac:	f7ff fee2 	bl	8003d74 <_printf_common>
 8003fb0:	3001      	adds	r0, #1
 8003fb2:	d14c      	bne.n	800404e <_printf_i+0x1fe>
 8003fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fb8:	b004      	add	sp, #16
 8003fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fbe:	4835      	ldr	r0, [pc, #212]	; (8004094 <_printf_i+0x244>)
 8003fc0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003fc4:	6823      	ldr	r3, [r4, #0]
 8003fc6:	680e      	ldr	r6, [r1, #0]
 8003fc8:	061f      	lsls	r7, r3, #24
 8003fca:	f856 5b04 	ldr.w	r5, [r6], #4
 8003fce:	600e      	str	r6, [r1, #0]
 8003fd0:	d514      	bpl.n	8003ffc <_printf_i+0x1ac>
 8003fd2:	07d9      	lsls	r1, r3, #31
 8003fd4:	bf44      	itt	mi
 8003fd6:	f043 0320 	orrmi.w	r3, r3, #32
 8003fda:	6023      	strmi	r3, [r4, #0]
 8003fdc:	b91d      	cbnz	r5, 8003fe6 <_printf_i+0x196>
 8003fde:	6823      	ldr	r3, [r4, #0]
 8003fe0:	f023 0320 	bic.w	r3, r3, #32
 8003fe4:	6023      	str	r3, [r4, #0]
 8003fe6:	2310      	movs	r3, #16
 8003fe8:	e7b0      	b.n	8003f4c <_printf_i+0xfc>
 8003fea:	6823      	ldr	r3, [r4, #0]
 8003fec:	f043 0320 	orr.w	r3, r3, #32
 8003ff0:	6023      	str	r3, [r4, #0]
 8003ff2:	2378      	movs	r3, #120	; 0x78
 8003ff4:	4828      	ldr	r0, [pc, #160]	; (8004098 <_printf_i+0x248>)
 8003ff6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003ffa:	e7e3      	b.n	8003fc4 <_printf_i+0x174>
 8003ffc:	065e      	lsls	r6, r3, #25
 8003ffe:	bf48      	it	mi
 8004000:	b2ad      	uxthmi	r5, r5
 8004002:	e7e6      	b.n	8003fd2 <_printf_i+0x182>
 8004004:	4616      	mov	r6, r2
 8004006:	e7bb      	b.n	8003f80 <_printf_i+0x130>
 8004008:	680b      	ldr	r3, [r1, #0]
 800400a:	6826      	ldr	r6, [r4, #0]
 800400c:	6960      	ldr	r0, [r4, #20]
 800400e:	1d1d      	adds	r5, r3, #4
 8004010:	600d      	str	r5, [r1, #0]
 8004012:	0635      	lsls	r5, r6, #24
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	d501      	bpl.n	800401c <_printf_i+0x1cc>
 8004018:	6018      	str	r0, [r3, #0]
 800401a:	e002      	b.n	8004022 <_printf_i+0x1d2>
 800401c:	0671      	lsls	r1, r6, #25
 800401e:	d5fb      	bpl.n	8004018 <_printf_i+0x1c8>
 8004020:	8018      	strh	r0, [r3, #0]
 8004022:	2300      	movs	r3, #0
 8004024:	6123      	str	r3, [r4, #16]
 8004026:	4616      	mov	r6, r2
 8004028:	e7ba      	b.n	8003fa0 <_printf_i+0x150>
 800402a:	680b      	ldr	r3, [r1, #0]
 800402c:	1d1a      	adds	r2, r3, #4
 800402e:	600a      	str	r2, [r1, #0]
 8004030:	681e      	ldr	r6, [r3, #0]
 8004032:	6862      	ldr	r2, [r4, #4]
 8004034:	2100      	movs	r1, #0
 8004036:	4630      	mov	r0, r6
 8004038:	f7fc f8e2 	bl	8000200 <memchr>
 800403c:	b108      	cbz	r0, 8004042 <_printf_i+0x1f2>
 800403e:	1b80      	subs	r0, r0, r6
 8004040:	6060      	str	r0, [r4, #4]
 8004042:	6863      	ldr	r3, [r4, #4]
 8004044:	6123      	str	r3, [r4, #16]
 8004046:	2300      	movs	r3, #0
 8004048:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800404c:	e7a8      	b.n	8003fa0 <_printf_i+0x150>
 800404e:	6923      	ldr	r3, [r4, #16]
 8004050:	4632      	mov	r2, r6
 8004052:	4649      	mov	r1, r9
 8004054:	4640      	mov	r0, r8
 8004056:	47d0      	blx	sl
 8004058:	3001      	adds	r0, #1
 800405a:	d0ab      	beq.n	8003fb4 <_printf_i+0x164>
 800405c:	6823      	ldr	r3, [r4, #0]
 800405e:	079b      	lsls	r3, r3, #30
 8004060:	d413      	bmi.n	800408a <_printf_i+0x23a>
 8004062:	68e0      	ldr	r0, [r4, #12]
 8004064:	9b03      	ldr	r3, [sp, #12]
 8004066:	4298      	cmp	r0, r3
 8004068:	bfb8      	it	lt
 800406a:	4618      	movlt	r0, r3
 800406c:	e7a4      	b.n	8003fb8 <_printf_i+0x168>
 800406e:	2301      	movs	r3, #1
 8004070:	4632      	mov	r2, r6
 8004072:	4649      	mov	r1, r9
 8004074:	4640      	mov	r0, r8
 8004076:	47d0      	blx	sl
 8004078:	3001      	adds	r0, #1
 800407a:	d09b      	beq.n	8003fb4 <_printf_i+0x164>
 800407c:	3501      	adds	r5, #1
 800407e:	68e3      	ldr	r3, [r4, #12]
 8004080:	9903      	ldr	r1, [sp, #12]
 8004082:	1a5b      	subs	r3, r3, r1
 8004084:	42ab      	cmp	r3, r5
 8004086:	dcf2      	bgt.n	800406e <_printf_i+0x21e>
 8004088:	e7eb      	b.n	8004062 <_printf_i+0x212>
 800408a:	2500      	movs	r5, #0
 800408c:	f104 0619 	add.w	r6, r4, #25
 8004090:	e7f5      	b.n	800407e <_printf_i+0x22e>
 8004092:	bf00      	nop
 8004094:	080048a5 	.word	0x080048a5
 8004098:	080048b6 	.word	0x080048b6

0800409c <memcpy>:
 800409c:	440a      	add	r2, r1
 800409e:	4291      	cmp	r1, r2
 80040a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80040a4:	d100      	bne.n	80040a8 <memcpy+0xc>
 80040a6:	4770      	bx	lr
 80040a8:	b510      	push	{r4, lr}
 80040aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040b2:	4291      	cmp	r1, r2
 80040b4:	d1f9      	bne.n	80040aa <memcpy+0xe>
 80040b6:	bd10      	pop	{r4, pc}

080040b8 <memmove>:
 80040b8:	4288      	cmp	r0, r1
 80040ba:	b510      	push	{r4, lr}
 80040bc:	eb01 0402 	add.w	r4, r1, r2
 80040c0:	d902      	bls.n	80040c8 <memmove+0x10>
 80040c2:	4284      	cmp	r4, r0
 80040c4:	4623      	mov	r3, r4
 80040c6:	d807      	bhi.n	80040d8 <memmove+0x20>
 80040c8:	1e43      	subs	r3, r0, #1
 80040ca:	42a1      	cmp	r1, r4
 80040cc:	d008      	beq.n	80040e0 <memmove+0x28>
 80040ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80040d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80040d6:	e7f8      	b.n	80040ca <memmove+0x12>
 80040d8:	4402      	add	r2, r0
 80040da:	4601      	mov	r1, r0
 80040dc:	428a      	cmp	r2, r1
 80040de:	d100      	bne.n	80040e2 <memmove+0x2a>
 80040e0:	bd10      	pop	{r4, pc}
 80040e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80040e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80040ea:	e7f7      	b.n	80040dc <memmove+0x24>

080040ec <_free_r>:
 80040ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80040ee:	2900      	cmp	r1, #0
 80040f0:	d048      	beq.n	8004184 <_free_r+0x98>
 80040f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040f6:	9001      	str	r0, [sp, #4]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f1a1 0404 	sub.w	r4, r1, #4
 80040fe:	bfb8      	it	lt
 8004100:	18e4      	addlt	r4, r4, r3
 8004102:	f000 f8d3 	bl	80042ac <__malloc_lock>
 8004106:	4a20      	ldr	r2, [pc, #128]	; (8004188 <_free_r+0x9c>)
 8004108:	9801      	ldr	r0, [sp, #4]
 800410a:	6813      	ldr	r3, [r2, #0]
 800410c:	4615      	mov	r5, r2
 800410e:	b933      	cbnz	r3, 800411e <_free_r+0x32>
 8004110:	6063      	str	r3, [r4, #4]
 8004112:	6014      	str	r4, [r2, #0]
 8004114:	b003      	add	sp, #12
 8004116:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800411a:	f000 b8cd 	b.w	80042b8 <__malloc_unlock>
 800411e:	42a3      	cmp	r3, r4
 8004120:	d90b      	bls.n	800413a <_free_r+0x4e>
 8004122:	6821      	ldr	r1, [r4, #0]
 8004124:	1862      	adds	r2, r4, r1
 8004126:	4293      	cmp	r3, r2
 8004128:	bf04      	itt	eq
 800412a:	681a      	ldreq	r2, [r3, #0]
 800412c:	685b      	ldreq	r3, [r3, #4]
 800412e:	6063      	str	r3, [r4, #4]
 8004130:	bf04      	itt	eq
 8004132:	1852      	addeq	r2, r2, r1
 8004134:	6022      	streq	r2, [r4, #0]
 8004136:	602c      	str	r4, [r5, #0]
 8004138:	e7ec      	b.n	8004114 <_free_r+0x28>
 800413a:	461a      	mov	r2, r3
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	b10b      	cbz	r3, 8004144 <_free_r+0x58>
 8004140:	42a3      	cmp	r3, r4
 8004142:	d9fa      	bls.n	800413a <_free_r+0x4e>
 8004144:	6811      	ldr	r1, [r2, #0]
 8004146:	1855      	adds	r5, r2, r1
 8004148:	42a5      	cmp	r5, r4
 800414a:	d10b      	bne.n	8004164 <_free_r+0x78>
 800414c:	6824      	ldr	r4, [r4, #0]
 800414e:	4421      	add	r1, r4
 8004150:	1854      	adds	r4, r2, r1
 8004152:	42a3      	cmp	r3, r4
 8004154:	6011      	str	r1, [r2, #0]
 8004156:	d1dd      	bne.n	8004114 <_free_r+0x28>
 8004158:	681c      	ldr	r4, [r3, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	6053      	str	r3, [r2, #4]
 800415e:	4421      	add	r1, r4
 8004160:	6011      	str	r1, [r2, #0]
 8004162:	e7d7      	b.n	8004114 <_free_r+0x28>
 8004164:	d902      	bls.n	800416c <_free_r+0x80>
 8004166:	230c      	movs	r3, #12
 8004168:	6003      	str	r3, [r0, #0]
 800416a:	e7d3      	b.n	8004114 <_free_r+0x28>
 800416c:	6825      	ldr	r5, [r4, #0]
 800416e:	1961      	adds	r1, r4, r5
 8004170:	428b      	cmp	r3, r1
 8004172:	bf04      	itt	eq
 8004174:	6819      	ldreq	r1, [r3, #0]
 8004176:	685b      	ldreq	r3, [r3, #4]
 8004178:	6063      	str	r3, [r4, #4]
 800417a:	bf04      	itt	eq
 800417c:	1949      	addeq	r1, r1, r5
 800417e:	6021      	streq	r1, [r4, #0]
 8004180:	6054      	str	r4, [r2, #4]
 8004182:	e7c7      	b.n	8004114 <_free_r+0x28>
 8004184:	b003      	add	sp, #12
 8004186:	bd30      	pop	{r4, r5, pc}
 8004188:	20000098 	.word	0x20000098

0800418c <_malloc_r>:
 800418c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800418e:	1ccd      	adds	r5, r1, #3
 8004190:	f025 0503 	bic.w	r5, r5, #3
 8004194:	3508      	adds	r5, #8
 8004196:	2d0c      	cmp	r5, #12
 8004198:	bf38      	it	cc
 800419a:	250c      	movcc	r5, #12
 800419c:	2d00      	cmp	r5, #0
 800419e:	4606      	mov	r6, r0
 80041a0:	db01      	blt.n	80041a6 <_malloc_r+0x1a>
 80041a2:	42a9      	cmp	r1, r5
 80041a4:	d903      	bls.n	80041ae <_malloc_r+0x22>
 80041a6:	230c      	movs	r3, #12
 80041a8:	6033      	str	r3, [r6, #0]
 80041aa:	2000      	movs	r0, #0
 80041ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041ae:	f000 f87d 	bl	80042ac <__malloc_lock>
 80041b2:	4921      	ldr	r1, [pc, #132]	; (8004238 <_malloc_r+0xac>)
 80041b4:	680a      	ldr	r2, [r1, #0]
 80041b6:	4614      	mov	r4, r2
 80041b8:	b99c      	cbnz	r4, 80041e2 <_malloc_r+0x56>
 80041ba:	4f20      	ldr	r7, [pc, #128]	; (800423c <_malloc_r+0xb0>)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	b923      	cbnz	r3, 80041ca <_malloc_r+0x3e>
 80041c0:	4621      	mov	r1, r4
 80041c2:	4630      	mov	r0, r6
 80041c4:	f000 f862 	bl	800428c <_sbrk_r>
 80041c8:	6038      	str	r0, [r7, #0]
 80041ca:	4629      	mov	r1, r5
 80041cc:	4630      	mov	r0, r6
 80041ce:	f000 f85d 	bl	800428c <_sbrk_r>
 80041d2:	1c43      	adds	r3, r0, #1
 80041d4:	d123      	bne.n	800421e <_malloc_r+0x92>
 80041d6:	230c      	movs	r3, #12
 80041d8:	6033      	str	r3, [r6, #0]
 80041da:	4630      	mov	r0, r6
 80041dc:	f000 f86c 	bl	80042b8 <__malloc_unlock>
 80041e0:	e7e3      	b.n	80041aa <_malloc_r+0x1e>
 80041e2:	6823      	ldr	r3, [r4, #0]
 80041e4:	1b5b      	subs	r3, r3, r5
 80041e6:	d417      	bmi.n	8004218 <_malloc_r+0x8c>
 80041e8:	2b0b      	cmp	r3, #11
 80041ea:	d903      	bls.n	80041f4 <_malloc_r+0x68>
 80041ec:	6023      	str	r3, [r4, #0]
 80041ee:	441c      	add	r4, r3
 80041f0:	6025      	str	r5, [r4, #0]
 80041f2:	e004      	b.n	80041fe <_malloc_r+0x72>
 80041f4:	6863      	ldr	r3, [r4, #4]
 80041f6:	42a2      	cmp	r2, r4
 80041f8:	bf0c      	ite	eq
 80041fa:	600b      	streq	r3, [r1, #0]
 80041fc:	6053      	strne	r3, [r2, #4]
 80041fe:	4630      	mov	r0, r6
 8004200:	f000 f85a 	bl	80042b8 <__malloc_unlock>
 8004204:	f104 000b 	add.w	r0, r4, #11
 8004208:	1d23      	adds	r3, r4, #4
 800420a:	f020 0007 	bic.w	r0, r0, #7
 800420e:	1ac2      	subs	r2, r0, r3
 8004210:	d0cc      	beq.n	80041ac <_malloc_r+0x20>
 8004212:	1a1b      	subs	r3, r3, r0
 8004214:	50a3      	str	r3, [r4, r2]
 8004216:	e7c9      	b.n	80041ac <_malloc_r+0x20>
 8004218:	4622      	mov	r2, r4
 800421a:	6864      	ldr	r4, [r4, #4]
 800421c:	e7cc      	b.n	80041b8 <_malloc_r+0x2c>
 800421e:	1cc4      	adds	r4, r0, #3
 8004220:	f024 0403 	bic.w	r4, r4, #3
 8004224:	42a0      	cmp	r0, r4
 8004226:	d0e3      	beq.n	80041f0 <_malloc_r+0x64>
 8004228:	1a21      	subs	r1, r4, r0
 800422a:	4630      	mov	r0, r6
 800422c:	f000 f82e 	bl	800428c <_sbrk_r>
 8004230:	3001      	adds	r0, #1
 8004232:	d1dd      	bne.n	80041f0 <_malloc_r+0x64>
 8004234:	e7cf      	b.n	80041d6 <_malloc_r+0x4a>
 8004236:	bf00      	nop
 8004238:	20000098 	.word	0x20000098
 800423c:	2000009c 	.word	0x2000009c

08004240 <_realloc_r>:
 8004240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004242:	4607      	mov	r7, r0
 8004244:	4614      	mov	r4, r2
 8004246:	460e      	mov	r6, r1
 8004248:	b921      	cbnz	r1, 8004254 <_realloc_r+0x14>
 800424a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800424e:	4611      	mov	r1, r2
 8004250:	f7ff bf9c 	b.w	800418c <_malloc_r>
 8004254:	b922      	cbnz	r2, 8004260 <_realloc_r+0x20>
 8004256:	f7ff ff49 	bl	80040ec <_free_r>
 800425a:	4625      	mov	r5, r4
 800425c:	4628      	mov	r0, r5
 800425e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004260:	f000 f830 	bl	80042c4 <_malloc_usable_size_r>
 8004264:	42a0      	cmp	r0, r4
 8004266:	d20f      	bcs.n	8004288 <_realloc_r+0x48>
 8004268:	4621      	mov	r1, r4
 800426a:	4638      	mov	r0, r7
 800426c:	f7ff ff8e 	bl	800418c <_malloc_r>
 8004270:	4605      	mov	r5, r0
 8004272:	2800      	cmp	r0, #0
 8004274:	d0f2      	beq.n	800425c <_realloc_r+0x1c>
 8004276:	4631      	mov	r1, r6
 8004278:	4622      	mov	r2, r4
 800427a:	f7ff ff0f 	bl	800409c <memcpy>
 800427e:	4631      	mov	r1, r6
 8004280:	4638      	mov	r0, r7
 8004282:	f7ff ff33 	bl	80040ec <_free_r>
 8004286:	e7e9      	b.n	800425c <_realloc_r+0x1c>
 8004288:	4635      	mov	r5, r6
 800428a:	e7e7      	b.n	800425c <_realloc_r+0x1c>

0800428c <_sbrk_r>:
 800428c:	b538      	push	{r3, r4, r5, lr}
 800428e:	4d06      	ldr	r5, [pc, #24]	; (80042a8 <_sbrk_r+0x1c>)
 8004290:	2300      	movs	r3, #0
 8004292:	4604      	mov	r4, r0
 8004294:	4608      	mov	r0, r1
 8004296:	602b      	str	r3, [r5, #0]
 8004298:	f7fd fc02 	bl	8001aa0 <_sbrk>
 800429c:	1c43      	adds	r3, r0, #1
 800429e:	d102      	bne.n	80042a6 <_sbrk_r+0x1a>
 80042a0:	682b      	ldr	r3, [r5, #0]
 80042a2:	b103      	cbz	r3, 80042a6 <_sbrk_r+0x1a>
 80042a4:	6023      	str	r3, [r4, #0]
 80042a6:	bd38      	pop	{r3, r4, r5, pc}
 80042a8:	2000021c 	.word	0x2000021c

080042ac <__malloc_lock>:
 80042ac:	4801      	ldr	r0, [pc, #4]	; (80042b4 <__malloc_lock+0x8>)
 80042ae:	f000 b811 	b.w	80042d4 <__retarget_lock_acquire_recursive>
 80042b2:	bf00      	nop
 80042b4:	20000224 	.word	0x20000224

080042b8 <__malloc_unlock>:
 80042b8:	4801      	ldr	r0, [pc, #4]	; (80042c0 <__malloc_unlock+0x8>)
 80042ba:	f000 b80c 	b.w	80042d6 <__retarget_lock_release_recursive>
 80042be:	bf00      	nop
 80042c0:	20000224 	.word	0x20000224

080042c4 <_malloc_usable_size_r>:
 80042c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042c8:	1f18      	subs	r0, r3, #4
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	bfbc      	itt	lt
 80042ce:	580b      	ldrlt	r3, [r1, r0]
 80042d0:	18c0      	addlt	r0, r0, r3
 80042d2:	4770      	bx	lr

080042d4 <__retarget_lock_acquire_recursive>:
 80042d4:	4770      	bx	lr

080042d6 <__retarget_lock_release_recursive>:
 80042d6:	4770      	bx	lr

080042d8 <_init>:
 80042d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042da:	bf00      	nop
 80042dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042de:	bc08      	pop	{r3}
 80042e0:	469e      	mov	lr, r3
 80042e2:	4770      	bx	lr

080042e4 <_fini>:
 80042e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042e6:	bf00      	nop
 80042e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ea:	bc08      	pop	{r3}
 80042ec:	469e      	mov	lr, r3
 80042ee:	4770      	bx	lr
